import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { Operations, Subscriptions, Tenants } from "./operationsInterfaces";
import { SubscriptionClientOptionalParams, CheckResourceNameOptionalParams, CheckResourceNameResponse } from "./models";
export declare class SubscriptionClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the SubscriptionClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, options?: SubscriptionClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * A resource name is valid if it is not a reserved word, does not contains a reserved word and does
     * not start with a reserved word
     * @param options The options parameters.
     */
    checkResourceName(options?: CheckResourceNameOptionalParams): Promise<CheckResourceNameResponse>;
    operations: Operations;
    subscriptions: Subscriptions;
    tenants: Tenants;
}
//# sourceMappingURL=subscriptionClient.d.ts.map
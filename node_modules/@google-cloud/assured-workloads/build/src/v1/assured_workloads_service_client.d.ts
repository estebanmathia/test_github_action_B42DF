/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Service to manage AssuredWorkloads.
 * @class
 * @memberof v1
 */
export declare class AssuredWorkloadsServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    assuredWorkloadsServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of AssuredWorkloadsServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new AssuredWorkloadsServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Updates an existing workload.
     * Currently allows updating of workload display_name and labels.
     * For force updates don't set etag field in the Workload.
     * Only one update operation per workload can be in progress.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.assuredworkloads.v1.Workload} request.workload
     *   Required. The workload to update.
     *   The workload's `name` field is used to identify the workload to be updated.
     *   Format:
     *   organizations/{org_id}/locations/{location_id}/workloads/{workload_id}
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. The list of fields to be updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.assuredworkloads.v1.Workload|Workload}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/assured_workloads_service.update_workload.js</caption>
     * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_UpdateWorkload_async
     */
    updateWorkload(request?: protos.google.cloud.assuredworkloads.v1.IUpdateWorkloadRequest, options?: CallOptions): Promise<[
        protos.google.cloud.assuredworkloads.v1.IWorkload,
        (protos.google.cloud.assuredworkloads.v1.IUpdateWorkloadRequest | undefined),
        {} | undefined
    ]>;
    updateWorkload(request: protos.google.cloud.assuredworkloads.v1.IUpdateWorkloadRequest, options: CallOptions, callback: Callback<protos.google.cloud.assuredworkloads.v1.IWorkload, protos.google.cloud.assuredworkloads.v1.IUpdateWorkloadRequest | null | undefined, {} | null | undefined>): void;
    updateWorkload(request: protos.google.cloud.assuredworkloads.v1.IUpdateWorkloadRequest, callback: Callback<protos.google.cloud.assuredworkloads.v1.IWorkload, protos.google.cloud.assuredworkloads.v1.IUpdateWorkloadRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Restrict the list of resources allowed in the Workload environment.
     * The current list of allowed products can be found at
     * https://cloud.google.com/assured-workloads/docs/supported-products
     * In addition to assuredworkloads.workload.update permission, the user should
     * also have orgpolicy.policy.set permission on the folder resource
     * to use this functionality.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Workload. This is the workloads's
     *   relative path in the API, formatted as
     *   "organizations/{organization_id}/locations/{location_id}/workloads/{workload_id}".
     *   For example,
     *   "organizations/123/locations/us-east1/workloads/assured-workload-1".
     * @param {google.cloud.assuredworkloads.v1.RestrictAllowedResourcesRequest.RestrictionType} request.restrictionType
     *   Required. The type of restriction for using gcp products in the Workload environment.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.assuredworkloads.v1.RestrictAllowedResourcesResponse|RestrictAllowedResourcesResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/assured_workloads_service.restrict_allowed_resources.js</caption>
     * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_RestrictAllowedResources_async
     */
    restrictAllowedResources(request?: protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesResponse,
        (protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesRequest | undefined),
        {} | undefined
    ]>;
    restrictAllowedResources(request: protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesRequest, options: CallOptions, callback: Callback<protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesResponse, protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesRequest | null | undefined, {} | null | undefined>): void;
    restrictAllowedResources(request: protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesRequest, callback: Callback<protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesResponse, protos.google.cloud.assuredworkloads.v1.IRestrictAllowedResourcesRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes the workload. Make sure that workload's direct children are already
     * in a deleted state, otherwise the request will fail with a
     * FAILED_PRECONDITION error.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The `name` field is used to identify the workload.
     *   Format:
     *   organizations/{org_id}/locations/{location_id}/workloads/{workload_id}
     * @param {string} [request.etag]
     *   Optional. The etag of the workload.
     *   If this is provided, it must match the server's etag.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/assured_workloads_service.delete_workload.js</caption>
     * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_DeleteWorkload_async
     */
    deleteWorkload(request?: protos.google.cloud.assuredworkloads.v1.IDeleteWorkloadRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        (protos.google.cloud.assuredworkloads.v1.IDeleteWorkloadRequest | undefined),
        {} | undefined
    ]>;
    deleteWorkload(request: protos.google.cloud.assuredworkloads.v1.IDeleteWorkloadRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.assuredworkloads.v1.IDeleteWorkloadRequest | null | undefined, {} | null | undefined>): void;
    deleteWorkload(request: protos.google.cloud.assuredworkloads.v1.IDeleteWorkloadRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.assuredworkloads.v1.IDeleteWorkloadRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets Assured Workload associated with a CRM Node
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Workload to fetch. This is the workload's
     *   relative path in the API, formatted as
     *   "organizations/{organization_id}/locations/{location_id}/workloads/{workload_id}".
     *   For example,
     *   "organizations/123/locations/us-east1/workloads/assured-workload-1".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.assuredworkloads.v1.Workload|Workload}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/assured_workloads_service.get_workload.js</caption>
     * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_GetWorkload_async
     */
    getWorkload(request?: protos.google.cloud.assuredworkloads.v1.IGetWorkloadRequest, options?: CallOptions): Promise<[
        protos.google.cloud.assuredworkloads.v1.IWorkload,
        protos.google.cloud.assuredworkloads.v1.IGetWorkloadRequest | undefined,
        {} | undefined
    ]>;
    getWorkload(request: protos.google.cloud.assuredworkloads.v1.IGetWorkloadRequest, options: CallOptions, callback: Callback<protos.google.cloud.assuredworkloads.v1.IWorkload, protos.google.cloud.assuredworkloads.v1.IGetWorkloadRequest | null | undefined, {} | null | undefined>): void;
    getWorkload(request: protos.google.cloud.assuredworkloads.v1.IGetWorkloadRequest, callback: Callback<protos.google.cloud.assuredworkloads.v1.IWorkload, protos.google.cloud.assuredworkloads.v1.IGetWorkloadRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Retrieves Assured Workload Violation based on ID.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Violation to fetch (ie. Violation.name).
     *   Format:
     *   organizations/{organization}/locations/{location}/workloads/{workload}/violations/{violation}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.assuredworkloads.v1.Violation|Violation}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/assured_workloads_service.get_violation.js</caption>
     * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_GetViolation_async
     */
    getViolation(request?: protos.google.cloud.assuredworkloads.v1.IGetViolationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.assuredworkloads.v1.IViolation,
        protos.google.cloud.assuredworkloads.v1.IGetViolationRequest | undefined,
        {} | undefined
    ]>;
    getViolation(request: protos.google.cloud.assuredworkloads.v1.IGetViolationRequest, options: CallOptions, callback: Callback<protos.google.cloud.assuredworkloads.v1.IViolation, protos.google.cloud.assuredworkloads.v1.IGetViolationRequest | null | undefined, {} | null | undefined>): void;
    getViolation(request: protos.google.cloud.assuredworkloads.v1.IGetViolationRequest, callback: Callback<protos.google.cloud.assuredworkloads.v1.IViolation, protos.google.cloud.assuredworkloads.v1.IGetViolationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Acknowledges an existing violation. By acknowledging a violation, users
     * acknowledge the existence of a compliance violation in their workload and
     * decide to ignore it due to a valid business justification. Acknowledgement
     * is a permanent operation and it cannot be reverted.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Violation to acknowledge.
     *   Format:
     *   organizations/{organization}/locations/{location}/workloads/{workload}/violations/{violation}
     * @param {string} request.comment
     *   Required. Business justification explaining the need for violation acknowledgement
     * @param {string} [request.nonCompliantOrgPolicy]
     *   Optional. This field is deprecated and will be removed in future version of the API.
     *   Name of the OrgPolicy which was modified with non-compliant change and
     *   resulted in this violation.
     *   Format:
     *   projects/{project_number}/policies/{constraint_name}
     *   folders/{folder_id}/policies/{constraint_name}
     *   organizations/{organization_id}/policies/{constraint_name}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.assuredworkloads.v1.AcknowledgeViolationResponse|AcknowledgeViolationResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/assured_workloads_service.acknowledge_violation.js</caption>
     * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_AcknowledgeViolation_async
     */
    acknowledgeViolation(request?: protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationResponse,
        (protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationRequest | undefined),
        {} | undefined
    ]>;
    acknowledgeViolation(request: protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationRequest, options: CallOptions, callback: Callback<protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationResponse, protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationRequest | null | undefined, {} | null | undefined>): void;
    acknowledgeViolation(request: protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationRequest, callback: Callback<protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationResponse, protos.google.cloud.assuredworkloads.v1.IAcknowledgeViolationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates Assured Workload.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the new Workload's parent.
     *   Must be of the form `organizations/{org_id}/locations/{location_id}`.
     * @param {google.cloud.assuredworkloads.v1.Workload} request.workload
     *   Required. Assured Workload to create
     * @param {string} [request.externalId]
     *   Optional. A identifier associated with the workload and underlying projects which
     *   allows for the break down of billing costs for a workload. The value
     *   provided for the identifier will add a label to the workload and contained
     *   projects with the identifier as the value.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/assured_workloads_service.create_workload.js</caption>
     * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_CreateWorkload_async
     */
    createWorkload(request?: protos.google.cloud.assuredworkloads.v1.ICreateWorkloadRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.assuredworkloads.v1.IWorkload, protos.google.cloud.assuredworkloads.v1.ICreateWorkloadOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createWorkload(request: protos.google.cloud.assuredworkloads.v1.ICreateWorkloadRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.assuredworkloads.v1.IWorkload, protos.google.cloud.assuredworkloads.v1.ICreateWorkloadOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createWorkload(request: protos.google.cloud.assuredworkloads.v1.ICreateWorkloadRequest, callback: Callback<LROperation<protos.google.cloud.assuredworkloads.v1.IWorkload, protos.google.cloud.assuredworkloads.v1.ICreateWorkloadOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createWorkload()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/assured_workloads_service.create_workload.js</caption>
     * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_CreateWorkload_async
     */
    checkCreateWorkloadProgress(name: string): Promise<LROperation<protos.google.cloud.assuredworkloads.v1.Workload, protos.google.cloud.assuredworkloads.v1.CreateWorkloadOperationMetadata>>;
    /**
     * Lists Assured Workloads under a CRM Node.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent Resource to list workloads from.
     *   Must be of the form `organizations/{org_id}/locations/{location}`.
     * @param {number} request.pageSize
     *   Page size.
     * @param {string} request.pageToken
     *   Page token returned from previous request. Page token contains context from
     *   previous request. Page token needs to be passed in the second and following
     *   requests.
     * @param {string} request.filter
     *   A custom filter for filtering by properties of a workload. At this time,
     *   only filtering by labels is supported.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.assuredworkloads.v1.Workload|Workload}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listWorkloadsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listWorkloads(request?: protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.assuredworkloads.v1.IWorkload[],
        protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest | null,
        protos.google.cloud.assuredworkloads.v1.IListWorkloadsResponse
    ]>;
    listWorkloads(request: protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest, protos.google.cloud.assuredworkloads.v1.IListWorkloadsResponse | null | undefined, protos.google.cloud.assuredworkloads.v1.IWorkload>): void;
    listWorkloads(request: protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest, callback: PaginationCallback<protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest, protos.google.cloud.assuredworkloads.v1.IListWorkloadsResponse | null | undefined, protos.google.cloud.assuredworkloads.v1.IWorkload>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent Resource to list workloads from.
     *   Must be of the form `organizations/{org_id}/locations/{location}`.
     * @param {number} request.pageSize
     *   Page size.
     * @param {string} request.pageToken
     *   Page token returned from previous request. Page token contains context from
     *   previous request. Page token needs to be passed in the second and following
     *   requests.
     * @param {string} request.filter
     *   A custom filter for filtering by properties of a workload. At this time,
     *   only filtering by labels is supported.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.assuredworkloads.v1.Workload|Workload} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listWorkloadsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listWorkloadsStream(request?: protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listWorkloads`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent Resource to list workloads from.
     *   Must be of the form `organizations/{org_id}/locations/{location}`.
     * @param {number} request.pageSize
     *   Page size.
     * @param {string} request.pageToken
     *   Page token returned from previous request. Page token contains context from
     *   previous request. Page token needs to be passed in the second and following
     *   requests.
     * @param {string} request.filter
     *   A custom filter for filtering by properties of a workload. At this time,
     *   only filtering by labels is supported.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.assuredworkloads.v1.Workload|Workload}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/assured_workloads_service.list_workloads.js</caption>
     * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_ListWorkloads_async
     */
    listWorkloadsAsync(request?: protos.google.cloud.assuredworkloads.v1.IListWorkloadsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.assuredworkloads.v1.IWorkload>;
    /**
     * Lists the Violations in the AssuredWorkload Environment.
     * Callers may also choose to read across multiple Workloads as per
     * [AIP-159](https://google.aip.dev/159) by using '-' (the hyphen or dash
     * character) as a wildcard character instead of workload-id in the parent.
     * Format `organizations/{org_id}/locations/{location}/workloads/-`
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The Workload name.
     *   Format `organizations/{org_id}/locations/{location}/workloads/{workload}`.
     * @param {google.cloud.assuredworkloads.v1.TimeWindow} [request.interval]
     *   Optional. Specifies the time window for retrieving active Violations.
     *   When specified, retrieves Violations that were active between start_time
     *   and end_time.
     * @param {number} [request.pageSize]
     *   Optional. Page size.
     * @param {string} [request.pageToken]
     *   Optional. Page token returned from previous request.
     * @param {string} [request.filter]
     *   Optional. A custom filter for filtering by the Violations properties.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.assuredworkloads.v1.Violation|Violation}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listViolationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listViolations(request?: protos.google.cloud.assuredworkloads.v1.IListViolationsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.assuredworkloads.v1.IViolation[],
        protos.google.cloud.assuredworkloads.v1.IListViolationsRequest | null,
        protos.google.cloud.assuredworkloads.v1.IListViolationsResponse
    ]>;
    listViolations(request: protos.google.cloud.assuredworkloads.v1.IListViolationsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.assuredworkloads.v1.IListViolationsRequest, protos.google.cloud.assuredworkloads.v1.IListViolationsResponse | null | undefined, protos.google.cloud.assuredworkloads.v1.IViolation>): void;
    listViolations(request: protos.google.cloud.assuredworkloads.v1.IListViolationsRequest, callback: PaginationCallback<protos.google.cloud.assuredworkloads.v1.IListViolationsRequest, protos.google.cloud.assuredworkloads.v1.IListViolationsResponse | null | undefined, protos.google.cloud.assuredworkloads.v1.IViolation>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The Workload name.
     *   Format `organizations/{org_id}/locations/{location}/workloads/{workload}`.
     * @param {google.cloud.assuredworkloads.v1.TimeWindow} [request.interval]
     *   Optional. Specifies the time window for retrieving active Violations.
     *   When specified, retrieves Violations that were active between start_time
     *   and end_time.
     * @param {number} [request.pageSize]
     *   Optional. Page size.
     * @param {string} [request.pageToken]
     *   Optional. Page token returned from previous request.
     * @param {string} [request.filter]
     *   Optional. A custom filter for filtering by the Violations properties.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.assuredworkloads.v1.Violation|Violation} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listViolationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listViolationsStream(request?: protos.google.cloud.assuredworkloads.v1.IListViolationsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listViolations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The Workload name.
     *   Format `organizations/{org_id}/locations/{location}/workloads/{workload}`.
     * @param {google.cloud.assuredworkloads.v1.TimeWindow} [request.interval]
     *   Optional. Specifies the time window for retrieving active Violations.
     *   When specified, retrieves Violations that were active between start_time
     *   and end_time.
     * @param {number} [request.pageSize]
     *   Optional. Page size.
     * @param {string} [request.pageToken]
     *   Optional. Page token returned from previous request.
     * @param {string} [request.filter]
     *   Optional. A custom filter for filtering by the Violations properties.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.assuredworkloads.v1.Violation|Violation}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/assured_workloads_service.list_violations.js</caption>
     * region_tag:assuredworkloads_v1_generated_AssuredWorkloadsService_ListViolations_async
     */
    listViolationsAsync(request?: protos.google.cloud.assuredworkloads.v1.IListViolationsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.assuredworkloads.v1.IViolation>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} organization
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(organization: string, location: string): string;
    /**
     * Parse the organization from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified organization resource name string.
     *
     * @param {string} organization
     * @returns {string} Resource name string.
     */
    organizationPath(organization: string): string;
    /**
     * Parse the organization from Organization resource.
     *
     * @param {string} organizationName
     *   A fully-qualified path representing Organization resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationName(organizationName: string): string | number;
    /**
     * Return a fully-qualified violation resource name string.
     *
     * @param {string} organization
     * @param {string} location
     * @param {string} workload
     * @param {string} violation
     * @returns {string} Resource name string.
     */
    violationPath(organization: string, location: string, workload: string, violation: string): string;
    /**
     * Parse the organization from Violation resource.
     *
     * @param {string} violationName
     *   A fully-qualified path representing Violation resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromViolationName(violationName: string): string | number;
    /**
     * Parse the location from Violation resource.
     *
     * @param {string} violationName
     *   A fully-qualified path representing Violation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromViolationName(violationName: string): string | number;
    /**
     * Parse the workload from Violation resource.
     *
     * @param {string} violationName
     *   A fully-qualified path representing Violation resource.
     * @returns {string} A string representing the workload.
     */
    matchWorkloadFromViolationName(violationName: string): string | number;
    /**
     * Parse the violation from Violation resource.
     *
     * @param {string} violationName
     *   A fully-qualified path representing Violation resource.
     * @returns {string} A string representing the violation.
     */
    matchViolationFromViolationName(violationName: string): string | number;
    /**
     * Return a fully-qualified workload resource name string.
     *
     * @param {string} organization
     * @param {string} location
     * @param {string} workload
     * @returns {string} Resource name string.
     */
    workloadPath(organization: string, location: string, workload: string): string;
    /**
     * Parse the organization from Workload resource.
     *
     * @param {string} workloadName
     *   A fully-qualified path representing Workload resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromWorkloadName(workloadName: string): string | number;
    /**
     * Parse the location from Workload resource.
     *
     * @param {string} workloadName
     *   A fully-qualified path representing Workload resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWorkloadName(workloadName: string): string | number;
    /**
     * Parse the workload from Workload resource.
     *
     * @param {string} workloadName
     *   A fully-qualified path representing Workload resource.
     * @returns {string} A string representing the workload.
     */
    matchWorkloadFromWorkloadName(workloadName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}

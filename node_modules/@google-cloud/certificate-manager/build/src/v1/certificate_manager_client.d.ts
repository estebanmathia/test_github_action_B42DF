/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  API Overview
 *
 *  Certificates Manager API allows customers to see and manage all their TLS
 *  certificates.
 *
 *  Certificates Manager API service provides methods to manage certificates,
 *  group them into collections, and create serving configuration that can be
 *  easily applied to other Cloud resources e.g. Target Proxies.
 *
 *  Data Model
 *
 *  The Certificates Manager service exposes the following resources:
 *
 *  * `Certificate` that describes a single TLS certificate.
 *  * `CertificateMap` that describes a collection of certificates that can be
 *  attached to a target resource.
 *  * `CertificateMapEntry` that describes a single configuration entry that
 *  consists of a SNI and a group of certificates. It's a subresource of
 *  CertificateMap.
 *
 *  Certificate, CertificateMap and CertificateMapEntry IDs
 *  have to fully match the regexp `[a-z0-9-]{1,63}`. In other words,
 *  - only lower case letters, digits, and hyphen are allowed
 *  - length of the resource ID has to be in [1,63] range.
 *
 *  Provides methods to manage Cloud Certificate Manager entities.
 * @class
 * @memberof v1
 */
export declare class CertificateManagerClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    certificateManagerStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of CertificateManagerClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new CertificateManagerClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets details of a single Certificate.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. A name of the certificate to describe. Must be in the format
     *   `projects/* /locations/* /certificates/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.certificatemanager.v1.Certificate|Certificate}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.get_certificate.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_GetCertificate_async
     */
    getCertificate(request?: protos.google.cloud.certificatemanager.v1.IGetCertificateRequest, options?: CallOptions): Promise<[
        protos.google.cloud.certificatemanager.v1.ICertificate,
        (protos.google.cloud.certificatemanager.v1.IGetCertificateRequest | undefined),
        {} | undefined
    ]>;
    getCertificate(request: protos.google.cloud.certificatemanager.v1.IGetCertificateRequest, options: CallOptions, callback: Callback<protos.google.cloud.certificatemanager.v1.ICertificate, protos.google.cloud.certificatemanager.v1.IGetCertificateRequest | null | undefined, {} | null | undefined>): void;
    getCertificate(request: protos.google.cloud.certificatemanager.v1.IGetCertificateRequest, callback: Callback<protos.google.cloud.certificatemanager.v1.ICertificate, protos.google.cloud.certificatemanager.v1.IGetCertificateRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets details of a single CertificateMap.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. A name of the certificate map to describe. Must be in the format
     *   `projects/* /locations/* /certificateMaps/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.certificatemanager.v1.CertificateMap|CertificateMap}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.get_certificate_map.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_GetCertificateMap_async
     */
    getCertificateMap(request?: protos.google.cloud.certificatemanager.v1.IGetCertificateMapRequest, options?: CallOptions): Promise<[
        protos.google.cloud.certificatemanager.v1.ICertificateMap,
        (protos.google.cloud.certificatemanager.v1.IGetCertificateMapRequest | undefined),
        {} | undefined
    ]>;
    getCertificateMap(request: protos.google.cloud.certificatemanager.v1.IGetCertificateMapRequest, options: CallOptions, callback: Callback<protos.google.cloud.certificatemanager.v1.ICertificateMap, protos.google.cloud.certificatemanager.v1.IGetCertificateMapRequest | null | undefined, {} | null | undefined>): void;
    getCertificateMap(request: protos.google.cloud.certificatemanager.v1.IGetCertificateMapRequest, callback: Callback<protos.google.cloud.certificatemanager.v1.ICertificateMap, protos.google.cloud.certificatemanager.v1.IGetCertificateMapRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets details of a single CertificateMapEntry.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. A name of the certificate map entry to describe. Must be in the
     *   format `projects/* /locations/* /certificateMaps/* /certificateMapEntries/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.certificatemanager.v1.CertificateMapEntry|CertificateMapEntry}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.get_certificate_map_entry.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_GetCertificateMapEntry_async
     */
    getCertificateMapEntry(request?: protos.google.cloud.certificatemanager.v1.IGetCertificateMapEntryRequest, options?: CallOptions): Promise<[
        protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
        (protos.google.cloud.certificatemanager.v1.IGetCertificateMapEntryRequest | undefined),
        {} | undefined
    ]>;
    getCertificateMapEntry(request: protos.google.cloud.certificatemanager.v1.IGetCertificateMapEntryRequest, options: CallOptions, callback: Callback<protos.google.cloud.certificatemanager.v1.ICertificateMapEntry, protos.google.cloud.certificatemanager.v1.IGetCertificateMapEntryRequest | null | undefined, {} | null | undefined>): void;
    getCertificateMapEntry(request: protos.google.cloud.certificatemanager.v1.IGetCertificateMapEntryRequest, callback: Callback<protos.google.cloud.certificatemanager.v1.ICertificateMapEntry, protos.google.cloud.certificatemanager.v1.IGetCertificateMapEntryRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets details of a single DnsAuthorization.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. A name of the dns authorization to describe. Must be in the
     *   format `projects/* /locations/* /dnsAuthorizations/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.certificatemanager.v1.DnsAuthorization|DnsAuthorization}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.get_dns_authorization.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_GetDnsAuthorization_async
     */
    getDnsAuthorization(request?: protos.google.cloud.certificatemanager.v1.IGetDnsAuthorizationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
        (protos.google.cloud.certificatemanager.v1.IGetDnsAuthorizationRequest | undefined),
        {} | undefined
    ]>;
    getDnsAuthorization(request: protos.google.cloud.certificatemanager.v1.IGetDnsAuthorizationRequest, options: CallOptions, callback: Callback<protos.google.cloud.certificatemanager.v1.IDnsAuthorization, protos.google.cloud.certificatemanager.v1.IGetDnsAuthorizationRequest | null | undefined, {} | null | undefined>): void;
    getDnsAuthorization(request: protos.google.cloud.certificatemanager.v1.IGetDnsAuthorizationRequest, callback: Callback<protos.google.cloud.certificatemanager.v1.IDnsAuthorization, protos.google.cloud.certificatemanager.v1.IGetDnsAuthorizationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets details of a single CertificateIssuanceConfig.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. A name of the certificate issuance config to describe. Must be in
     *   the format `projects/* /locations/* /certificateIssuanceConfigs/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.certificatemanager.v1.CertificateIssuanceConfig|CertificateIssuanceConfig}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.get_certificate_issuance_config.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_GetCertificateIssuanceConfig_async
     */
    getCertificateIssuanceConfig(request?: protos.google.cloud.certificatemanager.v1.IGetCertificateIssuanceConfigRequest, options?: CallOptions): Promise<[
        protos.google.cloud.certificatemanager.v1.ICertificateIssuanceConfig,
        (protos.google.cloud.certificatemanager.v1.IGetCertificateIssuanceConfigRequest | undefined),
        {} | undefined
    ]>;
    getCertificateIssuanceConfig(request: protos.google.cloud.certificatemanager.v1.IGetCertificateIssuanceConfigRequest, options: CallOptions, callback: Callback<protos.google.cloud.certificatemanager.v1.ICertificateIssuanceConfig, protos.google.cloud.certificatemanager.v1.IGetCertificateIssuanceConfigRequest | null | undefined, {} | null | undefined>): void;
    getCertificateIssuanceConfig(request: protos.google.cloud.certificatemanager.v1.IGetCertificateIssuanceConfigRequest, callback: Callback<protos.google.cloud.certificatemanager.v1.ICertificateIssuanceConfig, protos.google.cloud.certificatemanager.v1.IGetCertificateIssuanceConfigRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a new Certificate in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource of the certificate. Must be in the format
     *   `projects/* /locations/*`.
     * @param {string} request.certificateId
     *   Required. A user-provided name of the certificate.
     * @param {google.cloud.certificatemanager.v1.Certificate} request.certificate
     *   Required. A definition of the certificate to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificate_async
     */
    createCertificate(request?: protos.google.cloud.certificatemanager.v1.ICreateCertificateRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.certificatemanager.v1.ICertificate, protos.google.cloud.certificatemanager.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createCertificate(request: protos.google.cloud.certificatemanager.v1.ICreateCertificateRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.ICertificate, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createCertificate(request: protos.google.cloud.certificatemanager.v1.ICreateCertificateRequest, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.ICertificate, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createCertificate()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificate_async
     */
    checkCreateCertificateProgress(name: string): Promise<LROperation<protos.google.cloud.certificatemanager.v1.Certificate, protos.google.cloud.certificatemanager.v1.OperationMetadata>>;
    /**
     * Updates a Certificate.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.certificatemanager.v1.Certificate} request.certificate
     *   Required. A definition of the certificate to update.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. The update mask applies to the resource. For the `FieldMask`
     *   definition, see
     *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.update_certificate.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateCertificate_async
     */
    updateCertificate(request?: protos.google.cloud.certificatemanager.v1.IUpdateCertificateRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.certificatemanager.v1.ICertificate, protos.google.cloud.certificatemanager.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateCertificate(request: protos.google.cloud.certificatemanager.v1.IUpdateCertificateRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.ICertificate, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateCertificate(request: protos.google.cloud.certificatemanager.v1.IUpdateCertificateRequest, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.ICertificate, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateCertificate()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.update_certificate.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateCertificate_async
     */
    checkUpdateCertificateProgress(name: string): Promise<LROperation<protos.google.cloud.certificatemanager.v1.Certificate, protos.google.cloud.certificatemanager.v1.OperationMetadata>>;
    /**
     * Deletes a single Certificate.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. A name of the certificate to delete. Must be in the format
     *   `projects/* /locations/* /certificates/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificate_async
     */
    deleteCertificate(request?: protos.google.cloud.certificatemanager.v1.IDeleteCertificateRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.certificatemanager.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteCertificate(request: protos.google.cloud.certificatemanager.v1.IDeleteCertificateRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteCertificate(request: protos.google.cloud.certificatemanager.v1.IDeleteCertificateRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteCertificate()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificate_async
     */
    checkDeleteCertificateProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.certificatemanager.v1.OperationMetadata>>;
    /**
     * Creates a new CertificateMap in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource of the certificate map. Must be in the format
     *   `projects/* /locations/*`.
     * @param {string} request.certificateMapId
     *   Required. A user-provided name of the certificate map.
     * @param {google.cloud.certificatemanager.v1.CertificateMap} request.certificateMap
     *   Required. A definition of the certificate map to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate_map.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificateMap_async
     */
    createCertificateMap(request?: protos.google.cloud.certificatemanager.v1.ICreateCertificateMapRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.certificatemanager.v1.ICertificateMap, protos.google.cloud.certificatemanager.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createCertificateMap(request: protos.google.cloud.certificatemanager.v1.ICreateCertificateMapRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.ICertificateMap, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createCertificateMap(request: protos.google.cloud.certificatemanager.v1.ICreateCertificateMapRequest, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.ICertificateMap, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createCertificateMap()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate_map.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificateMap_async
     */
    checkCreateCertificateMapProgress(name: string): Promise<LROperation<protos.google.cloud.certificatemanager.v1.CertificateMap, protos.google.cloud.certificatemanager.v1.OperationMetadata>>;
    /**
     * Updates a CertificateMap.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.certificatemanager.v1.CertificateMap} request.certificateMap
     *   Required. A definition of the certificate map to update.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. The update mask applies to the resource. For the `FieldMask`
     *   definition, see
     *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.update_certificate_map.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateCertificateMap_async
     */
    updateCertificateMap(request?: protos.google.cloud.certificatemanager.v1.IUpdateCertificateMapRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.certificatemanager.v1.ICertificateMap, protos.google.cloud.certificatemanager.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateCertificateMap(request: protos.google.cloud.certificatemanager.v1.IUpdateCertificateMapRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.ICertificateMap, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateCertificateMap(request: protos.google.cloud.certificatemanager.v1.IUpdateCertificateMapRequest, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.ICertificateMap, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateCertificateMap()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.update_certificate_map.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateCertificateMap_async
     */
    checkUpdateCertificateMapProgress(name: string): Promise<LROperation<protos.google.cloud.certificatemanager.v1.CertificateMap, protos.google.cloud.certificatemanager.v1.OperationMetadata>>;
    /**
     * Deletes a single CertificateMap. A Certificate Map can't be deleted
     * if it contains Certificate Map Entries. Remove all the entries from
     * the map before calling this method.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. A name of the certificate map to delete. Must be in the format
     *   `projects/* /locations/* /certificateMaps/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate_map.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificateMap_async
     */
    deleteCertificateMap(request?: protos.google.cloud.certificatemanager.v1.IDeleteCertificateMapRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.certificatemanager.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteCertificateMap(request: protos.google.cloud.certificatemanager.v1.IDeleteCertificateMapRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteCertificateMap(request: protos.google.cloud.certificatemanager.v1.IDeleteCertificateMapRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteCertificateMap()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate_map.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificateMap_async
     */
    checkDeleteCertificateMapProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.certificatemanager.v1.OperationMetadata>>;
    /**
     * Creates a new CertificateMapEntry in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource of the certificate map entry. Must be in the
     *   format `projects/* /locations/* /certificateMaps/*`.
     * @param {string} request.certificateMapEntryId
     *   Required. A user-provided name of the certificate map entry.
     * @param {google.cloud.certificatemanager.v1.CertificateMapEntry} request.certificateMapEntry
     *   Required. A definition of the certificate map entry to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate_map_entry.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificateMapEntry_async
     */
    createCertificateMapEntry(request?: protos.google.cloud.certificatemanager.v1.ICreateCertificateMapEntryRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.certificatemanager.v1.ICertificateMapEntry, protos.google.cloud.certificatemanager.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createCertificateMapEntry(request: protos.google.cloud.certificatemanager.v1.ICreateCertificateMapEntryRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.ICertificateMapEntry, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createCertificateMapEntry(request: protos.google.cloud.certificatemanager.v1.ICreateCertificateMapEntryRequest, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.ICertificateMapEntry, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createCertificateMapEntry()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate_map_entry.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificateMapEntry_async
     */
    checkCreateCertificateMapEntryProgress(name: string): Promise<LROperation<protos.google.cloud.certificatemanager.v1.CertificateMapEntry, protos.google.cloud.certificatemanager.v1.OperationMetadata>>;
    /**
     * Updates a CertificateMapEntry.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.certificatemanager.v1.CertificateMapEntry} request.certificateMapEntry
     *   Required. A definition of the certificate map entry to create map entry.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. The update mask applies to the resource. For the `FieldMask`
     *   definition, see
     *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.update_certificate_map_entry.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateCertificateMapEntry_async
     */
    updateCertificateMapEntry(request?: protos.google.cloud.certificatemanager.v1.IUpdateCertificateMapEntryRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.certificatemanager.v1.ICertificateMapEntry, protos.google.cloud.certificatemanager.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateCertificateMapEntry(request: protos.google.cloud.certificatemanager.v1.IUpdateCertificateMapEntryRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.ICertificateMapEntry, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateCertificateMapEntry(request: protos.google.cloud.certificatemanager.v1.IUpdateCertificateMapEntryRequest, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.ICertificateMapEntry, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateCertificateMapEntry()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.update_certificate_map_entry.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateCertificateMapEntry_async
     */
    checkUpdateCertificateMapEntryProgress(name: string): Promise<LROperation<protos.google.cloud.certificatemanager.v1.CertificateMapEntry, protos.google.cloud.certificatemanager.v1.OperationMetadata>>;
    /**
     * Deletes a single CertificateMapEntry.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. A name of the certificate map entry to delete. Must be in the
     *   format `projects/* /locations/* /certificateMaps/* /certificateMapEntries/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate_map_entry.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificateMapEntry_async
     */
    deleteCertificateMapEntry(request?: protos.google.cloud.certificatemanager.v1.IDeleteCertificateMapEntryRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.certificatemanager.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteCertificateMapEntry(request: protos.google.cloud.certificatemanager.v1.IDeleteCertificateMapEntryRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteCertificateMapEntry(request: protos.google.cloud.certificatemanager.v1.IDeleteCertificateMapEntryRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteCertificateMapEntry()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate_map_entry.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificateMapEntry_async
     */
    checkDeleteCertificateMapEntryProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.certificatemanager.v1.OperationMetadata>>;
    /**
     * Creates a new DnsAuthorization in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource of the dns authorization. Must be in the
     *   format `projects/* /locations/*`.
     * @param {string} request.dnsAuthorizationId
     *   Required. A user-provided name of the dns authorization.
     * @param {google.cloud.certificatemanager.v1.DnsAuthorization} request.dnsAuthorization
     *   Required. A definition of the dns authorization to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.create_dns_authorization.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_CreateDnsAuthorization_async
     */
    createDnsAuthorization(request?: protos.google.cloud.certificatemanager.v1.ICreateDnsAuthorizationRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.certificatemanager.v1.IDnsAuthorization, protos.google.cloud.certificatemanager.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createDnsAuthorization(request: protos.google.cloud.certificatemanager.v1.ICreateDnsAuthorizationRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.IDnsAuthorization, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createDnsAuthorization(request: protos.google.cloud.certificatemanager.v1.ICreateDnsAuthorizationRequest, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.IDnsAuthorization, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createDnsAuthorization()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.create_dns_authorization.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_CreateDnsAuthorization_async
     */
    checkCreateDnsAuthorizationProgress(name: string): Promise<LROperation<protos.google.cloud.certificatemanager.v1.DnsAuthorization, protos.google.cloud.certificatemanager.v1.OperationMetadata>>;
    /**
     * Updates a DnsAuthorization.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.certificatemanager.v1.DnsAuthorization} request.dnsAuthorization
     *   Required. A definition of the dns authorization to update.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. The update mask applies to the resource. For the `FieldMask`
     *   definition, see
     *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.update_dns_authorization.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateDnsAuthorization_async
     */
    updateDnsAuthorization(request?: protos.google.cloud.certificatemanager.v1.IUpdateDnsAuthorizationRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.certificatemanager.v1.IDnsAuthorization, protos.google.cloud.certificatemanager.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateDnsAuthorization(request: protos.google.cloud.certificatemanager.v1.IUpdateDnsAuthorizationRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.IDnsAuthorization, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateDnsAuthorization(request: protos.google.cloud.certificatemanager.v1.IUpdateDnsAuthorizationRequest, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.IDnsAuthorization, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateDnsAuthorization()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.update_dns_authorization.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateDnsAuthorization_async
     */
    checkUpdateDnsAuthorizationProgress(name: string): Promise<LROperation<protos.google.cloud.certificatemanager.v1.DnsAuthorization, protos.google.cloud.certificatemanager.v1.OperationMetadata>>;
    /**
     * Deletes a single DnsAuthorization.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. A name of the dns authorization to delete. Must be in the format
     *   `projects/* /locations/* /dnsAuthorizations/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.delete_dns_authorization.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteDnsAuthorization_async
     */
    deleteDnsAuthorization(request?: protos.google.cloud.certificatemanager.v1.IDeleteDnsAuthorizationRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.certificatemanager.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteDnsAuthorization(request: protos.google.cloud.certificatemanager.v1.IDeleteDnsAuthorizationRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteDnsAuthorization(request: protos.google.cloud.certificatemanager.v1.IDeleteDnsAuthorizationRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteDnsAuthorization()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.delete_dns_authorization.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteDnsAuthorization_async
     */
    checkDeleteDnsAuthorizationProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.certificatemanager.v1.OperationMetadata>>;
    /**
     * Creates a new CertificateIssuanceConfig in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource of the certificate issuance config. Must be
     *   in the format `projects/* /locations/*`.
     * @param {string} request.certificateIssuanceConfigId
     *   Required. A user-provided name of the certificate config.
     * @param {google.cloud.certificatemanager.v1.CertificateIssuanceConfig} request.certificateIssuanceConfig
     *   Required. A definition of the certificate issuance config to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate_issuance_config.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificateIssuanceConfig_async
     */
    createCertificateIssuanceConfig(request?: protos.google.cloud.certificatemanager.v1.ICreateCertificateIssuanceConfigRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.certificatemanager.v1.ICertificateIssuanceConfig, protos.google.cloud.certificatemanager.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createCertificateIssuanceConfig(request: protos.google.cloud.certificatemanager.v1.ICreateCertificateIssuanceConfigRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.ICertificateIssuanceConfig, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createCertificateIssuanceConfig(request: protos.google.cloud.certificatemanager.v1.ICreateCertificateIssuanceConfigRequest, callback: Callback<LROperation<protos.google.cloud.certificatemanager.v1.ICertificateIssuanceConfig, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createCertificateIssuanceConfig()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate_issuance_config.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificateIssuanceConfig_async
     */
    checkCreateCertificateIssuanceConfigProgress(name: string): Promise<LROperation<protos.google.cloud.certificatemanager.v1.CertificateIssuanceConfig, protos.google.cloud.certificatemanager.v1.OperationMetadata>>;
    /**
     * Deletes a single CertificateIssuanceConfig.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. A name of the certificate issuance config to delete. Must be in
     *   the format `projects/* /locations/* /certificateIssuanceConfigs/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate_issuance_config.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificateIssuanceConfig_async
     */
    deleteCertificateIssuanceConfig(request?: protos.google.cloud.certificatemanager.v1.IDeleteCertificateIssuanceConfigRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.certificatemanager.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteCertificateIssuanceConfig(request: protos.google.cloud.certificatemanager.v1.IDeleteCertificateIssuanceConfigRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteCertificateIssuanceConfig(request: protos.google.cloud.certificatemanager.v1.IDeleteCertificateIssuanceConfigRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.certificatemanager.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteCertificateIssuanceConfig()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate_issuance_config.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificateIssuanceConfig_async
     */
    checkDeleteCertificateIssuanceConfigProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.certificatemanager.v1.OperationMetadata>>;
    /**
     * Lists Certificates in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the certificate should be
     *   listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificates to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificatesResponse`. Indicates that
     *   this is a continuation of a prior `ListCertificates` call, and that the
     *   system should return the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Certificates returned.
     * @param {string} request.orderBy
     *   A list of Certificate field names used to specify the order of the returned
     *   results. The default sorting order is ascending. To specify descending
     *   order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.certificatemanager.v1.Certificate|Certificate}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listCertificatesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificates(request?: protos.google.cloud.certificatemanager.v1.IListCertificatesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.certificatemanager.v1.ICertificate[],
        protos.google.cloud.certificatemanager.v1.IListCertificatesRequest | null,
        protos.google.cloud.certificatemanager.v1.IListCertificatesResponse
    ]>;
    listCertificates(request: protos.google.cloud.certificatemanager.v1.IListCertificatesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.certificatemanager.v1.IListCertificatesRequest, protos.google.cloud.certificatemanager.v1.IListCertificatesResponse | null | undefined, protos.google.cloud.certificatemanager.v1.ICertificate>): void;
    listCertificates(request: protos.google.cloud.certificatemanager.v1.IListCertificatesRequest, callback: PaginationCallback<protos.google.cloud.certificatemanager.v1.IListCertificatesRequest, protos.google.cloud.certificatemanager.v1.IListCertificatesResponse | null | undefined, protos.google.cloud.certificatemanager.v1.ICertificate>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the certificate should be
     *   listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificates to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificatesResponse`. Indicates that
     *   this is a continuation of a prior `ListCertificates` call, and that the
     *   system should return the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Certificates returned.
     * @param {string} request.orderBy
     *   A list of Certificate field names used to specify the order of the returned
     *   results. The default sorting order is ascending. To specify descending
     *   order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.certificatemanager.v1.Certificate|Certificate} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCertificatesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificatesStream(request?: protos.google.cloud.certificatemanager.v1.IListCertificatesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listCertificates`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the certificate should be
     *   listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificates to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificatesResponse`. Indicates that
     *   this is a continuation of a prior `ListCertificates` call, and that the
     *   system should return the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Certificates returned.
     * @param {string} request.orderBy
     *   A list of Certificate field names used to specify the order of the returned
     *   results. The default sorting order is ascending. To specify descending
     *   order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.certificatemanager.v1.Certificate|Certificate}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.list_certificates.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_ListCertificates_async
     */
    listCertificatesAsync(request?: protos.google.cloud.certificatemanager.v1.IListCertificatesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.certificatemanager.v1.ICertificate>;
    /**
     * Lists CertificateMaps in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the certificate maps should
     *   be listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificate maps to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificateMapsResponse`. Indicates
     *   that this is a continuation of a prior `ListCertificateMaps` call, and that
     *   the system should return the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Certificates Maps returned.
     * @param {string} request.orderBy
     *   A list of Certificate Map field names used to specify the order of the
     *   returned results. The default sorting order is ascending. To specify
     *   descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.certificatemanager.v1.CertificateMap|CertificateMap}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listCertificateMapsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateMaps(request?: protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.certificatemanager.v1.ICertificateMap[],
        protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest | null,
        protos.google.cloud.certificatemanager.v1.IListCertificateMapsResponse
    ]>;
    listCertificateMaps(request: protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest, protos.google.cloud.certificatemanager.v1.IListCertificateMapsResponse | null | undefined, protos.google.cloud.certificatemanager.v1.ICertificateMap>): void;
    listCertificateMaps(request: protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest, callback: PaginationCallback<protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest, protos.google.cloud.certificatemanager.v1.IListCertificateMapsResponse | null | undefined, protos.google.cloud.certificatemanager.v1.ICertificateMap>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the certificate maps should
     *   be listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificate maps to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificateMapsResponse`. Indicates
     *   that this is a continuation of a prior `ListCertificateMaps` call, and that
     *   the system should return the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Certificates Maps returned.
     * @param {string} request.orderBy
     *   A list of Certificate Map field names used to specify the order of the
     *   returned results. The default sorting order is ascending. To specify
     *   descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.certificatemanager.v1.CertificateMap|CertificateMap} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCertificateMapsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateMapsStream(request?: protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listCertificateMaps`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the certificate maps should
     *   be listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificate maps to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificateMapsResponse`. Indicates
     *   that this is a continuation of a prior `ListCertificateMaps` call, and that
     *   the system should return the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Certificates Maps returned.
     * @param {string} request.orderBy
     *   A list of Certificate Map field names used to specify the order of the
     *   returned results. The default sorting order is ascending. To specify
     *   descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.certificatemanager.v1.CertificateMap|CertificateMap}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.list_certificate_maps.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_ListCertificateMaps_async
     */
    listCertificateMapsAsync(request?: protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.certificatemanager.v1.ICertificateMap>;
    /**
     * Lists CertificateMapEntries in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project, location and certificate map from which the
     *   certificate map entries should be listed, specified in the format
     *   `projects/* /locations/* /certificateMaps/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificate map entries to return. The service may return
     *   fewer than this value.
     *   If unspecified, at most 50 certificate map entries will be returned.
     *   The maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificateMapEntriesResponse`.
     *   Indicates that this is a continuation of a prior
     *   `ListCertificateMapEntries` call, and that the system should return the
     *   next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the returned Certificate Map Entries.
     * @param {string} request.orderBy
     *   A list of Certificate Map Entry field names used to specify
     *   the order of the returned results. The default sorting order is ascending.
     *   To specify descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.certificatemanager.v1.CertificateMapEntry|CertificateMapEntry}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listCertificateMapEntriesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateMapEntries(request?: protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.certificatemanager.v1.ICertificateMapEntry[],
        protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest | null,
        protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesResponse
    ]>;
    listCertificateMapEntries(request: protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest, protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesResponse | null | undefined, protos.google.cloud.certificatemanager.v1.ICertificateMapEntry>): void;
    listCertificateMapEntries(request: protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest, callback: PaginationCallback<protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest, protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesResponse | null | undefined, protos.google.cloud.certificatemanager.v1.ICertificateMapEntry>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project, location and certificate map from which the
     *   certificate map entries should be listed, specified in the format
     *   `projects/* /locations/* /certificateMaps/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificate map entries to return. The service may return
     *   fewer than this value.
     *   If unspecified, at most 50 certificate map entries will be returned.
     *   The maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificateMapEntriesResponse`.
     *   Indicates that this is a continuation of a prior
     *   `ListCertificateMapEntries` call, and that the system should return the
     *   next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the returned Certificate Map Entries.
     * @param {string} request.orderBy
     *   A list of Certificate Map Entry field names used to specify
     *   the order of the returned results. The default sorting order is ascending.
     *   To specify descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.certificatemanager.v1.CertificateMapEntry|CertificateMapEntry} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCertificateMapEntriesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateMapEntriesStream(request?: protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listCertificateMapEntries`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project, location and certificate map from which the
     *   certificate map entries should be listed, specified in the format
     *   `projects/* /locations/* /certificateMaps/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificate map entries to return. The service may return
     *   fewer than this value.
     *   If unspecified, at most 50 certificate map entries will be returned.
     *   The maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificateMapEntriesResponse`.
     *   Indicates that this is a continuation of a prior
     *   `ListCertificateMapEntries` call, and that the system should return the
     *   next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the returned Certificate Map Entries.
     * @param {string} request.orderBy
     *   A list of Certificate Map Entry field names used to specify
     *   the order of the returned results. The default sorting order is ascending.
     *   To specify descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.certificatemanager.v1.CertificateMapEntry|CertificateMapEntry}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.list_certificate_map_entries.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_ListCertificateMapEntries_async
     */
    listCertificateMapEntriesAsync(request?: protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.certificatemanager.v1.ICertificateMapEntry>;
    /**
     * Lists DnsAuthorizations in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the dns authorizations should
     *   be listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of dns authorizations to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListDnsAuthorizationsResponse`. Indicates
     *   that this is a continuation of a prior `ListDnsAuthorizations` call, and
     *   that the system should return the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Dns Authorizations returned.
     * @param {string} request.orderBy
     *   A list of Dns Authorization field names used to specify the order of the
     *   returned results. The default sorting order is ascending. To specify
     *   descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.certificatemanager.v1.DnsAuthorization|DnsAuthorization}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listDnsAuthorizationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDnsAuthorizations(request?: protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.certificatemanager.v1.IDnsAuthorization[],
        protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest | null,
        protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsResponse
    ]>;
    listDnsAuthorizations(request: protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest, protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsResponse | null | undefined, protos.google.cloud.certificatemanager.v1.IDnsAuthorization>): void;
    listDnsAuthorizations(request: protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest, callback: PaginationCallback<protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest, protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsResponse | null | undefined, protos.google.cloud.certificatemanager.v1.IDnsAuthorization>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the dns authorizations should
     *   be listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of dns authorizations to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListDnsAuthorizationsResponse`. Indicates
     *   that this is a continuation of a prior `ListDnsAuthorizations` call, and
     *   that the system should return the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Dns Authorizations returned.
     * @param {string} request.orderBy
     *   A list of Dns Authorization field names used to specify the order of the
     *   returned results. The default sorting order is ascending. To specify
     *   descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.certificatemanager.v1.DnsAuthorization|DnsAuthorization} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDnsAuthorizationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDnsAuthorizationsStream(request?: protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listDnsAuthorizations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the dns authorizations should
     *   be listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of dns authorizations to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListDnsAuthorizationsResponse`. Indicates
     *   that this is a continuation of a prior `ListDnsAuthorizations` call, and
     *   that the system should return the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Dns Authorizations returned.
     * @param {string} request.orderBy
     *   A list of Dns Authorization field names used to specify the order of the
     *   returned results. The default sorting order is ascending. To specify
     *   descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.certificatemanager.v1.DnsAuthorization|DnsAuthorization}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.list_dns_authorizations.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_ListDnsAuthorizations_async
     */
    listDnsAuthorizationsAsync(request?: protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.certificatemanager.v1.IDnsAuthorization>;
    /**
     * Lists CertificateIssuanceConfigs in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the certificate should be
     *   listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificate configs to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificateIssuanceConfigsResponse`.
     *   Indicates that this is a continuation of a prior
     *   `ListCertificateIssuanceConfigs` call, and that the system should return
     *   the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Certificates Configs returned.
     * @param {string} request.orderBy
     *   A list of Certificate Config field names used to specify the order of the
     *   returned results. The default sorting order is ascending. To specify
     *   descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.certificatemanager.v1.CertificateIssuanceConfig|CertificateIssuanceConfig}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listCertificateIssuanceConfigsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateIssuanceConfigs(request?: protos.google.cloud.certificatemanager.v1.IListCertificateIssuanceConfigsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.certificatemanager.v1.ICertificateIssuanceConfig[],
        protos.google.cloud.certificatemanager.v1.IListCertificateIssuanceConfigsRequest | null,
        protos.google.cloud.certificatemanager.v1.IListCertificateIssuanceConfigsResponse
    ]>;
    listCertificateIssuanceConfigs(request: protos.google.cloud.certificatemanager.v1.IListCertificateIssuanceConfigsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.certificatemanager.v1.IListCertificateIssuanceConfigsRequest, protos.google.cloud.certificatemanager.v1.IListCertificateIssuanceConfigsResponse | null | undefined, protos.google.cloud.certificatemanager.v1.ICertificateIssuanceConfig>): void;
    listCertificateIssuanceConfigs(request: protos.google.cloud.certificatemanager.v1.IListCertificateIssuanceConfigsRequest, callback: PaginationCallback<protos.google.cloud.certificatemanager.v1.IListCertificateIssuanceConfigsRequest, protos.google.cloud.certificatemanager.v1.IListCertificateIssuanceConfigsResponse | null | undefined, protos.google.cloud.certificatemanager.v1.ICertificateIssuanceConfig>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the certificate should be
     *   listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificate configs to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificateIssuanceConfigsResponse`.
     *   Indicates that this is a continuation of a prior
     *   `ListCertificateIssuanceConfigs` call, and that the system should return
     *   the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Certificates Configs returned.
     * @param {string} request.orderBy
     *   A list of Certificate Config field names used to specify the order of the
     *   returned results. The default sorting order is ascending. To specify
     *   descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.certificatemanager.v1.CertificateIssuanceConfig|CertificateIssuanceConfig} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCertificateIssuanceConfigsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateIssuanceConfigsStream(request?: protos.google.cloud.certificatemanager.v1.IListCertificateIssuanceConfigsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listCertificateIssuanceConfigs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the certificate should be
     *   listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificate configs to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificateIssuanceConfigsResponse`.
     *   Indicates that this is a continuation of a prior
     *   `ListCertificateIssuanceConfigs` call, and that the system should return
     *   the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Certificates Configs returned.
     * @param {string} request.orderBy
     *   A list of Certificate Config field names used to specify the order of the
     *   returned results. The default sorting order is ascending. To specify
     *   descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.certificatemanager.v1.CertificateIssuanceConfig|CertificateIssuanceConfig}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.list_certificate_issuance_configs.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_ListCertificateIssuanceConfigs_async
     */
    listCertificateIssuanceConfigsAsync(request?: protos.google.cloud.certificatemanager.v1.IListCertificateIssuanceConfigsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.certificatemanager.v1.ICertificateIssuanceConfig>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified certificate resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} certificate
     * @returns {string} Resource name string.
     */
    certificatePath(project: string, location: string, certificate: string): string;
    /**
     * Parse the project from Certificate resource.
     *
     * @param {string} certificateName
     *   A fully-qualified path representing Certificate resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCertificateName(certificateName: string): string | number;
    /**
     * Parse the location from Certificate resource.
     *
     * @param {string} certificateName
     *   A fully-qualified path representing Certificate resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCertificateName(certificateName: string): string | number;
    /**
     * Parse the certificate from Certificate resource.
     *
     * @param {string} certificateName
     *   A fully-qualified path representing Certificate resource.
     * @returns {string} A string representing the certificate.
     */
    matchCertificateFromCertificateName(certificateName: string): string | number;
    /**
     * Return a fully-qualified certificateIssuanceConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} certificate_issuance_config
     * @returns {string} Resource name string.
     */
    certificateIssuanceConfigPath(project: string, location: string, certificateIssuanceConfig: string): string;
    /**
     * Parse the project from CertificateIssuanceConfig resource.
     *
     * @param {string} certificateIssuanceConfigName
     *   A fully-qualified path representing CertificateIssuanceConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCertificateIssuanceConfigName(certificateIssuanceConfigName: string): string | number;
    /**
     * Parse the location from CertificateIssuanceConfig resource.
     *
     * @param {string} certificateIssuanceConfigName
     *   A fully-qualified path representing CertificateIssuanceConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCertificateIssuanceConfigName(certificateIssuanceConfigName: string): string | number;
    /**
     * Parse the certificate_issuance_config from CertificateIssuanceConfig resource.
     *
     * @param {string} certificateIssuanceConfigName
     *   A fully-qualified path representing CertificateIssuanceConfig resource.
     * @returns {string} A string representing the certificate_issuance_config.
     */
    matchCertificateIssuanceConfigFromCertificateIssuanceConfigName(certificateIssuanceConfigName: string): string | number;
    /**
     * Return a fully-qualified certificateMap resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} certificate_map
     * @returns {string} Resource name string.
     */
    certificateMapPath(project: string, location: string, certificateMap: string): string;
    /**
     * Parse the project from CertificateMap resource.
     *
     * @param {string} certificateMapName
     *   A fully-qualified path representing CertificateMap resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCertificateMapName(certificateMapName: string): string | number;
    /**
     * Parse the location from CertificateMap resource.
     *
     * @param {string} certificateMapName
     *   A fully-qualified path representing CertificateMap resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCertificateMapName(certificateMapName: string): string | number;
    /**
     * Parse the certificate_map from CertificateMap resource.
     *
     * @param {string} certificateMapName
     *   A fully-qualified path representing CertificateMap resource.
     * @returns {string} A string representing the certificate_map.
     */
    matchCertificateMapFromCertificateMapName(certificateMapName: string): string | number;
    /**
     * Return a fully-qualified certificateMapEntry resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} certificate_map
     * @param {string} certificate_map_entry
     * @returns {string} Resource name string.
     */
    certificateMapEntryPath(project: string, location: string, certificateMap: string, certificateMapEntry: string): string;
    /**
     * Parse the project from CertificateMapEntry resource.
     *
     * @param {string} certificateMapEntryName
     *   A fully-qualified path representing CertificateMapEntry resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCertificateMapEntryName(certificateMapEntryName: string): string | number;
    /**
     * Parse the location from CertificateMapEntry resource.
     *
     * @param {string} certificateMapEntryName
     *   A fully-qualified path representing CertificateMapEntry resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCertificateMapEntryName(certificateMapEntryName: string): string | number;
    /**
     * Parse the certificate_map from CertificateMapEntry resource.
     *
     * @param {string} certificateMapEntryName
     *   A fully-qualified path representing CertificateMapEntry resource.
     * @returns {string} A string representing the certificate_map.
     */
    matchCertificateMapFromCertificateMapEntryName(certificateMapEntryName: string): string | number;
    /**
     * Parse the certificate_map_entry from CertificateMapEntry resource.
     *
     * @param {string} certificateMapEntryName
     *   A fully-qualified path representing CertificateMapEntry resource.
     * @returns {string} A string representing the certificate_map_entry.
     */
    matchCertificateMapEntryFromCertificateMapEntryName(certificateMapEntryName: string): string | number;
    /**
     * Return a fully-qualified dnsAuthorization resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dns_authorization
     * @returns {string} Resource name string.
     */
    dnsAuthorizationPath(project: string, location: string, dnsAuthorization: string): string;
    /**
     * Parse the project from DnsAuthorization resource.
     *
     * @param {string} dnsAuthorizationName
     *   A fully-qualified path representing DnsAuthorization resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDnsAuthorizationName(dnsAuthorizationName: string): string | number;
    /**
     * Parse the location from DnsAuthorization resource.
     *
     * @param {string} dnsAuthorizationName
     *   A fully-qualified path representing DnsAuthorization resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDnsAuthorizationName(dnsAuthorizationName: string): string | number;
    /**
     * Parse the dns_authorization from DnsAuthorization resource.
     *
     * @param {string} dnsAuthorizationName
     *   A fully-qualified path representing DnsAuthorization resource.
     * @returns {string} A string representing the dns_authorization.
     */
    matchDnsAuthorizationFromDnsAuthorizationName(dnsAuthorizationName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}

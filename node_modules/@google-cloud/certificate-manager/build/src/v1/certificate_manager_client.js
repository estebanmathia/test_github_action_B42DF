"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertificateManagerClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/certificate_manager_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./certificate_manager_client_config.json");
const version = require('../../../package.json').version;
/**
 *  API Overview
 *
 *  Certificates Manager API allows customers to see and manage all their TLS
 *  certificates.
 *
 *  Certificates Manager API service provides methods to manage certificates,
 *  group them into collections, and create serving configuration that can be
 *  easily applied to other Cloud resources e.g. Target Proxies.
 *
 *  Data Model
 *
 *  The Certificates Manager service exposes the following resources:
 *
 *  * `Certificate` that describes a single TLS certificate.
 *  * `CertificateMap` that describes a collection of certificates that can be
 *  attached to a target resource.
 *  * `CertificateMapEntry` that describes a single configuration entry that
 *  consists of a SNI and a group of certificates. It's a subresource of
 *  CertificateMap.
 *
 *  Certificate, CertificateMap and CertificateMapEntry IDs
 *  have to fully match the regexp `[a-z0-9-]{1,63}`. In other words,
 *  - only lower case letters, digits, and hyphen are allowed
 *  - length of the resource ID has to be in [1,63] range.
 *
 *  Provides methods to manage Cloud Certificate Manager entities.
 * @class
 * @memberof v1
 */
class CertificateManagerClient {
    /**
     * Construct an instance of CertificateManagerClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new CertificateManagerClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            certificatePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/certificates/{certificate}'),
            certificateIssuanceConfigPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/certificateIssuanceConfigs/{certificate_issuance_config}'),
            certificateMapPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/certificateMaps/{certificate_map}'),
            certificateMapEntryPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/certificateMaps/{certificate_map}/certificateMapEntries/{certificate_map_entry}'),
            dnsAuthorizationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dnsAuthorizations/{dns_authorization}'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listCertificates: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'certificates'),
            listCertificateMaps: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'certificateMaps'),
            listCertificateMapEntries: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'certificateMapEntries'),
            listDnsAuthorizations: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'dnsAuthorizations'),
            listCertificateIssuanceConfigs: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'certificateIssuanceConfigs'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback) {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.cloud.location.Locations.GetLocation',
                    get: '/v1/{name=projects/*/locations/*}',
                },
                {
                    selector: 'google.cloud.location.Locations.ListLocations',
                    get: '/v1/{name=projects/*}/locations',
                },
                {
                    selector: 'google.longrunning.Operations.CancelOperation',
                    post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
                    body: '*',
                },
                {
                    selector: 'google.longrunning.Operations.DeleteOperation',
                    delete: '/v1/{name=projects/*/locations/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v1/{name=projects/*/locations/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v1/{name=projects/*/locations/*}/operations',
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        const createCertificateResponse = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.Certificate');
        const createCertificateMetadata = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.OperationMetadata');
        const updateCertificateResponse = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.Certificate');
        const updateCertificateMetadata = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.OperationMetadata');
        const deleteCertificateResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteCertificateMetadata = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.OperationMetadata');
        const createCertificateMapResponse = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.CertificateMap');
        const createCertificateMapMetadata = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.OperationMetadata');
        const updateCertificateMapResponse = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.CertificateMap');
        const updateCertificateMapMetadata = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.OperationMetadata');
        const deleteCertificateMapResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteCertificateMapMetadata = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.OperationMetadata');
        const createCertificateMapEntryResponse = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.CertificateMapEntry');
        const createCertificateMapEntryMetadata = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.OperationMetadata');
        const updateCertificateMapEntryResponse = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.CertificateMapEntry');
        const updateCertificateMapEntryMetadata = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.OperationMetadata');
        const deleteCertificateMapEntryResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteCertificateMapEntryMetadata = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.OperationMetadata');
        const createDnsAuthorizationResponse = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.DnsAuthorization');
        const createDnsAuthorizationMetadata = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.OperationMetadata');
        const updateDnsAuthorizationResponse = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.DnsAuthorization');
        const updateDnsAuthorizationMetadata = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.OperationMetadata');
        const deleteDnsAuthorizationResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteDnsAuthorizationMetadata = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.OperationMetadata');
        const createCertificateIssuanceConfigResponse = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.CertificateIssuanceConfig');
        const createCertificateIssuanceConfigMetadata = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.OperationMetadata');
        const deleteCertificateIssuanceConfigResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteCertificateIssuanceConfigMetadata = protoFilesRoot.lookup('.google.cloud.certificatemanager.v1.OperationMetadata');
        this.descriptors.longrunning = {
            createCertificate: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createCertificateResponse.decode.bind(createCertificateResponse), createCertificateMetadata.decode.bind(createCertificateMetadata)),
            updateCertificate: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateCertificateResponse.decode.bind(updateCertificateResponse), updateCertificateMetadata.decode.bind(updateCertificateMetadata)),
            deleteCertificate: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteCertificateResponse.decode.bind(deleteCertificateResponse), deleteCertificateMetadata.decode.bind(deleteCertificateMetadata)),
            createCertificateMap: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createCertificateMapResponse.decode.bind(createCertificateMapResponse), createCertificateMapMetadata.decode.bind(createCertificateMapMetadata)),
            updateCertificateMap: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateCertificateMapResponse.decode.bind(updateCertificateMapResponse), updateCertificateMapMetadata.decode.bind(updateCertificateMapMetadata)),
            deleteCertificateMap: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteCertificateMapResponse.decode.bind(deleteCertificateMapResponse), deleteCertificateMapMetadata.decode.bind(deleteCertificateMapMetadata)),
            createCertificateMapEntry: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createCertificateMapEntryResponse.decode.bind(createCertificateMapEntryResponse), createCertificateMapEntryMetadata.decode.bind(createCertificateMapEntryMetadata)),
            updateCertificateMapEntry: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateCertificateMapEntryResponse.decode.bind(updateCertificateMapEntryResponse), updateCertificateMapEntryMetadata.decode.bind(updateCertificateMapEntryMetadata)),
            deleteCertificateMapEntry: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteCertificateMapEntryResponse.decode.bind(deleteCertificateMapEntryResponse), deleteCertificateMapEntryMetadata.decode.bind(deleteCertificateMapEntryMetadata)),
            createDnsAuthorization: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createDnsAuthorizationResponse.decode.bind(createDnsAuthorizationResponse), createDnsAuthorizationMetadata.decode.bind(createDnsAuthorizationMetadata)),
            updateDnsAuthorization: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateDnsAuthorizationResponse.decode.bind(updateDnsAuthorizationResponse), updateDnsAuthorizationMetadata.decode.bind(updateDnsAuthorizationMetadata)),
            deleteDnsAuthorization: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteDnsAuthorizationResponse.decode.bind(deleteDnsAuthorizationResponse), deleteDnsAuthorizationMetadata.decode.bind(deleteDnsAuthorizationMetadata)),
            createCertificateIssuanceConfig: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createCertificateIssuanceConfigResponse.decode.bind(createCertificateIssuanceConfigResponse), createCertificateIssuanceConfigMetadata.decode.bind(createCertificateIssuanceConfigMetadata)),
            deleteCertificateIssuanceConfig: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteCertificateIssuanceConfigResponse.decode.bind(deleteCertificateIssuanceConfigResponse), deleteCertificateIssuanceConfigMetadata.decode.bind(deleteCertificateIssuanceConfigMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.certificatemanager.v1.CertificateManager', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.certificateManagerStub) {
            return this.certificateManagerStub;
        }
        // Put together the "service stub" for
        // google.cloud.certificatemanager.v1.CertificateManager.
        this.certificateManagerStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.certificatemanager.v1.CertificateManager')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.certificatemanager.v1
                    .CertificateManager, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const certificateManagerStubMethods = [
            'listCertificates',
            'getCertificate',
            'createCertificate',
            'updateCertificate',
            'deleteCertificate',
            'listCertificateMaps',
            'getCertificateMap',
            'createCertificateMap',
            'updateCertificateMap',
            'deleteCertificateMap',
            'listCertificateMapEntries',
            'getCertificateMapEntry',
            'createCertificateMapEntry',
            'updateCertificateMapEntry',
            'deleteCertificateMapEntry',
            'listDnsAuthorizations',
            'getDnsAuthorization',
            'createDnsAuthorization',
            'updateDnsAuthorization',
            'deleteDnsAuthorization',
            'listCertificateIssuanceConfigs',
            'getCertificateIssuanceConfig',
            'createCertificateIssuanceConfig',
            'deleteCertificateIssuanceConfig',
        ];
        for (const methodName of certificateManagerStubMethods) {
            const callPromise = this.certificateManagerStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.certificateManagerStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'certificatemanager.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'certificatemanager.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    getCertificate(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getCertificate(request, options, callback);
    }
    getCertificateMap(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getCertificateMap(request, options, callback);
    }
    getCertificateMapEntry(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getCertificateMapEntry(request, options, callback);
    }
    getDnsAuthorization(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getDnsAuthorization(request, options, callback);
    }
    getCertificateIssuanceConfig(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getCertificateIssuanceConfig(request, options, callback);
    }
    createCertificate(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createCertificate(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createCertificate()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificate_async
     */
    async checkCreateCertificateProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createCertificate, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateCertificate(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'certificate.name': (_a = request.certificate.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateCertificate(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateCertificate()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.update_certificate.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateCertificate_async
     */
    async checkUpdateCertificateProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateCertificate, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteCertificate(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteCertificate(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteCertificate()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificate_async
     */
    async checkDeleteCertificateProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteCertificate, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createCertificateMap(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createCertificateMap(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createCertificateMap()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate_map.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificateMap_async
     */
    async checkCreateCertificateMapProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createCertificateMap, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateCertificateMap(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'certificate_map.name': (_a = request.certificateMap.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateCertificateMap(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateCertificateMap()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.update_certificate_map.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateCertificateMap_async
     */
    async checkUpdateCertificateMapProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateCertificateMap, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteCertificateMap(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteCertificateMap(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteCertificateMap()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate_map.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificateMap_async
     */
    async checkDeleteCertificateMapProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteCertificateMap, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createCertificateMapEntry(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createCertificateMapEntry(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createCertificateMapEntry()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate_map_entry.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificateMapEntry_async
     */
    async checkCreateCertificateMapEntryProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createCertificateMapEntry, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateCertificateMapEntry(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'certificate_map_entry.name': (_a = request.certificateMapEntry.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateCertificateMapEntry(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateCertificateMapEntry()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.update_certificate_map_entry.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateCertificateMapEntry_async
     */
    async checkUpdateCertificateMapEntryProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateCertificateMapEntry, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteCertificateMapEntry(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteCertificateMapEntry(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteCertificateMapEntry()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate_map_entry.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificateMapEntry_async
     */
    async checkDeleteCertificateMapEntryProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteCertificateMapEntry, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createDnsAuthorization(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createDnsAuthorization(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createDnsAuthorization()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.create_dns_authorization.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_CreateDnsAuthorization_async
     */
    async checkCreateDnsAuthorizationProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createDnsAuthorization, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateDnsAuthorization(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'dns_authorization.name': (_a = request.dnsAuthorization.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateDnsAuthorization(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateDnsAuthorization()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.update_dns_authorization.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateDnsAuthorization_async
     */
    async checkUpdateDnsAuthorizationProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateDnsAuthorization, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteDnsAuthorization(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteDnsAuthorization(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteDnsAuthorization()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.delete_dns_authorization.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteDnsAuthorization_async
     */
    async checkDeleteDnsAuthorizationProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteDnsAuthorization, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createCertificateIssuanceConfig(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createCertificateIssuanceConfig(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createCertificateIssuanceConfig()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate_issuance_config.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificateIssuanceConfig_async
     */
    async checkCreateCertificateIssuanceConfigProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createCertificateIssuanceConfig, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteCertificateIssuanceConfig(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteCertificateIssuanceConfig(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteCertificateIssuanceConfig()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate_issuance_config.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificateIssuanceConfig_async
     */
    async checkDeleteCertificateIssuanceConfigProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteCertificateIssuanceConfig, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listCertificates(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listCertificates(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the certificate should be
     *   listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificates to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificatesResponse`. Indicates that
     *   this is a continuation of a prior `ListCertificates` call, and that the
     *   system should return the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Certificates returned.
     * @param {string} request.orderBy
     *   A list of Certificate field names used to specify the order of the returned
     *   results. The default sorting order is ascending. To specify descending
     *   order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.certificatemanager.v1.Certificate|Certificate} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCertificatesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificatesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCertificates'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCertificates.createStream(this.innerApiCalls.listCertificates, request, callSettings);
    }
    /**
     * Equivalent to `listCertificates`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the certificate should be
     *   listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificates to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificatesResponse`. Indicates that
     *   this is a continuation of a prior `ListCertificates` call, and that the
     *   system should return the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Certificates returned.
     * @param {string} request.orderBy
     *   A list of Certificate field names used to specify the order of the returned
     *   results. The default sorting order is ascending. To specify descending
     *   order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.certificatemanager.v1.Certificate|Certificate}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.list_certificates.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_ListCertificates_async
     */
    listCertificatesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCertificates'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCertificates.asyncIterate(this.innerApiCalls['listCertificates'], request, callSettings);
    }
    listCertificateMaps(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listCertificateMaps(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the certificate maps should
     *   be listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificate maps to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificateMapsResponse`. Indicates
     *   that this is a continuation of a prior `ListCertificateMaps` call, and that
     *   the system should return the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Certificates Maps returned.
     * @param {string} request.orderBy
     *   A list of Certificate Map field names used to specify the order of the
     *   returned results. The default sorting order is ascending. To specify
     *   descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.certificatemanager.v1.CertificateMap|CertificateMap} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCertificateMapsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateMapsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCertificateMaps'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCertificateMaps.createStream(this.innerApiCalls.listCertificateMaps, request, callSettings);
    }
    /**
     * Equivalent to `listCertificateMaps`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the certificate maps should
     *   be listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificate maps to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificateMapsResponse`. Indicates
     *   that this is a continuation of a prior `ListCertificateMaps` call, and that
     *   the system should return the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Certificates Maps returned.
     * @param {string} request.orderBy
     *   A list of Certificate Map field names used to specify the order of the
     *   returned results. The default sorting order is ascending. To specify
     *   descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.certificatemanager.v1.CertificateMap|CertificateMap}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.list_certificate_maps.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_ListCertificateMaps_async
     */
    listCertificateMapsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCertificateMaps'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCertificateMaps.asyncIterate(this.innerApiCalls['listCertificateMaps'], request, callSettings);
    }
    listCertificateMapEntries(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listCertificateMapEntries(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project, location and certificate map from which the
     *   certificate map entries should be listed, specified in the format
     *   `projects/* /locations/* /certificateMaps/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificate map entries to return. The service may return
     *   fewer than this value.
     *   If unspecified, at most 50 certificate map entries will be returned.
     *   The maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificateMapEntriesResponse`.
     *   Indicates that this is a continuation of a prior
     *   `ListCertificateMapEntries` call, and that the system should return the
     *   next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the returned Certificate Map Entries.
     * @param {string} request.orderBy
     *   A list of Certificate Map Entry field names used to specify
     *   the order of the returned results. The default sorting order is ascending.
     *   To specify descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.certificatemanager.v1.CertificateMapEntry|CertificateMapEntry} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCertificateMapEntriesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateMapEntriesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCertificateMapEntries'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCertificateMapEntries.createStream(this.innerApiCalls.listCertificateMapEntries, request, callSettings);
    }
    /**
     * Equivalent to `listCertificateMapEntries`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project, location and certificate map from which the
     *   certificate map entries should be listed, specified in the format
     *   `projects/* /locations/* /certificateMaps/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificate map entries to return. The service may return
     *   fewer than this value.
     *   If unspecified, at most 50 certificate map entries will be returned.
     *   The maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificateMapEntriesResponse`.
     *   Indicates that this is a continuation of a prior
     *   `ListCertificateMapEntries` call, and that the system should return the
     *   next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the returned Certificate Map Entries.
     * @param {string} request.orderBy
     *   A list of Certificate Map Entry field names used to specify
     *   the order of the returned results. The default sorting order is ascending.
     *   To specify descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.certificatemanager.v1.CertificateMapEntry|CertificateMapEntry}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.list_certificate_map_entries.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_ListCertificateMapEntries_async
     */
    listCertificateMapEntriesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCertificateMapEntries'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCertificateMapEntries.asyncIterate(this.innerApiCalls['listCertificateMapEntries'], request, callSettings);
    }
    listDnsAuthorizations(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listDnsAuthorizations(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the dns authorizations should
     *   be listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of dns authorizations to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListDnsAuthorizationsResponse`. Indicates
     *   that this is a continuation of a prior `ListDnsAuthorizations` call, and
     *   that the system should return the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Dns Authorizations returned.
     * @param {string} request.orderBy
     *   A list of Dns Authorization field names used to specify the order of the
     *   returned results. The default sorting order is ascending. To specify
     *   descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.certificatemanager.v1.DnsAuthorization|DnsAuthorization} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDnsAuthorizationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDnsAuthorizationsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDnsAuthorizations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDnsAuthorizations.createStream(this.innerApiCalls.listDnsAuthorizations, request, callSettings);
    }
    /**
     * Equivalent to `listDnsAuthorizations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the dns authorizations should
     *   be listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of dns authorizations to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListDnsAuthorizationsResponse`. Indicates
     *   that this is a continuation of a prior `ListDnsAuthorizations` call, and
     *   that the system should return the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Dns Authorizations returned.
     * @param {string} request.orderBy
     *   A list of Dns Authorization field names used to specify the order of the
     *   returned results. The default sorting order is ascending. To specify
     *   descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.certificatemanager.v1.DnsAuthorization|DnsAuthorization}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.list_dns_authorizations.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_ListDnsAuthorizations_async
     */
    listDnsAuthorizationsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDnsAuthorizations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDnsAuthorizations.asyncIterate(this.innerApiCalls['listDnsAuthorizations'], request, callSettings);
    }
    listCertificateIssuanceConfigs(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listCertificateIssuanceConfigs(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the certificate should be
     *   listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificate configs to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificateIssuanceConfigsResponse`.
     *   Indicates that this is a continuation of a prior
     *   `ListCertificateIssuanceConfigs` call, and that the system should return
     *   the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Certificates Configs returned.
     * @param {string} request.orderBy
     *   A list of Certificate Config field names used to specify the order of the
     *   returned results. The default sorting order is ascending. To specify
     *   descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.certificatemanager.v1.CertificateIssuanceConfig|CertificateIssuanceConfig} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCertificateIssuanceConfigsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateIssuanceConfigsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCertificateIssuanceConfigs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCertificateIssuanceConfigs.createStream(this.innerApiCalls.listCertificateIssuanceConfigs, request, callSettings);
    }
    /**
     * Equivalent to `listCertificateIssuanceConfigs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which the certificate should be
     *   listed, specified in the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of certificate configs to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last `ListCertificateIssuanceConfigsResponse`.
     *   Indicates that this is a continuation of a prior
     *   `ListCertificateIssuanceConfigs` call, and that the system should return
     *   the next page of data.
     * @param {string} request.filter
     *   Filter expression to restrict the Certificates Configs returned.
     * @param {string} request.orderBy
     *   A list of Certificate Config field names used to specify the order of the
     *   returned results. The default sorting order is ascending. To specify
     *   descending order for a field, add a suffix " desc".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.certificatemanager.v1.CertificateIssuanceConfig|CertificateIssuanceConfig}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_manager.list_certificate_issuance_configs.js</caption>
     * region_tag:certificatemanager_v1_generated_CertificateManager_ListCertificateIssuanceConfigs_async
     */
    listCertificateIssuanceConfigsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCertificateIssuanceConfigs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCertificateIssuanceConfigs.asyncIterate(this.innerApiCalls['listCertificateIssuanceConfigs'], request, callSettings);
    }
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request, options, callback) {
        return this.locationsClient.getLocation(request, options, callback);
    }
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request, options) {
        return this.locationsClient.listLocationsAsync(request, options);
    }
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request, options, callback) {
        return this.operationsClient.getOperation(request, options, callback);
    }
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request, options) {
        return this.operationsClient.listOperationsAsync(request, options);
    }
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request, options, callback) {
        return this.operationsClient.cancelOperation(request, options, callback);
    }
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request, options, callback) {
        return this.operationsClient.deleteOperation(request, options, callback);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified certificate resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} certificate
     * @returns {string} Resource name string.
     */
    certificatePath(project, location, certificate) {
        return this.pathTemplates.certificatePathTemplate.render({
            project: project,
            location: location,
            certificate: certificate,
        });
    }
    /**
     * Parse the project from Certificate resource.
     *
     * @param {string} certificateName
     *   A fully-qualified path representing Certificate resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCertificateName(certificateName) {
        return this.pathTemplates.certificatePathTemplate.match(certificateName)
            .project;
    }
    /**
     * Parse the location from Certificate resource.
     *
     * @param {string} certificateName
     *   A fully-qualified path representing Certificate resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCertificateName(certificateName) {
        return this.pathTemplates.certificatePathTemplate.match(certificateName)
            .location;
    }
    /**
     * Parse the certificate from Certificate resource.
     *
     * @param {string} certificateName
     *   A fully-qualified path representing Certificate resource.
     * @returns {string} A string representing the certificate.
     */
    matchCertificateFromCertificateName(certificateName) {
        return this.pathTemplates.certificatePathTemplate.match(certificateName)
            .certificate;
    }
    /**
     * Return a fully-qualified certificateIssuanceConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} certificate_issuance_config
     * @returns {string} Resource name string.
     */
    certificateIssuanceConfigPath(project, location, certificateIssuanceConfig) {
        return this.pathTemplates.certificateIssuanceConfigPathTemplate.render({
            project: project,
            location: location,
            certificate_issuance_config: certificateIssuanceConfig,
        });
    }
    /**
     * Parse the project from CertificateIssuanceConfig resource.
     *
     * @param {string} certificateIssuanceConfigName
     *   A fully-qualified path representing CertificateIssuanceConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCertificateIssuanceConfigName(certificateIssuanceConfigName) {
        return this.pathTemplates.certificateIssuanceConfigPathTemplate.match(certificateIssuanceConfigName).project;
    }
    /**
     * Parse the location from CertificateIssuanceConfig resource.
     *
     * @param {string} certificateIssuanceConfigName
     *   A fully-qualified path representing CertificateIssuanceConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCertificateIssuanceConfigName(certificateIssuanceConfigName) {
        return this.pathTemplates.certificateIssuanceConfigPathTemplate.match(certificateIssuanceConfigName).location;
    }
    /**
     * Parse the certificate_issuance_config from CertificateIssuanceConfig resource.
     *
     * @param {string} certificateIssuanceConfigName
     *   A fully-qualified path representing CertificateIssuanceConfig resource.
     * @returns {string} A string representing the certificate_issuance_config.
     */
    matchCertificateIssuanceConfigFromCertificateIssuanceConfigName(certificateIssuanceConfigName) {
        return this.pathTemplates.certificateIssuanceConfigPathTemplate.match(certificateIssuanceConfigName).certificate_issuance_config;
    }
    /**
     * Return a fully-qualified certificateMap resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} certificate_map
     * @returns {string} Resource name string.
     */
    certificateMapPath(project, location, certificateMap) {
        return this.pathTemplates.certificateMapPathTemplate.render({
            project: project,
            location: location,
            certificate_map: certificateMap,
        });
    }
    /**
     * Parse the project from CertificateMap resource.
     *
     * @param {string} certificateMapName
     *   A fully-qualified path representing CertificateMap resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCertificateMapName(certificateMapName) {
        return this.pathTemplates.certificateMapPathTemplate.match(certificateMapName).project;
    }
    /**
     * Parse the location from CertificateMap resource.
     *
     * @param {string} certificateMapName
     *   A fully-qualified path representing CertificateMap resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCertificateMapName(certificateMapName) {
        return this.pathTemplates.certificateMapPathTemplate.match(certificateMapName).location;
    }
    /**
     * Parse the certificate_map from CertificateMap resource.
     *
     * @param {string} certificateMapName
     *   A fully-qualified path representing CertificateMap resource.
     * @returns {string} A string representing the certificate_map.
     */
    matchCertificateMapFromCertificateMapName(certificateMapName) {
        return this.pathTemplates.certificateMapPathTemplate.match(certificateMapName).certificate_map;
    }
    /**
     * Return a fully-qualified certificateMapEntry resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} certificate_map
     * @param {string} certificate_map_entry
     * @returns {string} Resource name string.
     */
    certificateMapEntryPath(project, location, certificateMap, certificateMapEntry) {
        return this.pathTemplates.certificateMapEntryPathTemplate.render({
            project: project,
            location: location,
            certificate_map: certificateMap,
            certificate_map_entry: certificateMapEntry,
        });
    }
    /**
     * Parse the project from CertificateMapEntry resource.
     *
     * @param {string} certificateMapEntryName
     *   A fully-qualified path representing CertificateMapEntry resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCertificateMapEntryName(certificateMapEntryName) {
        return this.pathTemplates.certificateMapEntryPathTemplate.match(certificateMapEntryName).project;
    }
    /**
     * Parse the location from CertificateMapEntry resource.
     *
     * @param {string} certificateMapEntryName
     *   A fully-qualified path representing CertificateMapEntry resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCertificateMapEntryName(certificateMapEntryName) {
        return this.pathTemplates.certificateMapEntryPathTemplate.match(certificateMapEntryName).location;
    }
    /**
     * Parse the certificate_map from CertificateMapEntry resource.
     *
     * @param {string} certificateMapEntryName
     *   A fully-qualified path representing CertificateMapEntry resource.
     * @returns {string} A string representing the certificate_map.
     */
    matchCertificateMapFromCertificateMapEntryName(certificateMapEntryName) {
        return this.pathTemplates.certificateMapEntryPathTemplate.match(certificateMapEntryName).certificate_map;
    }
    /**
     * Parse the certificate_map_entry from CertificateMapEntry resource.
     *
     * @param {string} certificateMapEntryName
     *   A fully-qualified path representing CertificateMapEntry resource.
     * @returns {string} A string representing the certificate_map_entry.
     */
    matchCertificateMapEntryFromCertificateMapEntryName(certificateMapEntryName) {
        return this.pathTemplates.certificateMapEntryPathTemplate.match(certificateMapEntryName).certificate_map_entry;
    }
    /**
     * Return a fully-qualified dnsAuthorization resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dns_authorization
     * @returns {string} Resource name string.
     */
    dnsAuthorizationPath(project, location, dnsAuthorization) {
        return this.pathTemplates.dnsAuthorizationPathTemplate.render({
            project: project,
            location: location,
            dns_authorization: dnsAuthorization,
        });
    }
    /**
     * Parse the project from DnsAuthorization resource.
     *
     * @param {string} dnsAuthorizationName
     *   A fully-qualified path representing DnsAuthorization resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDnsAuthorizationName(dnsAuthorizationName) {
        return this.pathTemplates.dnsAuthorizationPathTemplate.match(dnsAuthorizationName).project;
    }
    /**
     * Parse the location from DnsAuthorization resource.
     *
     * @param {string} dnsAuthorizationName
     *   A fully-qualified path representing DnsAuthorization resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDnsAuthorizationName(dnsAuthorizationName) {
        return this.pathTemplates.dnsAuthorizationPathTemplate.match(dnsAuthorizationName).location;
    }
    /**
     * Parse the dns_authorization from DnsAuthorization resource.
     *
     * @param {string} dnsAuthorizationName
     *   A fully-qualified path representing DnsAuthorization resource.
     * @returns {string} A string representing the dns_authorization.
     */
    matchDnsAuthorizationFromDnsAuthorizationName(dnsAuthorizationName) {
        return this.pathTemplates.dnsAuthorizationPathTemplate.match(dnsAuthorizationName).dns_authorization;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.certificateManagerStub && !this._terminated) {
            return this.certificateManagerStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.locationsClient.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.CertificateManagerClient = CertificateManagerClient;
//# sourceMappingURL=certificate_manager_client.js.map
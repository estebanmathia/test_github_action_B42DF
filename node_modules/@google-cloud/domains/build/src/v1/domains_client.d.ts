/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  The Cloud Domains API enables management and configuration of domain names.
 * @class
 * @memberof v1
 */
export declare class DomainsClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    domainsStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of DomainsClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new DomainsClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Searches for available domain names similar to the provided query.
     *
     * Availability results from this method are approximate; call
     * `RetrieveRegisterParameters` on a domain before registering to confirm
     * availability.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.query
     *   Required. String used to search for available domain names.
     * @param {string} request.location
     *   Required. The location. Must be in the format `projects/* /locations/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.domains.v1.SearchDomainsResponse|SearchDomainsResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.search_domains.js</caption>
     * region_tag:domains_v1_generated_Domains_SearchDomains_async
     */
    searchDomains(request?: protos.google.cloud.domains.v1.ISearchDomainsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.domains.v1.ISearchDomainsResponse,
        protos.google.cloud.domains.v1.ISearchDomainsRequest | undefined,
        {} | undefined
    ]>;
    searchDomains(request: protos.google.cloud.domains.v1.ISearchDomainsRequest, options: CallOptions, callback: Callback<protos.google.cloud.domains.v1.ISearchDomainsResponse, protos.google.cloud.domains.v1.ISearchDomainsRequest | null | undefined, {} | null | undefined>): void;
    searchDomains(request: protos.google.cloud.domains.v1.ISearchDomainsRequest, callback: Callback<protos.google.cloud.domains.v1.ISearchDomainsResponse, protos.google.cloud.domains.v1.ISearchDomainsRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets parameters needed to register a new domain name, including price and
     * up-to-date availability. Use the returned values to call `RegisterDomain`.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.domainName
     *   Required. The domain name. Unicode domain names must be expressed in Punycode format.
     * @param {string} request.location
     *   Required. The location. Must be in the format `projects/* /locations/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.domains.v1.RetrieveRegisterParametersResponse|RetrieveRegisterParametersResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.retrieve_register_parameters.js</caption>
     * region_tag:domains_v1_generated_Domains_RetrieveRegisterParameters_async
     */
    retrieveRegisterParameters(request?: protos.google.cloud.domains.v1.IRetrieveRegisterParametersRequest, options?: CallOptions): Promise<[
        protos.google.cloud.domains.v1.IRetrieveRegisterParametersResponse,
        (protos.google.cloud.domains.v1.IRetrieveRegisterParametersRequest | undefined),
        {} | undefined
    ]>;
    retrieveRegisterParameters(request: protos.google.cloud.domains.v1.IRetrieveRegisterParametersRequest, options: CallOptions, callback: Callback<protos.google.cloud.domains.v1.IRetrieveRegisterParametersResponse, protos.google.cloud.domains.v1.IRetrieveRegisterParametersRequest | null | undefined, {} | null | undefined>): void;
    retrieveRegisterParameters(request: protos.google.cloud.domains.v1.IRetrieveRegisterParametersRequest, callback: Callback<protos.google.cloud.domains.v1.IRetrieveRegisterParametersResponse, protos.google.cloud.domains.v1.IRetrieveRegisterParametersRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets parameters needed to transfer a domain name from another registrar to
     * Cloud Domains. For domains managed by Google Domains, transferring to Cloud
     * Domains is not supported.
     *
     *
     * Use the returned values to call `TransferDomain`.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.domainName
     *   Required. The domain name. Unicode domain names must be expressed in Punycode format.
     * @param {string} request.location
     *   Required. The location. Must be in the format `projects/* /locations/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.domains.v1.RetrieveTransferParametersResponse|RetrieveTransferParametersResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.retrieve_transfer_parameters.js</caption>
     * region_tag:domains_v1_generated_Domains_RetrieveTransferParameters_async
     */
    retrieveTransferParameters(request?: protos.google.cloud.domains.v1.IRetrieveTransferParametersRequest, options?: CallOptions): Promise<[
        protos.google.cloud.domains.v1.IRetrieveTransferParametersResponse,
        (protos.google.cloud.domains.v1.IRetrieveTransferParametersRequest | undefined),
        {} | undefined
    ]>;
    retrieveTransferParameters(request: protos.google.cloud.domains.v1.IRetrieveTransferParametersRequest, options: CallOptions, callback: Callback<protos.google.cloud.domains.v1.IRetrieveTransferParametersResponse, protos.google.cloud.domains.v1.IRetrieveTransferParametersRequest | null | undefined, {} | null | undefined>): void;
    retrieveTransferParameters(request: protos.google.cloud.domains.v1.IRetrieveTransferParametersRequest, callback: Callback<protos.google.cloud.domains.v1.IRetrieveTransferParametersResponse, protos.google.cloud.domains.v1.IRetrieveTransferParametersRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets the details of a `Registration` resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the `Registration` to get, in the format
     *   `projects/* /locations/* /registrations/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.domains.v1.Registration|Registration}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.get_registration.js</caption>
     * region_tag:domains_v1_generated_Domains_GetRegistration_async
     */
    getRegistration(request?: protos.google.cloud.domains.v1.IGetRegistrationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.domains.v1.IRegistration,
        protos.google.cloud.domains.v1.IGetRegistrationRequest | undefined,
        {} | undefined
    ]>;
    getRegistration(request: protos.google.cloud.domains.v1.IGetRegistrationRequest, options: CallOptions, callback: Callback<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IGetRegistrationRequest | null | undefined, {} | null | undefined>): void;
    getRegistration(request: protos.google.cloud.domains.v1.IGetRegistrationRequest, callback: Callback<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IGetRegistrationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets the authorization code of the `Registration` for the purpose of
     * transferring the domain to another registrar.
     *
     * You can call this method only after 60 days have elapsed since the initial
     * domain registration.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.registration
     *   Required. The name of the `Registration` whose authorization code is being retrieved,
     *   in the format `projects/* /locations/* /registrations/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.domains.v1.AuthorizationCode|AuthorizationCode}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.retrieve_authorization_code.js</caption>
     * region_tag:domains_v1_generated_Domains_RetrieveAuthorizationCode_async
     */
    retrieveAuthorizationCode(request?: protos.google.cloud.domains.v1.IRetrieveAuthorizationCodeRequest, options?: CallOptions): Promise<[
        protos.google.cloud.domains.v1.IAuthorizationCode,
        (protos.google.cloud.domains.v1.IRetrieveAuthorizationCodeRequest | undefined),
        {} | undefined
    ]>;
    retrieveAuthorizationCode(request: protos.google.cloud.domains.v1.IRetrieveAuthorizationCodeRequest, options: CallOptions, callback: Callback<protos.google.cloud.domains.v1.IAuthorizationCode, protos.google.cloud.domains.v1.IRetrieveAuthorizationCodeRequest | null | undefined, {} | null | undefined>): void;
    retrieveAuthorizationCode(request: protos.google.cloud.domains.v1.IRetrieveAuthorizationCodeRequest, callback: Callback<protos.google.cloud.domains.v1.IAuthorizationCode, protos.google.cloud.domains.v1.IRetrieveAuthorizationCodeRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Resets the authorization code of the `Registration` to a new random string.
     *
     * You can call this method only after 60 days have elapsed since the initial
     * domain registration.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.registration
     *   Required. The name of the `Registration` whose authorization code is being reset,
     *   in the format `projects/* /locations/* /registrations/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.domains.v1.AuthorizationCode|AuthorizationCode}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.reset_authorization_code.js</caption>
     * region_tag:domains_v1_generated_Domains_ResetAuthorizationCode_async
     */
    resetAuthorizationCode(request?: protos.google.cloud.domains.v1.IResetAuthorizationCodeRequest, options?: CallOptions): Promise<[
        protos.google.cloud.domains.v1.IAuthorizationCode,
        protos.google.cloud.domains.v1.IResetAuthorizationCodeRequest | undefined,
        {} | undefined
    ]>;
    resetAuthorizationCode(request: protos.google.cloud.domains.v1.IResetAuthorizationCodeRequest, options: CallOptions, callback: Callback<protos.google.cloud.domains.v1.IAuthorizationCode, protos.google.cloud.domains.v1.IResetAuthorizationCodeRequest | null | undefined, {} | null | undefined>): void;
    resetAuthorizationCode(request: protos.google.cloud.domains.v1.IResetAuthorizationCodeRequest, callback: Callback<protos.google.cloud.domains.v1.IAuthorizationCode, protos.google.cloud.domains.v1.IResetAuthorizationCodeRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Registers a new domain name and creates a corresponding `Registration`
     * resource.
     *
     * Call `RetrieveRegisterParameters` first to check availability of the domain
     * name and determine parameters like price that are needed to build a call to
     * this method.
     *
     * A successful call creates a `Registration` resource in state
     * `REGISTRATION_PENDING`, which resolves to `ACTIVE` within 1-2
     * minutes, indicating that the domain was successfully registered. If the
     * resource ends up in state `REGISTRATION_FAILED`, it indicates that the
     * domain was not registered successfully, and you can safely delete the
     * resource and retry registration.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource of the `Registration`. Must be in the
     *   format `projects/* /locations/*`.
     * @param {google.cloud.domains.v1.Registration} request.registration
     *   Required. The complete `Registration` resource to be created.
     * @param {number[]} request.domainNotices
     *   The list of domain notices that you acknowledge. Call
     *   `RetrieveRegisterParameters` to see the notices that need acknowledgement.
     * @param {number[]} request.contactNotices
     *   The list of contact notices that the caller acknowledges. The notices
     *   needed here depend on the values specified in
     *   `registration.contact_settings`.
     * @param {google.type.Money} request.yearlyPrice
     *   Required. Yearly price to register or renew the domain.
     *   The value that should be put here can be obtained from
     *   RetrieveRegisterParameters or SearchDomains calls.
     * @param {boolean} request.validateOnly
     *   When true, only validation is performed, without actually registering
     *   the domain. Follows:
     *   https://cloud.google.com/apis/design/design_patterns#request_validation
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.register_domain.js</caption>
     * region_tag:domains_v1_generated_Domains_RegisterDomain_async
     */
    registerDomain(request?: protos.google.cloud.domains.v1.IRegisterDomainRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    registerDomain(request: protos.google.cloud.domains.v1.IRegisterDomainRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    registerDomain(request: protos.google.cloud.domains.v1.IRegisterDomainRequest, callback: Callback<LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `registerDomain()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.register_domain.js</caption>
     * region_tag:domains_v1_generated_Domains_RegisterDomain_async
     */
    checkRegisterDomainProgress(name: string): Promise<LROperation<protos.google.cloud.domains.v1.Registration, protos.google.cloud.domains.v1.OperationMetadata>>;
    /**
     * Transfers a domain name from another registrar to Cloud Domains.  For
     * domains managed by Google Domains, transferring to Cloud Domains is not
     * supported.
     *
     *
     * Before calling this method, go to the domain's current registrar to unlock
     * the domain for transfer and retrieve the domain's transfer authorization
     * code. Then call `RetrieveTransferParameters` to confirm that the domain is
     * unlocked and to get values needed to build a call to this method.
     *
     * A successful call creates a `Registration` resource in state
     * `TRANSFER_PENDING`. It can take several days to complete the transfer
     * process. The registrant can often speed up this process by approving the
     * transfer through the current registrar, either by clicking a link in an
     * email from the registrar or by visiting the registrar's website.
     *
     * A few minutes after transfer approval, the resource transitions to state
     * `ACTIVE`, indicating that the transfer was successful. If the transfer is
     * rejected or the request expires without being approved, the resource can
     * end up in state `TRANSFER_FAILED`. If transfer fails, you can safely delete
     * the resource and retry the transfer.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource of the `Registration`. Must be in the
     *   format `projects/* /locations/*`.
     * @param {google.cloud.domains.v1.Registration} request.registration
     *   Required. The complete `Registration` resource to be created.
     *
     *   You can leave `registration.dns_settings` unset to import the
     *   domain's current DNS configuration from its current registrar. Use this
     *   option only if you are sure that the domain's current DNS service
     *   does not cease upon transfer, as is often the case for DNS services
     *   provided for free by the registrar.
     * @param {number[]} request.contactNotices
     *   The list of contact notices that you acknowledge. The notices
     *   needed here depend on the values specified in
     *   `registration.contact_settings`.
     * @param {google.type.Money} request.yearlyPrice
     *   Required. Acknowledgement of the price to transfer or renew the domain for one year.
     *   Call `RetrieveTransferParameters` to obtain the price, which you must
     *   acknowledge.
     * @param {google.cloud.domains.v1.AuthorizationCode} request.authorizationCode
     *   The domain's transfer authorization code. You can obtain this from the
     *   domain's current registrar.
     * @param {boolean} request.validateOnly
     *   Validate the request without actually transferring the domain.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.transfer_domain.js</caption>
     * region_tag:domains_v1_generated_Domains_TransferDomain_async
     */
    transferDomain(request?: protos.google.cloud.domains.v1.ITransferDomainRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    transferDomain(request: protos.google.cloud.domains.v1.ITransferDomainRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    transferDomain(request: protos.google.cloud.domains.v1.ITransferDomainRequest, callback: Callback<LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `transferDomain()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.transfer_domain.js</caption>
     * region_tag:domains_v1_generated_Domains_TransferDomain_async
     */
    checkTransferDomainProgress(name: string): Promise<LROperation<protos.google.cloud.domains.v1.Registration, protos.google.cloud.domains.v1.OperationMetadata>>;
    /**
     * Updates select fields of a `Registration` resource, notably `labels`. To
     * update other fields, use the appropriate custom update method:
     *
     * * To update management settings, see `ConfigureManagementSettings`
     * * To update DNS configuration, see `ConfigureDnsSettings`
     * * To update contact information, see `ConfigureContactSettings`
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.domains.v1.Registration} request.registration
     *   Fields of the `Registration` to update.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. The field mask describing which fields to update as a comma-separated list.
     *   For example, if only the labels are being updated, the `update_mask` is
     *   `"labels"`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.update_registration.js</caption>
     * region_tag:domains_v1_generated_Domains_UpdateRegistration_async
     */
    updateRegistration(request?: protos.google.cloud.domains.v1.IUpdateRegistrationRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateRegistration(request: protos.google.cloud.domains.v1.IUpdateRegistrationRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateRegistration(request: protos.google.cloud.domains.v1.IUpdateRegistrationRequest, callback: Callback<LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateRegistration()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.update_registration.js</caption>
     * region_tag:domains_v1_generated_Domains_UpdateRegistration_async
     */
    checkUpdateRegistrationProgress(name: string): Promise<LROperation<protos.google.cloud.domains.v1.Registration, protos.google.cloud.domains.v1.OperationMetadata>>;
    /**
     * Updates a `Registration`'s management settings.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.registration
     *   Required. The name of the `Registration` whose management settings are being updated,
     *   in the format `projects/* /locations/* /registrations/*`.
     * @param {google.cloud.domains.v1.ManagementSettings} request.managementSettings
     *   Fields of the `ManagementSettings` to update.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. The field mask describing which fields to update as a comma-separated list.
     *   For example, if only the transfer lock is being updated, the `update_mask`
     *   is `"transfer_lock_state"`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.configure_management_settings.js</caption>
     * region_tag:domains_v1_generated_Domains_ConfigureManagementSettings_async
     */
    configureManagementSettings(request?: protos.google.cloud.domains.v1.IConfigureManagementSettingsRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    configureManagementSettings(request: protos.google.cloud.domains.v1.IConfigureManagementSettingsRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    configureManagementSettings(request: protos.google.cloud.domains.v1.IConfigureManagementSettingsRequest, callback: Callback<LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `configureManagementSettings()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.configure_management_settings.js</caption>
     * region_tag:domains_v1_generated_Domains_ConfigureManagementSettings_async
     */
    checkConfigureManagementSettingsProgress(name: string): Promise<LROperation<protos.google.cloud.domains.v1.Registration, protos.google.cloud.domains.v1.OperationMetadata>>;
    /**
     * Updates a `Registration`'s DNS settings.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.registration
     *   Required. The name of the `Registration` whose DNS settings are being updated,
     *   in the format `projects/* /locations/* /registrations/*`.
     * @param {google.cloud.domains.v1.DnsSettings} request.dnsSettings
     *   Fields of the `DnsSettings` to update.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. The field mask describing which fields to update as a comma-separated list.
     *   For example, if only the name servers are being updated for an existing
     *   Custom DNS configuration, the `update_mask` is
     *   `"custom_dns.name_servers"`.
     *
     *   When changing the DNS provider from one type to another, pass the new
     *   provider's field name as part of the field mask. For example, when changing
     *   from a Google Domains DNS configuration to a Custom DNS configuration, the
     *   `update_mask` is `"custom_dns"`. //
     * @param {boolean} request.validateOnly
     *   Validate the request without actually updating the DNS settings.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.configure_dns_settings.js</caption>
     * region_tag:domains_v1_generated_Domains_ConfigureDnsSettings_async
     */
    configureDnsSettings(request?: protos.google.cloud.domains.v1.IConfigureDnsSettingsRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    configureDnsSettings(request: protos.google.cloud.domains.v1.IConfigureDnsSettingsRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    configureDnsSettings(request: protos.google.cloud.domains.v1.IConfigureDnsSettingsRequest, callback: Callback<LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `configureDnsSettings()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.configure_dns_settings.js</caption>
     * region_tag:domains_v1_generated_Domains_ConfigureDnsSettings_async
     */
    checkConfigureDnsSettingsProgress(name: string): Promise<LROperation<protos.google.cloud.domains.v1.Registration, protos.google.cloud.domains.v1.OperationMetadata>>;
    /**
     * Updates a `Registration`'s contact settings. Some changes require
     * confirmation by the domain's registrant contact .
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.registration
     *   Required. The name of the `Registration` whose contact settings are being updated,
     *   in the format `projects/* /locations/* /registrations/*`.
     * @param {google.cloud.domains.v1.ContactSettings} request.contactSettings
     *   Fields of the `ContactSettings` to update.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. The field mask describing which fields to update as a comma-separated list.
     *   For example, if only the registrant contact is being updated, the
     *   `update_mask` is `"registrant_contact"`.
     * @param {number[]} request.contactNotices
     *   The list of contact notices that the caller acknowledges. The notices
     *   needed here depend on the values specified in `contact_settings`.
     * @param {boolean} request.validateOnly
     *   Validate the request without actually updating the contact settings.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.configure_contact_settings.js</caption>
     * region_tag:domains_v1_generated_Domains_ConfigureContactSettings_async
     */
    configureContactSettings(request?: protos.google.cloud.domains.v1.IConfigureContactSettingsRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    configureContactSettings(request: protos.google.cloud.domains.v1.IConfigureContactSettingsRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    configureContactSettings(request: protos.google.cloud.domains.v1.IConfigureContactSettingsRequest, callback: Callback<LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `configureContactSettings()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.configure_contact_settings.js</caption>
     * region_tag:domains_v1_generated_Domains_ConfigureContactSettings_async
     */
    checkConfigureContactSettingsProgress(name: string): Promise<LROperation<protos.google.cloud.domains.v1.Registration, protos.google.cloud.domains.v1.OperationMetadata>>;
    /**
     * Exports a `Registration` resource, such that it is no longer managed by
     * Cloud Domains.
     *
     * When an active domain is successfully exported, you can continue to use the
     * domain in [Google Domains](https://domains.google/) until it expires. The
     * calling user becomes the domain's sole owner in Google Domains, and
     * permissions for the domain are subsequently managed there. The domain does
     * not renew automatically unless the new owner sets up billing in Google
     * Domains.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the `Registration` to export,
     *   in the format `projects/* /locations/* /registrations/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.export_registration.js</caption>
     * region_tag:domains_v1_generated_Domains_ExportRegistration_async
     */
    exportRegistration(request?: protos.google.cloud.domains.v1.IExportRegistrationRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    exportRegistration(request: protos.google.cloud.domains.v1.IExportRegistrationRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    exportRegistration(request: protos.google.cloud.domains.v1.IExportRegistrationRequest, callback: Callback<LROperation<protos.google.cloud.domains.v1.IRegistration, protos.google.cloud.domains.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `exportRegistration()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.export_registration.js</caption>
     * region_tag:domains_v1_generated_Domains_ExportRegistration_async
     */
    checkExportRegistrationProgress(name: string): Promise<LROperation<protos.google.cloud.domains.v1.Registration, protos.google.cloud.domains.v1.OperationMetadata>>;
    /**
     * Deletes a `Registration` resource.
     *
     * This method works on any `Registration` resource using [Subscription or
     * Commitment billing](/domains/pricing#billing-models), provided that the
     * resource was created at least 1 day in the past.
     *
     * For `Registration` resources using
     * [Monthly billing](/domains/pricing#billing-models), this method works if:
     *
     * * `state` is `EXPORTED` with `expire_time` in the past
     * * `state` is `REGISTRATION_FAILED`
     * * `state` is `TRANSFER_FAILED`
     *
     * When an active registration is successfully deleted, you can continue to
     * use the domain in [Google Domains](https://domains.google/) until it
     * expires. The calling user becomes the domain's sole owner in Google
     * Domains, and permissions for the domain are subsequently managed there. The
     * domain does not renew automatically unless the new owner sets up billing in
     * Google Domains.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the `Registration` to delete,
     *   in the format `projects/* /locations/* /registrations/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.delete_registration.js</caption>
     * region_tag:domains_v1_generated_Domains_DeleteRegistration_async
     */
    deleteRegistration(request?: protos.google.cloud.domains.v1.IDeleteRegistrationRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.domains.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteRegistration(request: protos.google.cloud.domains.v1.IDeleteRegistrationRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.domains.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteRegistration(request: protos.google.cloud.domains.v1.IDeleteRegistrationRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.domains.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteRegistration()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.delete_registration.js</caption>
     * region_tag:domains_v1_generated_Domains_DeleteRegistration_async
     */
    checkDeleteRegistrationProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.domains.v1.OperationMetadata>>;
    /**
     * Lists the `Registration` resources in a project.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which to list `Registration`s, specified in
     *   the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of results to return.
     * @param {string} request.pageToken
     *   When set to the `next_page_token` from a prior response, provides the next
     *   page of results.
     * @param {string} request.filter
     *   Filter expression to restrict the `Registration`s returned.
     *
     *   The expression must specify the field name, a comparison operator, and the
     *   value that you want to use for filtering. The value must be a string, a
     *   number, a boolean, or an enum value. The comparison operator should be one
     *   of =, !=, >, <, >=, <=, or : for prefix or wildcard matches.
     *
     *   For example, to filter to a specific domain name, use an expression like
     *   `domainName="example.com"`. You can also check for the existence of a
     *   field; for example, to find domains using custom DNS settings, use an
     *   expression like `dnsSettings.customDns:*`.
     *
     *   You can also create compound filters by combining expressions with the
     *   `AND` and `OR` operators. For example, to find domains that are suspended
     *   or have specific issues flagged, use an expression like
     *   `(state=SUSPENDED) OR (issue:*)`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.domains.v1.Registration|Registration}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listRegistrationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listRegistrations(request?: protos.google.cloud.domains.v1.IListRegistrationsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.domains.v1.IRegistration[],
        protos.google.cloud.domains.v1.IListRegistrationsRequest | null,
        protos.google.cloud.domains.v1.IListRegistrationsResponse
    ]>;
    listRegistrations(request: protos.google.cloud.domains.v1.IListRegistrationsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.domains.v1.IListRegistrationsRequest, protos.google.cloud.domains.v1.IListRegistrationsResponse | null | undefined, protos.google.cloud.domains.v1.IRegistration>): void;
    listRegistrations(request: protos.google.cloud.domains.v1.IListRegistrationsRequest, callback: PaginationCallback<protos.google.cloud.domains.v1.IListRegistrationsRequest, protos.google.cloud.domains.v1.IListRegistrationsResponse | null | undefined, protos.google.cloud.domains.v1.IRegistration>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which to list `Registration`s, specified in
     *   the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of results to return.
     * @param {string} request.pageToken
     *   When set to the `next_page_token` from a prior response, provides the next
     *   page of results.
     * @param {string} request.filter
     *   Filter expression to restrict the `Registration`s returned.
     *
     *   The expression must specify the field name, a comparison operator, and the
     *   value that you want to use for filtering. The value must be a string, a
     *   number, a boolean, or an enum value. The comparison operator should be one
     *   of =, !=, >, <, >=, <=, or : for prefix or wildcard matches.
     *
     *   For example, to filter to a specific domain name, use an expression like
     *   `domainName="example.com"`. You can also check for the existence of a
     *   field; for example, to find domains using custom DNS settings, use an
     *   expression like `dnsSettings.customDns:*`.
     *
     *   You can also create compound filters by combining expressions with the
     *   `AND` and `OR` operators. For example, to find domains that are suspended
     *   or have specific issues flagged, use an expression like
     *   `(state=SUSPENDED) OR (issue:*)`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.domains.v1.Registration|Registration} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listRegistrationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listRegistrationsStream(request?: protos.google.cloud.domains.v1.IListRegistrationsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listRegistrations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which to list `Registration`s, specified in
     *   the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of results to return.
     * @param {string} request.pageToken
     *   When set to the `next_page_token` from a prior response, provides the next
     *   page of results.
     * @param {string} request.filter
     *   Filter expression to restrict the `Registration`s returned.
     *
     *   The expression must specify the field name, a comparison operator, and the
     *   value that you want to use for filtering. The value must be a string, a
     *   number, a boolean, or an enum value. The comparison operator should be one
     *   of =, !=, >, <, >=, <=, or : for prefix or wildcard matches.
     *
     *   For example, to filter to a specific domain name, use an expression like
     *   `domainName="example.com"`. You can also check for the existence of a
     *   field; for example, to find domains using custom DNS settings, use an
     *   expression like `dnsSettings.customDns:*`.
     *
     *   You can also create compound filters by combining expressions with the
     *   `AND` and `OR` operators. For example, to find domains that are suspended
     *   or have specific issues flagged, use an expression like
     *   `(state=SUSPENDED) OR (issue:*)`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.domains.v1.Registration|Registration}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.list_registrations.js</caption>
     * region_tag:domains_v1_generated_Domains_ListRegistrations_async
     */
    listRegistrationsAsync(request?: protos.google.cloud.domains.v1.IListRegistrationsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.domains.v1.IRegistration>;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified registration resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} registration
     * @returns {string} Resource name string.
     */
    registrationPath(project: string, location: string, registration: string): string;
    /**
     * Parse the project from Registration resource.
     *
     * @param {string} registrationName
     *   A fully-qualified path representing Registration resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromRegistrationName(registrationName: string): string | number;
    /**
     * Parse the location from Registration resource.
     *
     * @param {string} registrationName
     *   A fully-qualified path representing Registration resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromRegistrationName(registrationName: string): string | number;
    /**
     * Parse the registration from Registration resource.
     *
     * @param {string} registrationName
     *   A fully-qualified path representing Registration resource.
     * @returns {string} A string representing the registration.
     */
    matchRegistrationFromRegistrationName(registrationName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}

"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainsClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/domains_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./domains_client_config.json");
const version = require('../../../package.json').version;
/**
 *  The Cloud Domains API enables management and configuration of domain names.
 * @class
 * @memberof v1
 */
class DomainsClient {
    /**
     * Construct an instance of DomainsClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new DomainsClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            registrationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/registrations/{registration}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listRegistrations: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'registrations'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback) {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.cloud.location.Locations.GetLocation',
                    get: '/v1/{name=projects/*/locations/*}',
                },
                {
                    selector: 'google.cloud.location.Locations.ListLocations',
                    get: '/v1/{name=projects/*}/locations',
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
                    get: '/v1/{resource=projects/*/locations/*/registrations/*}:getIamPolicy',
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
                    post: '/v1/{resource=projects/*/locations/*/registrations/*}:setIamPolicy',
                    body: '*',
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
                    post: '/v1/{resource=projects/*/locations/*/registrations/*}:testIamPermissions',
                    body: '*',
                },
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v1/{name=projects/*/locations/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v1/{name=projects/*/locations/*}/operations',
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        const registerDomainResponse = protoFilesRoot.lookup('.google.cloud.domains.v1.Registration');
        const registerDomainMetadata = protoFilesRoot.lookup('.google.cloud.domains.v1.OperationMetadata');
        const transferDomainResponse = protoFilesRoot.lookup('.google.cloud.domains.v1.Registration');
        const transferDomainMetadata = protoFilesRoot.lookup('.google.cloud.domains.v1.OperationMetadata');
        const updateRegistrationResponse = protoFilesRoot.lookup('.google.cloud.domains.v1.Registration');
        const updateRegistrationMetadata = protoFilesRoot.lookup('.google.cloud.domains.v1.OperationMetadata');
        const configureManagementSettingsResponse = protoFilesRoot.lookup('.google.cloud.domains.v1.Registration');
        const configureManagementSettingsMetadata = protoFilesRoot.lookup('.google.cloud.domains.v1.OperationMetadata');
        const configureDnsSettingsResponse = protoFilesRoot.lookup('.google.cloud.domains.v1.Registration');
        const configureDnsSettingsMetadata = protoFilesRoot.lookup('.google.cloud.domains.v1.OperationMetadata');
        const configureContactSettingsResponse = protoFilesRoot.lookup('.google.cloud.domains.v1.Registration');
        const configureContactSettingsMetadata = protoFilesRoot.lookup('.google.cloud.domains.v1.OperationMetadata');
        const exportRegistrationResponse = protoFilesRoot.lookup('.google.cloud.domains.v1.Registration');
        const exportRegistrationMetadata = protoFilesRoot.lookup('.google.cloud.domains.v1.OperationMetadata');
        const deleteRegistrationResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteRegistrationMetadata = protoFilesRoot.lookup('.google.cloud.domains.v1.OperationMetadata');
        this.descriptors.longrunning = {
            registerDomain: new this._gaxModule.LongrunningDescriptor(this.operationsClient, registerDomainResponse.decode.bind(registerDomainResponse), registerDomainMetadata.decode.bind(registerDomainMetadata)),
            transferDomain: new this._gaxModule.LongrunningDescriptor(this.operationsClient, transferDomainResponse.decode.bind(transferDomainResponse), transferDomainMetadata.decode.bind(transferDomainMetadata)),
            updateRegistration: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateRegistrationResponse.decode.bind(updateRegistrationResponse), updateRegistrationMetadata.decode.bind(updateRegistrationMetadata)),
            configureManagementSettings: new this._gaxModule.LongrunningDescriptor(this.operationsClient, configureManagementSettingsResponse.decode.bind(configureManagementSettingsResponse), configureManagementSettingsMetadata.decode.bind(configureManagementSettingsMetadata)),
            configureDnsSettings: new this._gaxModule.LongrunningDescriptor(this.operationsClient, configureDnsSettingsResponse.decode.bind(configureDnsSettingsResponse), configureDnsSettingsMetadata.decode.bind(configureDnsSettingsMetadata)),
            configureContactSettings: new this._gaxModule.LongrunningDescriptor(this.operationsClient, configureContactSettingsResponse.decode.bind(configureContactSettingsResponse), configureContactSettingsMetadata.decode.bind(configureContactSettingsMetadata)),
            exportRegistration: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportRegistrationResponse.decode.bind(exportRegistrationResponse), exportRegistrationMetadata.decode.bind(exportRegistrationMetadata)),
            deleteRegistration: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteRegistrationResponse.decode.bind(deleteRegistrationResponse), deleteRegistrationMetadata.decode.bind(deleteRegistrationMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.domains.v1.Domains', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.domainsStub) {
            return this.domainsStub;
        }
        // Put together the "service stub" for
        // google.cloud.domains.v1.Domains.
        this.domainsStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.domains.v1.Domains')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.domains.v1.Domains, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const domainsStubMethods = [
            'searchDomains',
            'retrieveRegisterParameters',
            'registerDomain',
            'retrieveTransferParameters',
            'transferDomain',
            'listRegistrations',
            'getRegistration',
            'updateRegistration',
            'configureManagementSettings',
            'configureDnsSettings',
            'configureContactSettings',
            'exportRegistration',
            'deleteRegistration',
            'retrieveAuthorizationCode',
            'resetAuthorizationCode',
        ];
        for (const methodName of domainsStubMethods) {
            const callPromise = this.domainsStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.domainsStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'domains.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'domains.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    searchDomains(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                location: (_a = request.location) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.searchDomains(request, options, callback);
    }
    retrieveRegisterParameters(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                location: (_a = request.location) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.retrieveRegisterParameters(request, options, callback);
    }
    retrieveTransferParameters(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                location: (_a = request.location) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.retrieveTransferParameters(request, options, callback);
    }
    getRegistration(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getRegistration(request, options, callback);
    }
    retrieveAuthorizationCode(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                registration: (_a = request.registration) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.retrieveAuthorizationCode(request, options, callback);
    }
    resetAuthorizationCode(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                registration: (_a = request.registration) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.resetAuthorizationCode(request, options, callback);
    }
    registerDomain(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.registerDomain(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `registerDomain()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.register_domain.js</caption>
     * region_tag:domains_v1_generated_Domains_RegisterDomain_async
     */
    async checkRegisterDomainProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.registerDomain, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    transferDomain(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.transferDomain(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `transferDomain()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.transfer_domain.js</caption>
     * region_tag:domains_v1_generated_Domains_TransferDomain_async
     */
    async checkTransferDomainProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.transferDomain, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateRegistration(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'registration.name': (_a = request.registration.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateRegistration(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateRegistration()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.update_registration.js</caption>
     * region_tag:domains_v1_generated_Domains_UpdateRegistration_async
     */
    async checkUpdateRegistrationProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateRegistration, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    configureManagementSettings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                registration: (_a = request.registration) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.configureManagementSettings(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `configureManagementSettings()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.configure_management_settings.js</caption>
     * region_tag:domains_v1_generated_Domains_ConfigureManagementSettings_async
     */
    async checkConfigureManagementSettingsProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.configureManagementSettings, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    configureDnsSettings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                registration: (_a = request.registration) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.configureDnsSettings(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `configureDnsSettings()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.configure_dns_settings.js</caption>
     * region_tag:domains_v1_generated_Domains_ConfigureDnsSettings_async
     */
    async checkConfigureDnsSettingsProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.configureDnsSettings, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    configureContactSettings(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                registration: (_a = request.registration) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.configureContactSettings(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `configureContactSettings()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.configure_contact_settings.js</caption>
     * region_tag:domains_v1_generated_Domains_ConfigureContactSettings_async
     */
    async checkConfigureContactSettingsProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.configureContactSettings, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    exportRegistration(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.exportRegistration(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `exportRegistration()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.export_registration.js</caption>
     * region_tag:domains_v1_generated_Domains_ExportRegistration_async
     */
    async checkExportRegistrationProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.exportRegistration, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteRegistration(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteRegistration(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteRegistration()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.delete_registration.js</caption>
     * region_tag:domains_v1_generated_Domains_DeleteRegistration_async
     */
    async checkDeleteRegistrationProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteRegistration, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listRegistrations(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listRegistrations(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which to list `Registration`s, specified in
     *   the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of results to return.
     * @param {string} request.pageToken
     *   When set to the `next_page_token` from a prior response, provides the next
     *   page of results.
     * @param {string} request.filter
     *   Filter expression to restrict the `Registration`s returned.
     *
     *   The expression must specify the field name, a comparison operator, and the
     *   value that you want to use for filtering. The value must be a string, a
     *   number, a boolean, or an enum value. The comparison operator should be one
     *   of =, !=, >, <, >=, <=, or : for prefix or wildcard matches.
     *
     *   For example, to filter to a specific domain name, use an expression like
     *   `domainName="example.com"`. You can also check for the existence of a
     *   field; for example, to find domains using custom DNS settings, use an
     *   expression like `dnsSettings.customDns:*`.
     *
     *   You can also create compound filters by combining expressions with the
     *   `AND` and `OR` operators. For example, to find domains that are suspended
     *   or have specific issues flagged, use an expression like
     *   `(state=SUSPENDED) OR (issue:*)`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.domains.v1.Registration|Registration} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listRegistrationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listRegistrationsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listRegistrations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listRegistrations.createStream(this.innerApiCalls.listRegistrations, request, callSettings);
    }
    /**
     * Equivalent to `listRegistrations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project and location from which to list `Registration`s, specified in
     *   the format `projects/* /locations/*`.
     * @param {number} request.pageSize
     *   Maximum number of results to return.
     * @param {string} request.pageToken
     *   When set to the `next_page_token` from a prior response, provides the next
     *   page of results.
     * @param {string} request.filter
     *   Filter expression to restrict the `Registration`s returned.
     *
     *   The expression must specify the field name, a comparison operator, and the
     *   value that you want to use for filtering. The value must be a string, a
     *   number, a boolean, or an enum value. The comparison operator should be one
     *   of =, !=, >, <, >=, <=, or : for prefix or wildcard matches.
     *
     *   For example, to filter to a specific domain name, use an expression like
     *   `domainName="example.com"`. You can also check for the existence of a
     *   field; for example, to find domains using custom DNS settings, use an
     *   expression like `dnsSettings.customDns:*`.
     *
     *   You can also create compound filters by combining expressions with the
     *   `AND` and `OR` operators. For example, to find domains that are suspended
     *   or have specific issues flagged, use an expression like
     *   `(state=SUSPENDED) OR (issue:*)`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.domains.v1.Registration|Registration}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/domains.list_registrations.js</caption>
     * region_tag:domains_v1_generated_Domains_ListRegistrations_async
     */
    listRegistrationsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listRegistrations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listRegistrations.asyncIterate(this.innerApiCalls['listRegistrations'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified registration resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} registration
     * @returns {string} Resource name string.
     */
    registrationPath(project, location, registration) {
        return this.pathTemplates.registrationPathTemplate.render({
            project: project,
            location: location,
            registration: registration,
        });
    }
    /**
     * Parse the project from Registration resource.
     *
     * @param {string} registrationName
     *   A fully-qualified path representing Registration resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromRegistrationName(registrationName) {
        return this.pathTemplates.registrationPathTemplate.match(registrationName)
            .project;
    }
    /**
     * Parse the location from Registration resource.
     *
     * @param {string} registrationName
     *   A fully-qualified path representing Registration resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromRegistrationName(registrationName) {
        return this.pathTemplates.registrationPathTemplate.match(registrationName)
            .location;
    }
    /**
     * Parse the registration from Registration resource.
     *
     * @param {string} registrationName
     *   A fully-qualified path representing Registration resource.
     * @returns {string} A string representing the registration.
     */
    matchRegistrationFromRegistrationName(registrationName) {
        return this.pathTemplates.registrationPathTemplate.match(registrationName)
            .registration;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.domainsStub && !this._terminated) {
            return this.domainsStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.DomainsClient = DomainsClient;
//# sourceMappingURL=domains_client.js.map
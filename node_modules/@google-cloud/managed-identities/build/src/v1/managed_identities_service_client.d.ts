/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  API Overview
 *
 *  The `managedidentites.googleapis.com` service implements the Google Cloud
 *  Managed Identites API for identity services
 *  (e.g. Microsoft Active Directory).
 *
 *  The Managed Identities service provides methods to manage
 *  (create/read/update/delete) domains, reset managed identities admin password,
 *  add/remove domain controllers in GCP regions and add/remove VPC peering.
 *
 *  Data Model
 *
 *  The Managed Identities service exposes the following resources:
 *
 *  * Locations as global, named as follows:
 *    `projects/{project_id}/locations/global`.
 *
 *  * Domains, named as follows:
 *    `/projects/{project_id}/locations/global/domain/{domain_name}`.
 *
 *  The `{domain_name}` refers to fully qualified domain name in the customer
 *  project e.g. mydomain.myorganization.com, with the following restrictions:
 *
 *   * Must contain only lowercase letters, numbers, periods and hyphens.
 *   * Must start with a letter.
 *   * Must contain between 2-64 characters.
 *   * Must end with a number or a letter.
 *   * Must not start with period.
 *   * First segement length (mydomain form example above) shouldn't exceed
 *     15 chars.
 *   * The last segment cannot be fully numeric.
 *   * Must be unique within the customer project.
 * @class
 * @memberof v1
 */
export declare class ManagedIdentitiesServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    managedIdentitiesServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of ManagedIdentitiesServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new ManagedIdentitiesServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Resets a domain's administrator password.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The domain resource name using the form:
     *   `projects/{project_id}/locations/global/domains/{domain_name}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.managedidentities.v1.ResetAdminPasswordResponse|ResetAdminPasswordResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.reset_admin_password.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_ResetAdminPassword_async
     */
    resetAdminPassword(request?: protos.google.cloud.managedidentities.v1.IResetAdminPasswordRequest, options?: CallOptions): Promise<[
        protos.google.cloud.managedidentities.v1.IResetAdminPasswordResponse,
        (protos.google.cloud.managedidentities.v1.IResetAdminPasswordRequest | undefined),
        {} | undefined
    ]>;
    resetAdminPassword(request: protos.google.cloud.managedidentities.v1.IResetAdminPasswordRequest, options: CallOptions, callback: Callback<protos.google.cloud.managedidentities.v1.IResetAdminPasswordResponse, protos.google.cloud.managedidentities.v1.IResetAdminPasswordRequest | null | undefined, {} | null | undefined>): void;
    resetAdminPassword(request: protos.google.cloud.managedidentities.v1.IResetAdminPasswordRequest, callback: Callback<protos.google.cloud.managedidentities.v1.IResetAdminPasswordResponse, protos.google.cloud.managedidentities.v1.IResetAdminPasswordRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets information about a domain.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The domain resource name using the form:
     *   `projects/{project_id}/locations/global/domains/{domain_name}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.managedidentities.v1.Domain|Domain}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.get_domain.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_GetDomain_async
     */
    getDomain(request?: protos.google.cloud.managedidentities.v1.IGetDomainRequest, options?: CallOptions): Promise<[
        protos.google.cloud.managedidentities.v1.IDomain,
        protos.google.cloud.managedidentities.v1.IGetDomainRequest | undefined,
        {} | undefined
    ]>;
    getDomain(request: protos.google.cloud.managedidentities.v1.IGetDomainRequest, options: CallOptions, callback: Callback<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IGetDomainRequest | null | undefined, {} | null | undefined>): void;
    getDomain(request: protos.google.cloud.managedidentities.v1.IGetDomainRequest, callback: Callback<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IGetDomainRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a Microsoft AD domain.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource project name and location using the form:
     *   `projects/{project_id}/locations/global`
     * @param {string} request.domainName
     *   Required. The fully qualified domain name.
     *   e.g. mydomain.myorganization.com, with the following restrictions:
     *
     *    * Must contain only lowercase letters, numbers, periods and hyphens.
     *    * Must start with a letter.
     *    * Must contain between 2-64 characters.
     *    * Must end with a number or a letter.
     *    * Must not start with period.
     *    * First segement length (mydomain form example above) shouldn't exceed
     *      15 chars.
     *    * The last segment cannot be fully numeric.
     *    * Must be unique within the customer project.
     * @param {google.cloud.managedidentities.v1.Domain} request.domain
     *   Required. A Managed Identity domain resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.create_microsoft_ad_domain.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_CreateMicrosoftAdDomain_async
     */
    createMicrosoftAdDomain(request?: protos.google.cloud.managedidentities.v1.ICreateMicrosoftAdDomainRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createMicrosoftAdDomain(request: protos.google.cloud.managedidentities.v1.ICreateMicrosoftAdDomainRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createMicrosoftAdDomain(request: protos.google.cloud.managedidentities.v1.ICreateMicrosoftAdDomainRequest, callback: Callback<LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createMicrosoftAdDomain()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.create_microsoft_ad_domain.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_CreateMicrosoftAdDomain_async
     */
    checkCreateMicrosoftAdDomainProgress(name: string): Promise<LROperation<protos.google.cloud.managedidentities.v1.Domain, protos.google.cloud.managedidentities.v1.OpMetadata>>;
    /**
     * Updates the metadata and configuration of a domain.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update. At least one path must be supplied in this
     *   field. The elements of the repeated paths field may only include
     *   fields from {@link protos.google.cloud.managedidentities.v1.Domain|Domain}:
     *    * `labels`
     *    * `locations`
     *    * `authorized_networks`
     * @param {google.cloud.managedidentities.v1.Domain} request.domain
     *   Required. Domain message with updated fields. Only supported fields specified in
     *   update_mask are updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.update_domain.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_UpdateDomain_async
     */
    updateDomain(request?: protos.google.cloud.managedidentities.v1.IUpdateDomainRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateDomain(request: protos.google.cloud.managedidentities.v1.IUpdateDomainRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateDomain(request: protos.google.cloud.managedidentities.v1.IUpdateDomainRequest, callback: Callback<LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateDomain()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.update_domain.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_UpdateDomain_async
     */
    checkUpdateDomainProgress(name: string): Promise<LROperation<protos.google.cloud.managedidentities.v1.Domain, protos.google.cloud.managedidentities.v1.OpMetadata>>;
    /**
     * Deletes a domain.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The domain resource name using the form:
     *   `projects/{project_id}/locations/global/domains/{domain_name}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.delete_domain.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_DeleteDomain_async
     */
    deleteDomain(request?: protos.google.cloud.managedidentities.v1.IDeleteDomainRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.managedidentities.v1.IOpMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteDomain(request: protos.google.cloud.managedidentities.v1.IDeleteDomainRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.managedidentities.v1.IOpMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteDomain(request: protos.google.cloud.managedidentities.v1.IDeleteDomainRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.managedidentities.v1.IOpMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteDomain()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.delete_domain.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_DeleteDomain_async
     */
    checkDeleteDomainProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.managedidentities.v1.OpMetadata>>;
    /**
     * Adds an AD trust to a domain.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource domain name, project name and location using the form:
     *   `projects/{project_id}/locations/global/domains/{domain_name}`
     * @param {google.cloud.managedidentities.v1.Trust} request.trust
     *   Required. The domain trust resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.attach_trust.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_AttachTrust_async
     */
    attachTrust(request?: protos.google.cloud.managedidentities.v1.IAttachTrustRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    attachTrust(request: protos.google.cloud.managedidentities.v1.IAttachTrustRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    attachTrust(request: protos.google.cloud.managedidentities.v1.IAttachTrustRequest, callback: Callback<LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `attachTrust()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.attach_trust.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_AttachTrust_async
     */
    checkAttachTrustProgress(name: string): Promise<LROperation<protos.google.cloud.managedidentities.v1.Domain, protos.google.cloud.managedidentities.v1.OpMetadata>>;
    /**
     * Updates the DNS conditional forwarder.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource domain name, project name and location using the form:
     *   `projects/{project_id}/locations/global/domains/{domain_name}`
     * @param {string} request.targetDomainName
     *   Required. The fully-qualified target domain name which will be in trust with current
     *   domain.
     * @param {string[]} request.targetDnsIpAddresses
     *   Required. The target DNS server IP addresses to resolve the remote domain involved
     *   in the trust.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.reconfigure_trust.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_ReconfigureTrust_async
     */
    reconfigureTrust(request?: protos.google.cloud.managedidentities.v1.IReconfigureTrustRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    reconfigureTrust(request: protos.google.cloud.managedidentities.v1.IReconfigureTrustRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    reconfigureTrust(request: protos.google.cloud.managedidentities.v1.IReconfigureTrustRequest, callback: Callback<LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `reconfigureTrust()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.reconfigure_trust.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_ReconfigureTrust_async
     */
    checkReconfigureTrustProgress(name: string): Promise<LROperation<protos.google.cloud.managedidentities.v1.Domain, protos.google.cloud.managedidentities.v1.OpMetadata>>;
    /**
     * Removes an AD trust.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource domain name, project name, and location using the form:
     *   `projects/{project_id}/locations/global/domains/{domain_name}`
     * @param {google.cloud.managedidentities.v1.Trust} request.trust
     *   Required. The domain trust resource to removed.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.detach_trust.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_DetachTrust_async
     */
    detachTrust(request?: protos.google.cloud.managedidentities.v1.IDetachTrustRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    detachTrust(request: protos.google.cloud.managedidentities.v1.IDetachTrustRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    detachTrust(request: protos.google.cloud.managedidentities.v1.IDetachTrustRequest, callback: Callback<LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `detachTrust()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.detach_trust.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_DetachTrust_async
     */
    checkDetachTrustProgress(name: string): Promise<LROperation<protos.google.cloud.managedidentities.v1.Domain, protos.google.cloud.managedidentities.v1.OpMetadata>>;
    /**
     * Validates a trust state, that the target domain is reachable, and that the
     * target domain is able to accept incoming trust requests.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource domain name, project name, and location using the form:
     *   `projects/{project_id}/locations/global/domains/{domain_name}`
     * @param {google.cloud.managedidentities.v1.Trust} request.trust
     *   Required. The domain trust to validate trust state for.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.validate_trust.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_ValidateTrust_async
     */
    validateTrust(request?: protos.google.cloud.managedidentities.v1.IValidateTrustRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    validateTrust(request: protos.google.cloud.managedidentities.v1.IValidateTrustRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    validateTrust(request: protos.google.cloud.managedidentities.v1.IValidateTrustRequest, callback: Callback<LROperation<protos.google.cloud.managedidentities.v1.IDomain, protos.google.cloud.managedidentities.v1.IOpMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `validateTrust()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.validate_trust.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_ValidateTrust_async
     */
    checkValidateTrustProgress(name: string): Promise<LROperation<protos.google.cloud.managedidentities.v1.Domain, protos.google.cloud.managedidentities.v1.OpMetadata>>;
    /**
     * Lists domains in a project.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the domain location using the form:
     *   `projects/{project_id}/locations/global`
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return.
     *   If not specified, a default value of 1000 will be used.
     *   Regardless of the page_size value, the response may include a partial list.
     *   Callers should rely on a response's
     *   {@link protos.google.cloud.managedidentities.v1.ListDomainsResponse.next_page_token|next_page_token}
     *   to determine if there are additional results to list.
     * @param {string} [request.pageToken]
     *   Optional. The `next_page_token` value returned from a previous ListDomainsRequest
     *   request, if any.
     * @param {string} [request.filter]
     *   Optional. A filter specifying constraints of a list operation.
     *   For example, `Domain.fqdn="mydomain.myorginization"`.
     * @param {string} [request.orderBy]
     *   Optional. Specifies the ordering of results. See
     *   [Sorting
     *   order](https://cloud.google.com/apis/design/design_patterns#sorting_order)
     *   for more information.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.managedidentities.v1.Domain|Domain}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listDomainsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDomains(request?: protos.google.cloud.managedidentities.v1.IListDomainsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.managedidentities.v1.IDomain[],
        protos.google.cloud.managedidentities.v1.IListDomainsRequest | null,
        protos.google.cloud.managedidentities.v1.IListDomainsResponse
    ]>;
    listDomains(request: protos.google.cloud.managedidentities.v1.IListDomainsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.managedidentities.v1.IListDomainsRequest, protos.google.cloud.managedidentities.v1.IListDomainsResponse | null | undefined, protos.google.cloud.managedidentities.v1.IDomain>): void;
    listDomains(request: protos.google.cloud.managedidentities.v1.IListDomainsRequest, callback: PaginationCallback<protos.google.cloud.managedidentities.v1.IListDomainsRequest, protos.google.cloud.managedidentities.v1.IListDomainsResponse | null | undefined, protos.google.cloud.managedidentities.v1.IDomain>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the domain location using the form:
     *   `projects/{project_id}/locations/global`
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return.
     *   If not specified, a default value of 1000 will be used.
     *   Regardless of the page_size value, the response may include a partial list.
     *   Callers should rely on a response's
     *   {@link protos.google.cloud.managedidentities.v1.ListDomainsResponse.next_page_token|next_page_token}
     *   to determine if there are additional results to list.
     * @param {string} [request.pageToken]
     *   Optional. The `next_page_token` value returned from a previous ListDomainsRequest
     *   request, if any.
     * @param {string} [request.filter]
     *   Optional. A filter specifying constraints of a list operation.
     *   For example, `Domain.fqdn="mydomain.myorginization"`.
     * @param {string} [request.orderBy]
     *   Optional. Specifies the ordering of results. See
     *   [Sorting
     *   order](https://cloud.google.com/apis/design/design_patterns#sorting_order)
     *   for more information.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.managedidentities.v1.Domain|Domain} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDomainsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDomainsStream(request?: protos.google.cloud.managedidentities.v1.IListDomainsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listDomains`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the domain location using the form:
     *   `projects/{project_id}/locations/global`
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return.
     *   If not specified, a default value of 1000 will be used.
     *   Regardless of the page_size value, the response may include a partial list.
     *   Callers should rely on a response's
     *   {@link protos.google.cloud.managedidentities.v1.ListDomainsResponse.next_page_token|next_page_token}
     *   to determine if there are additional results to list.
     * @param {string} [request.pageToken]
     *   Optional. The `next_page_token` value returned from a previous ListDomainsRequest
     *   request, if any.
     * @param {string} [request.filter]
     *   Optional. A filter specifying constraints of a list operation.
     *   For example, `Domain.fqdn="mydomain.myorginization"`.
     * @param {string} [request.orderBy]
     *   Optional. Specifies the ordering of results. See
     *   [Sorting
     *   order](https://cloud.google.com/apis/design/design_patterns#sorting_order)
     *   for more information.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.managedidentities.v1.Domain|Domain}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.list_domains.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_ListDomains_async
     */
    listDomainsAsync(request?: protos.google.cloud.managedidentities.v1.IListDomainsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.managedidentities.v1.IDomain>;
    /**
     * Return a fully-qualified domain resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} domain
     * @returns {string} Resource name string.
     */
    domainPath(project: string, location: string, domain: string): string;
    /**
     * Parse the project from Domain resource.
     *
     * @param {string} domainName
     *   A fully-qualified path representing Domain resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDomainName(domainName: string): string | number;
    /**
     * Parse the location from Domain resource.
     *
     * @param {string} domainName
     *   A fully-qualified path representing Domain resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDomainName(domainName: string): string | number;
    /**
     * Parse the domain from Domain resource.
     *
     * @param {string} domainName
     *   A fully-qualified path representing Domain resource.
     * @returns {string} A string representing the domain.
     */
    matchDomainFromDomainName(domainName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}

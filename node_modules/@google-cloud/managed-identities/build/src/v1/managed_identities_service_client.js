"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedIdentitiesServiceClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/managed_identities_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./managed_identities_service_client_config.json");
const version = require('../../../package.json').version;
/**
 *  API Overview
 *
 *  The `managedidentites.googleapis.com` service implements the Google Cloud
 *  Managed Identites API for identity services
 *  (e.g. Microsoft Active Directory).
 *
 *  The Managed Identities service provides methods to manage
 *  (create/read/update/delete) domains, reset managed identities admin password,
 *  add/remove domain controllers in GCP regions and add/remove VPC peering.
 *
 *  Data Model
 *
 *  The Managed Identities service exposes the following resources:
 *
 *  * Locations as global, named as follows:
 *    `projects/{project_id}/locations/global`.
 *
 *  * Domains, named as follows:
 *    `/projects/{project_id}/locations/global/domain/{domain_name}`.
 *
 *  The `{domain_name}` refers to fully qualified domain name in the customer
 *  project e.g. mydomain.myorganization.com, with the following restrictions:
 *
 *   * Must contain only lowercase letters, numbers, periods and hyphens.
 *   * Must start with a letter.
 *   * Must contain between 2-64 characters.
 *   * Must end with a number or a letter.
 *   * Must not start with period.
 *   * First segement length (mydomain form example above) shouldn't exceed
 *     15 chars.
 *   * The last segment cannot be fully numeric.
 *   * Must be unique within the customer project.
 * @class
 * @memberof v1
 */
class ManagedIdentitiesServiceClient {
    /**
     * Construct an instance of ManagedIdentitiesServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new ManagedIdentitiesServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this
            .constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            domainPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/domains/{domain}'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listDomains: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'domains'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback) {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.cloud.location.Locations.GetLocation',
                    get: '/v1/{name=projects/*/locations/*}',
                },
                {
                    selector: 'google.cloud.location.Locations.ListLocations',
                    get: '/v1/{name=projects/*}/locations',
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
                    get: '/v1/{resource=projects/*/locations/global/domains/*}:getIamPolicy',
                    additional_bindings: [
                        {
                            get: '/v1/{resource=projects/*/locations/global/peerings/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/global/domains/*/backups/*}:getIamPolicy',
                        },
                    ],
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
                    post: '/v1/{resource=projects/*/locations/global/domains/*}:setIamPolicy',
                    body: '*',
                    additional_bindings: [
                        {
                            post: '/v1/{resource=projects/*/locations/global/peerings/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/global/domains/*/backups/*}:setIamPolicy',
                            body: '*',
                        },
                    ],
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
                    post: '/v1/{resource=projects/*/locations/global/domains/*}:testIamPermissions',
                    body: '*',
                    additional_bindings: [
                        {
                            post: '/v1/{resource=projects/*/locations/global/peerings/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/global/domains/*/backups/*}:testIamPermissions',
                            body: '*',
                        },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.CancelOperation',
                    post: '/v1/{name=projects/*/locations/global/operations/*}:cancel',
                    body: '*',
                },
                {
                    selector: 'google.longrunning.Operations.DeleteOperation',
                    delete: '/v1/{name=projects/*/locations/global/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v1/{name=projects/*/locations/global/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v1/{name=projects/*/locations/global/operations}',
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        const createMicrosoftAdDomainResponse = protoFilesRoot.lookup('.google.cloud.managedidentities.v1.Domain');
        const createMicrosoftAdDomainMetadata = protoFilesRoot.lookup('.google.cloud.managedidentities.v1.OpMetadata');
        const updateDomainResponse = protoFilesRoot.lookup('.google.cloud.managedidentities.v1.Domain');
        const updateDomainMetadata = protoFilesRoot.lookup('.google.cloud.managedidentities.v1.OpMetadata');
        const deleteDomainResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteDomainMetadata = protoFilesRoot.lookup('.google.cloud.managedidentities.v1.OpMetadata');
        const attachTrustResponse = protoFilesRoot.lookup('.google.cloud.managedidentities.v1.Domain');
        const attachTrustMetadata = protoFilesRoot.lookup('.google.cloud.managedidentities.v1.OpMetadata');
        const reconfigureTrustResponse = protoFilesRoot.lookup('.google.cloud.managedidentities.v1.Domain');
        const reconfigureTrustMetadata = protoFilesRoot.lookup('.google.cloud.managedidentities.v1.OpMetadata');
        const detachTrustResponse = protoFilesRoot.lookup('.google.cloud.managedidentities.v1.Domain');
        const detachTrustMetadata = protoFilesRoot.lookup('.google.cloud.managedidentities.v1.OpMetadata');
        const validateTrustResponse = protoFilesRoot.lookup('.google.cloud.managedidentities.v1.Domain');
        const validateTrustMetadata = protoFilesRoot.lookup('.google.cloud.managedidentities.v1.OpMetadata');
        this.descriptors.longrunning = {
            createMicrosoftAdDomain: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createMicrosoftAdDomainResponse.decode.bind(createMicrosoftAdDomainResponse), createMicrosoftAdDomainMetadata.decode.bind(createMicrosoftAdDomainMetadata)),
            updateDomain: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateDomainResponse.decode.bind(updateDomainResponse), updateDomainMetadata.decode.bind(updateDomainMetadata)),
            deleteDomain: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteDomainResponse.decode.bind(deleteDomainResponse), deleteDomainMetadata.decode.bind(deleteDomainMetadata)),
            attachTrust: new this._gaxModule.LongrunningDescriptor(this.operationsClient, attachTrustResponse.decode.bind(attachTrustResponse), attachTrustMetadata.decode.bind(attachTrustMetadata)),
            reconfigureTrust: new this._gaxModule.LongrunningDescriptor(this.operationsClient, reconfigureTrustResponse.decode.bind(reconfigureTrustResponse), reconfigureTrustMetadata.decode.bind(reconfigureTrustMetadata)),
            detachTrust: new this._gaxModule.LongrunningDescriptor(this.operationsClient, detachTrustResponse.decode.bind(detachTrustResponse), detachTrustMetadata.decode.bind(detachTrustMetadata)),
            validateTrust: new this._gaxModule.LongrunningDescriptor(this.operationsClient, validateTrustResponse.decode.bind(validateTrustResponse), validateTrustMetadata.decode.bind(validateTrustMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.managedidentities.v1.ManagedIdentitiesService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.managedIdentitiesServiceStub) {
            return this.managedIdentitiesServiceStub;
        }
        // Put together the "service stub" for
        // google.cloud.managedidentities.v1.ManagedIdentitiesService.
        this.managedIdentitiesServiceStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.managedidentities.v1.ManagedIdentitiesService')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.managedidentities.v1
                    .ManagedIdentitiesService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const managedIdentitiesServiceStubMethods = [
            'createMicrosoftAdDomain',
            'resetAdminPassword',
            'listDomains',
            'getDomain',
            'updateDomain',
            'deleteDomain',
            'attachTrust',
            'reconfigureTrust',
            'detachTrust',
            'validateTrust',
        ];
        for (const methodName of managedIdentitiesServiceStubMethods) {
            const callPromise = this.managedIdentitiesServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.managedIdentitiesServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'managedidentities.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'managedidentities.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    resetAdminPassword(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.resetAdminPassword(request, options, callback);
    }
    getDomain(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getDomain(request, options, callback);
    }
    createMicrosoftAdDomain(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createMicrosoftAdDomain(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createMicrosoftAdDomain()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.create_microsoft_ad_domain.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_CreateMicrosoftAdDomain_async
     */
    async checkCreateMicrosoftAdDomainProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createMicrosoftAdDomain, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateDomain(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'domain.name': (_a = request.domain.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateDomain(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateDomain()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.update_domain.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_UpdateDomain_async
     */
    async checkUpdateDomainProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateDomain, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteDomain(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteDomain(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteDomain()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.delete_domain.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_DeleteDomain_async
     */
    async checkDeleteDomainProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteDomain, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    attachTrust(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.attachTrust(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `attachTrust()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.attach_trust.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_AttachTrust_async
     */
    async checkAttachTrustProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.attachTrust, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    reconfigureTrust(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.reconfigureTrust(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `reconfigureTrust()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.reconfigure_trust.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_ReconfigureTrust_async
     */
    async checkReconfigureTrustProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.reconfigureTrust, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    detachTrust(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.detachTrust(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `detachTrust()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.detach_trust.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_DetachTrust_async
     */
    async checkDetachTrustProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.detachTrust, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    validateTrust(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.validateTrust(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `validateTrust()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.validate_trust.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_ValidateTrust_async
     */
    async checkValidateTrustProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.validateTrust, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listDomains(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listDomains(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the domain location using the form:
     *   `projects/{project_id}/locations/global`
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return.
     *   If not specified, a default value of 1000 will be used.
     *   Regardless of the page_size value, the response may include a partial list.
     *   Callers should rely on a response's
     *   {@link protos.google.cloud.managedidentities.v1.ListDomainsResponse.next_page_token|next_page_token}
     *   to determine if there are additional results to list.
     * @param {string} [request.pageToken]
     *   Optional. The `next_page_token` value returned from a previous ListDomainsRequest
     *   request, if any.
     * @param {string} [request.filter]
     *   Optional. A filter specifying constraints of a list operation.
     *   For example, `Domain.fqdn="mydomain.myorginization"`.
     * @param {string} [request.orderBy]
     *   Optional. Specifies the ordering of results. See
     *   [Sorting
     *   order](https://cloud.google.com/apis/design/design_patterns#sorting_order)
     *   for more information.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.managedidentities.v1.Domain|Domain} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDomainsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDomainsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDomains'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDomains.createStream(this.innerApiCalls.listDomains, request, callSettings);
    }
    /**
     * Equivalent to `listDomains`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the domain location using the form:
     *   `projects/{project_id}/locations/global`
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return.
     *   If not specified, a default value of 1000 will be used.
     *   Regardless of the page_size value, the response may include a partial list.
     *   Callers should rely on a response's
     *   {@link protos.google.cloud.managedidentities.v1.ListDomainsResponse.next_page_token|next_page_token}
     *   to determine if there are additional results to list.
     * @param {string} [request.pageToken]
     *   Optional. The `next_page_token` value returned from a previous ListDomainsRequest
     *   request, if any.
     * @param {string} [request.filter]
     *   Optional. A filter specifying constraints of a list operation.
     *   For example, `Domain.fqdn="mydomain.myorginization"`.
     * @param {string} [request.orderBy]
     *   Optional. Specifies the ordering of results. See
     *   [Sorting
     *   order](https://cloud.google.com/apis/design/design_patterns#sorting_order)
     *   for more information.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.managedidentities.v1.Domain|Domain}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/managed_identities_service.list_domains.js</caption>
     * region_tag:managedidentities_v1_generated_ManagedIdentitiesService_ListDomains_async
     */
    listDomainsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listDomains'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDomains.asyncIterate(this.innerApiCalls['listDomains'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified domain resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} domain
     * @returns {string} Resource name string.
     */
    domainPath(project, location, domain) {
        return this.pathTemplates.domainPathTemplate.render({
            project: project,
            location: location,
            domain: domain,
        });
    }
    /**
     * Parse the project from Domain resource.
     *
     * @param {string} domainName
     *   A fully-qualified path representing Domain resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDomainName(domainName) {
        return this.pathTemplates.domainPathTemplate.match(domainName).project;
    }
    /**
     * Parse the location from Domain resource.
     *
     * @param {string} domainName
     *   A fully-qualified path representing Domain resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDomainName(domainName) {
        return this.pathTemplates.domainPathTemplate.match(domainName).location;
    }
    /**
     * Parse the domain from Domain resource.
     *
     * @param {string} domainName
     *   A fully-qualified path representing Domain resource.
     * @returns {string} A string representing the domain.
     */
    matchDomainFromDomainName(domainName) {
        return this.pathTemplates.domainPathTemplate.match(domainName).domain;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.managedIdentitiesServiceStub && !this._terminated) {
            return this.managedIdentitiesServiceStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.ManagedIdentitiesServiceClient = ManagedIdentitiesServiceClient;
//# sourceMappingURL=managed_identities_service_client.js.map
/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Manages Stackdriver dashboards. A dashboard is an arrangement of data display
 *  widgets in a specific layout.
 * @class
 * @memberof v1
 */
export declare class DashboardsServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    dashboardsServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of DashboardsServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new DashboardsServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Creates a new custom dashboard. For examples on how you can use this API to
     * create dashboards, see [Managing dashboards by
     * API](https://cloud.google.com/monitoring/dashboards/api-dashboard). This
     * method requires the `monitoring.dashboards.create` permission on the
     * specified project. For more information about permissions, see [Cloud
     * Identity and Access Management](https://cloud.google.com/iam).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project on which to execute the request. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     *
     *   The `[PROJECT_ID_OR_NUMBER]` must match the dashboard resource name.
     * @param {google.monitoring.dashboard.v1.Dashboard} request.dashboard
     *   Required. The initial dashboard specification.
     * @param {boolean} request.validateOnly
     *   If set, validate the request and preview the review, but do not actually
     *   save it.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.monitoring.dashboard.v1.Dashboard|Dashboard}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dashboards_service.create_dashboard.js</caption>
     * region_tag:monitoring_v1_generated_DashboardsService_CreateDashboard_async
     */
    createDashboard(request?: protos.google.monitoring.dashboard.v1.ICreateDashboardRequest, options?: CallOptions): Promise<[
        protos.google.monitoring.dashboard.v1.IDashboard,
        protos.google.monitoring.dashboard.v1.ICreateDashboardRequest | undefined,
        {} | undefined
    ]>;
    createDashboard(request: protos.google.monitoring.dashboard.v1.ICreateDashboardRequest, options: CallOptions, callback: Callback<protos.google.monitoring.dashboard.v1.IDashboard, protos.google.monitoring.dashboard.v1.ICreateDashboardRequest | null | undefined, {} | null | undefined>): void;
    createDashboard(request: protos.google.monitoring.dashboard.v1.ICreateDashboardRequest, callback: Callback<protos.google.monitoring.dashboard.v1.IDashboard, protos.google.monitoring.dashboard.v1.ICreateDashboardRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Fetches a specific dashboard.
     *
     * This method requires the `monitoring.dashboards.get` permission
     * on the specified dashboard. For more information, see
     * [Cloud Identity and Access Management](https://cloud.google.com/iam).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Dashboard. The format is one of:
     *
     *    -  `dashboards/[DASHBOARD_ID]` (for system dashboards)
     *    -  `projects/[PROJECT_ID_OR_NUMBER]/dashboards/[DASHBOARD_ID]`
     *         (for custom dashboards).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.monitoring.dashboard.v1.Dashboard|Dashboard}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dashboards_service.get_dashboard.js</caption>
     * region_tag:monitoring_v1_generated_DashboardsService_GetDashboard_async
     */
    getDashboard(request?: protos.google.monitoring.dashboard.v1.IGetDashboardRequest, options?: CallOptions): Promise<[
        protos.google.monitoring.dashboard.v1.IDashboard,
        protos.google.monitoring.dashboard.v1.IGetDashboardRequest | undefined,
        {} | undefined
    ]>;
    getDashboard(request: protos.google.monitoring.dashboard.v1.IGetDashboardRequest, options: CallOptions, callback: Callback<protos.google.monitoring.dashboard.v1.IDashboard, protos.google.monitoring.dashboard.v1.IGetDashboardRequest | null | undefined, {} | null | undefined>): void;
    getDashboard(request: protos.google.monitoring.dashboard.v1.IGetDashboardRequest, callback: Callback<protos.google.monitoring.dashboard.v1.IDashboard, protos.google.monitoring.dashboard.v1.IGetDashboardRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes an existing custom dashboard.
     *
     * This method requires the `monitoring.dashboards.delete` permission
     * on the specified dashboard. For more information, see
     * [Cloud Identity and Access Management](https://cloud.google.com/iam).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Dashboard. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]/dashboards/[DASHBOARD_ID]
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dashboards_service.delete_dashboard.js</caption>
     * region_tag:monitoring_v1_generated_DashboardsService_DeleteDashboard_async
     */
    deleteDashboard(request?: protos.google.monitoring.dashboard.v1.IDeleteDashboardRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.monitoring.dashboard.v1.IDeleteDashboardRequest | undefined,
        {} | undefined
    ]>;
    deleteDashboard(request: protos.google.monitoring.dashboard.v1.IDeleteDashboardRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.monitoring.dashboard.v1.IDeleteDashboardRequest | null | undefined, {} | null | undefined>): void;
    deleteDashboard(request: protos.google.monitoring.dashboard.v1.IDeleteDashboardRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.monitoring.dashboard.v1.IDeleteDashboardRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Replaces an existing custom dashboard with a new definition.
     *
     * This method requires the `monitoring.dashboards.update` permission
     * on the specified dashboard. For more information, see
     * [Cloud Identity and Access Management](https://cloud.google.com/iam).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.monitoring.dashboard.v1.Dashboard} request.dashboard
     *   Required. The dashboard that will replace the existing dashboard.
     * @param {boolean} request.validateOnly
     *   If set, validate the request and preview the review, but do not actually
     *   save it.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.monitoring.dashboard.v1.Dashboard|Dashboard}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dashboards_service.update_dashboard.js</caption>
     * region_tag:monitoring_v1_generated_DashboardsService_UpdateDashboard_async
     */
    updateDashboard(request?: protos.google.monitoring.dashboard.v1.IUpdateDashboardRequest, options?: CallOptions): Promise<[
        protos.google.monitoring.dashboard.v1.IDashboard,
        protos.google.monitoring.dashboard.v1.IUpdateDashboardRequest | undefined,
        {} | undefined
    ]>;
    updateDashboard(request: protos.google.monitoring.dashboard.v1.IUpdateDashboardRequest, options: CallOptions, callback: Callback<protos.google.monitoring.dashboard.v1.IDashboard, protos.google.monitoring.dashboard.v1.IUpdateDashboardRequest | null | undefined, {} | null | undefined>): void;
    updateDashboard(request: protos.google.monitoring.dashboard.v1.IUpdateDashboardRequest, callback: Callback<protos.google.monitoring.dashboard.v1.IDashboard, protos.google.monitoring.dashboard.v1.IUpdateDashboardRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Lists the existing dashboards.
     *
     * This method requires the `monitoring.dashboards.list` permission
     * on the specified project. For more information, see
     * [Cloud Identity and Access Management](https://cloud.google.com/iam).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The scope of the dashboards to list. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {number} request.pageSize
     *   A positive number that is the maximum number of results to return.
     *   If unspecified, a default of 1000 is used.
     * @param {string} request.pageToken
     *   If this field is not empty then it must contain the `nextPageToken` value
     *   returned by a previous call to this method.  Using this field causes the
     *   method to return additional results from the previous method call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.monitoring.dashboard.v1.Dashboard|Dashboard}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listDashboardsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDashboards(request?: protos.google.monitoring.dashboard.v1.IListDashboardsRequest, options?: CallOptions): Promise<[
        protos.google.monitoring.dashboard.v1.IDashboard[],
        protos.google.monitoring.dashboard.v1.IListDashboardsRequest | null,
        protos.google.monitoring.dashboard.v1.IListDashboardsResponse
    ]>;
    listDashboards(request: protos.google.monitoring.dashboard.v1.IListDashboardsRequest, options: CallOptions, callback: PaginationCallback<protos.google.monitoring.dashboard.v1.IListDashboardsRequest, protos.google.monitoring.dashboard.v1.IListDashboardsResponse | null | undefined, protos.google.monitoring.dashboard.v1.IDashboard>): void;
    listDashboards(request: protos.google.monitoring.dashboard.v1.IListDashboardsRequest, callback: PaginationCallback<protos.google.monitoring.dashboard.v1.IListDashboardsRequest, protos.google.monitoring.dashboard.v1.IListDashboardsResponse | null | undefined, protos.google.monitoring.dashboard.v1.IDashboard>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The scope of the dashboards to list. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {number} request.pageSize
     *   A positive number that is the maximum number of results to return.
     *   If unspecified, a default of 1000 is used.
     * @param {string} request.pageToken
     *   If this field is not empty then it must contain the `nextPageToken` value
     *   returned by a previous call to this method.  Using this field causes the
     *   method to return additional results from the previous method call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.monitoring.dashboard.v1.Dashboard|Dashboard} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDashboardsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listDashboardsStream(request?: protos.google.monitoring.dashboard.v1.IListDashboardsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listDashboards`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The scope of the dashboards to list. The format is:
     *
     *       projects/[PROJECT_ID_OR_NUMBER]
     * @param {number} request.pageSize
     *   A positive number that is the maximum number of results to return.
     *   If unspecified, a default of 1000 is used.
     * @param {string} request.pageToken
     *   If this field is not empty then it must contain the `nextPageToken` value
     *   returned by a previous call to this method.  Using this field causes the
     *   method to return additional results from the previous method call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.monitoring.dashboard.v1.Dashboard|Dashboard}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/dashboards_service.list_dashboards.js</caption>
     * region_tag:monitoring_v1_generated_DashboardsService_ListDashboards_async
     */
    listDashboardsAsync(request?: protos.google.monitoring.dashboard.v1.IListDashboardsRequest, options?: CallOptions): AsyncIterable<protos.google.monitoring.dashboard.v1.IDashboard>;
    /**
     * Return a fully-qualified alertPolicy resource name string.
     *
     * @param {string} project
     * @param {string} alert_policy
     * @returns {string} Resource name string.
     */
    alertPolicyPath(project: string, alertPolicy: string): string;
    /**
     * Parse the project from AlertPolicy resource.
     *
     * @param {string} alertPolicyName
     *   A fully-qualified path representing AlertPolicy resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAlertPolicyName(alertPolicyName: string): string | number;
    /**
     * Parse the alert_policy from AlertPolicy resource.
     *
     * @param {string} alertPolicyName
     *   A fully-qualified path representing AlertPolicy resource.
     * @returns {string} A string representing the alert_policy.
     */
    matchAlertPolicyFromAlertPolicyName(alertPolicyName: string): string | number;
    /**
     * Return a fully-qualified dashboard resource name string.
     *
     * @param {string} project
     * @param {string} dashboard
     * @returns {string} Resource name string.
     */
    dashboardPath(project: string, dashboard: string): string;
    /**
     * Parse the project from Dashboard resource.
     *
     * @param {string} dashboardName
     *   A fully-qualified path representing Dashboard resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDashboardName(dashboardName: string): string | number;
    /**
     * Parse the dashboard from Dashboard resource.
     *
     * @param {string} dashboardName
     *   A fully-qualified path representing Dashboard resource.
     * @returns {string} A string representing the dashboard.
     */
    matchDashboardFromDashboardName(dashboardName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}

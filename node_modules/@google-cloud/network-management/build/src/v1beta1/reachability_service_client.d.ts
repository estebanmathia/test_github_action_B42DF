/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  The Reachability service in the Google Cloud Network Management API provides
 *  services that analyze the reachability within a single Google Virtual Private
 *  Cloud (VPC) network, between peered VPC networks, between VPC and on-premises
 *  networks, or between VPC networks and internet hosts. A reachability analysis
 *  is based on Google Cloud network configurations.
 *
 *  You can use the analysis results to verify these configurations and
 *  to troubleshoot connectivity issues.
 * @class
 * @memberof v1beta1
 */
export declare class ReachabilityServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    reachabilityServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of ReachabilityServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new ReachabilityServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets the details of a specific Connectivity Test.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. `ConnectivityTest` resource name using the form:
     *       `projects/{project_id}/locations/global/connectivityTests/{test_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.networkmanagement.v1beta1.ConnectivityTest|ConnectivityTest}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/reachability_service.get_connectivity_test.js</caption>
     * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_GetConnectivityTest_async
     */
    getConnectivityTest(request?: protos.google.cloud.networkmanagement.v1beta1.IGetConnectivityTestRequest, options?: CallOptions): Promise<[
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest,
        (protos.google.cloud.networkmanagement.v1beta1.IGetConnectivityTestRequest | undefined),
        {} | undefined
    ]>;
    getConnectivityTest(request: protos.google.cloud.networkmanagement.v1beta1.IGetConnectivityTestRequest, options: CallOptions, callback: Callback<protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest, protos.google.cloud.networkmanagement.v1beta1.IGetConnectivityTestRequest | null | undefined, {} | null | undefined>): void;
    getConnectivityTest(request: protos.google.cloud.networkmanagement.v1beta1.IGetConnectivityTestRequest, callback: Callback<protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest, protos.google.cloud.networkmanagement.v1beta1.IGetConnectivityTestRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a new Connectivity Test.
     * After you create a test, the reachability analysis is performed as part
     * of the long running operation, which completes when the analysis completes.
     *
     * If the endpoint specifications in `ConnectivityTest` are invalid
     * (for example, containing non-existent resources in the network, or you
     * don't have read permissions to the network configurations of listed
     * projects), then the reachability result returns a value of `UNKNOWN`.
     *
     * If the endpoint specifications in `ConnectivityTest` are
     * incomplete, the reachability result returns a value of
     * <code>AMBIGUOUS</code>. For more information,
     * see the Connectivity Test documentation.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource of the Connectivity Test to create:
     *       `projects/{project_id}/locations/global`
     * @param {string} request.testId
     *   Required. The logical name of the Connectivity Test in your project
     *   with the following restrictions:
     *
     *   * Must contain only lowercase letters, numbers, and hyphens.
     *   * Must start with a letter.
     *   * Must be between 1-40 characters.
     *   * Must end with a number or a letter.
     *   * Must be unique within the customer project
     * @param {google.cloud.networkmanagement.v1beta1.ConnectivityTest} request.resource
     *   Required. A `ConnectivityTest` resource
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/reachability_service.create_connectivity_test.js</caption>
     * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_CreateConnectivityTest_async
     */
    createConnectivityTest(request?: protos.google.cloud.networkmanagement.v1beta1.ICreateConnectivityTestRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest, protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createConnectivityTest(request: protos.google.cloud.networkmanagement.v1beta1.ICreateConnectivityTestRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest, protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createConnectivityTest(request: protos.google.cloud.networkmanagement.v1beta1.ICreateConnectivityTestRequest, callback: Callback<LROperation<protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest, protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createConnectivityTest()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/reachability_service.create_connectivity_test.js</caption>
     * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_CreateConnectivityTest_async
     */
    checkCreateConnectivityTestProgress(name: string): Promise<LROperation<protos.google.cloud.networkmanagement.v1beta1.ConnectivityTest, protos.google.cloud.networkmanagement.v1beta1.OperationMetadata>>;
    /**
     * Updates the configuration of an existing `ConnectivityTest`.
     * After you update a test, the reachability analysis is performed as part
     * of the long running operation, which completes when the analysis completes.
     * The Reachability state in the test resource is updated with the new result.
     *
     * If the endpoint specifications in `ConnectivityTest` are invalid
     * (for example, they contain non-existent resources in the network, or the
     * user does not have read permissions to the network configurations of
     * listed projects), then the reachability result returns a value of
     * <code>UNKNOWN</code>.
     *
     * If the endpoint specifications in `ConnectivityTest` are incomplete, the
     * reachability result returns a value of `AMBIGUOUS`. See the documentation
     * in `ConnectivityTest` for for more details.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask of fields to update. At least one path must be supplied in
     *   this field.
     * @param {google.cloud.networkmanagement.v1beta1.ConnectivityTest} request.resource
     *   Required. Only fields specified in update_mask are updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/reachability_service.update_connectivity_test.js</caption>
     * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_UpdateConnectivityTest_async
     */
    updateConnectivityTest(request?: protos.google.cloud.networkmanagement.v1beta1.IUpdateConnectivityTestRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest, protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateConnectivityTest(request: protos.google.cloud.networkmanagement.v1beta1.IUpdateConnectivityTestRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest, protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateConnectivityTest(request: protos.google.cloud.networkmanagement.v1beta1.IUpdateConnectivityTestRequest, callback: Callback<LROperation<protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest, protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateConnectivityTest()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/reachability_service.update_connectivity_test.js</caption>
     * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_UpdateConnectivityTest_async
     */
    checkUpdateConnectivityTestProgress(name: string): Promise<LROperation<protos.google.cloud.networkmanagement.v1beta1.ConnectivityTest, protos.google.cloud.networkmanagement.v1beta1.OperationMetadata>>;
    /**
     * Rerun an existing `ConnectivityTest`.
     * After the user triggers the rerun, the reachability analysis is performed
     * as part of the long running operation, which completes when the analysis
     * completes.
     *
     * Even though the test configuration remains the same, the reachability
     * result may change due to underlying network configuration changes.
     *
     * If the endpoint specifications in `ConnectivityTest` become invalid (for
     * example, specified resources are deleted in the network, or you lost
     * read permissions to the network configurations of listed projects), then
     * the reachability result returns a value of `UNKNOWN`.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Connectivity Test resource name using the form:
     *       `projects/{project_id}/locations/global/connectivityTests/{test_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/reachability_service.rerun_connectivity_test.js</caption>
     * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_RerunConnectivityTest_async
     */
    rerunConnectivityTest(request?: protos.google.cloud.networkmanagement.v1beta1.IRerunConnectivityTestRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest, protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    rerunConnectivityTest(request: protos.google.cloud.networkmanagement.v1beta1.IRerunConnectivityTestRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest, protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    rerunConnectivityTest(request: protos.google.cloud.networkmanagement.v1beta1.IRerunConnectivityTestRequest, callback: Callback<LROperation<protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest, protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `rerunConnectivityTest()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/reachability_service.rerun_connectivity_test.js</caption>
     * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_RerunConnectivityTest_async
     */
    checkRerunConnectivityTestProgress(name: string): Promise<LROperation<protos.google.cloud.networkmanagement.v1beta1.ConnectivityTest, protos.google.cloud.networkmanagement.v1beta1.OperationMetadata>>;
    /**
     * Deletes a specific `ConnectivityTest`.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Connectivity Test resource name using the form:
     *       `projects/{project_id}/locations/global/connectivityTests/{test_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/reachability_service.delete_connectivity_test.js</caption>
     * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_DeleteConnectivityTest_async
     */
    deleteConnectivityTest(request?: protos.google.cloud.networkmanagement.v1beta1.IDeleteConnectivityTestRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteConnectivityTest(request: protos.google.cloud.networkmanagement.v1beta1.IDeleteConnectivityTestRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteConnectivityTest(request: protos.google.cloud.networkmanagement.v1beta1.IDeleteConnectivityTestRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.networkmanagement.v1beta1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteConnectivityTest()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/reachability_service.delete_connectivity_test.js</caption>
     * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_DeleteConnectivityTest_async
     */
    checkDeleteConnectivityTestProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.networkmanagement.v1beta1.OperationMetadata>>;
    /**
     * Lists all Connectivity Tests owned by a project.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource of the Connectivity Tests:
     *       `projects/{project_id}/locations/global`
     * @param {number} request.pageSize
     *   Number of `ConnectivityTests` to return.
     * @param {string} request.pageToken
     *   Page token from an earlier query, as returned in `next_page_token`.
     * @param {string} request.filter
     *   Lists the `ConnectivityTests` that match the filter expression. A filter
     *   expression filters the resources listed in the response. The expression
     *   must be of the form `<field> <operator> <value>` where operators: `<`, `>`,
     *   `<=`,
     *   `>=`,
     *   `!=`, `=`, `:` are supported (colon `:` represents a HAS operator which is
     *   roughly synonymous with equality). <field> can refer to a proto or JSON
     *   field, or a synthetic field. Field names can be camelCase or snake_case.
     *
     *   Examples:
     *   - Filter by name:
     *     name = "projects/proj-1/locations/global/connectivityTests/test-1
     *
     *   - Filter by labels:
     *     - Resources that have a key called `foo`
     *       labels.foo:*
     *     - Resources that have a key called `foo` whose value is `bar`
     *       labels.foo = bar
     * @param {string} request.orderBy
     *   Field to use to sort the list.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.networkmanagement.v1beta1.ConnectivityTest|ConnectivityTest}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listConnectivityTestsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listConnectivityTests(request?: protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest[],
        protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest | null,
        protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsResponse
    ]>;
    listConnectivityTests(request: protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest, protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsResponse | null | undefined, protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest>): void;
    listConnectivityTests(request: protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest, callback: PaginationCallback<protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest, protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsResponse | null | undefined, protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource of the Connectivity Tests:
     *       `projects/{project_id}/locations/global`
     * @param {number} request.pageSize
     *   Number of `ConnectivityTests` to return.
     * @param {string} request.pageToken
     *   Page token from an earlier query, as returned in `next_page_token`.
     * @param {string} request.filter
     *   Lists the `ConnectivityTests` that match the filter expression. A filter
     *   expression filters the resources listed in the response. The expression
     *   must be of the form `<field> <operator> <value>` where operators: `<`, `>`,
     *   `<=`,
     *   `>=`,
     *   `!=`, `=`, `:` are supported (colon `:` represents a HAS operator which is
     *   roughly synonymous with equality). <field> can refer to a proto or JSON
     *   field, or a synthetic field. Field names can be camelCase or snake_case.
     *
     *   Examples:
     *   - Filter by name:
     *     name = "projects/proj-1/locations/global/connectivityTests/test-1
     *
     *   - Filter by labels:
     *     - Resources that have a key called `foo`
     *       labels.foo:*
     *     - Resources that have a key called `foo` whose value is `bar`
     *       labels.foo = bar
     * @param {string} request.orderBy
     *   Field to use to sort the list.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.networkmanagement.v1beta1.ConnectivityTest|ConnectivityTest} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listConnectivityTestsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listConnectivityTestsStream(request?: protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listConnectivityTests`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent resource of the Connectivity Tests:
     *       `projects/{project_id}/locations/global`
     * @param {number} request.pageSize
     *   Number of `ConnectivityTests` to return.
     * @param {string} request.pageToken
     *   Page token from an earlier query, as returned in `next_page_token`.
     * @param {string} request.filter
     *   Lists the `ConnectivityTests` that match the filter expression. A filter
     *   expression filters the resources listed in the response. The expression
     *   must be of the form `<field> <operator> <value>` where operators: `<`, `>`,
     *   `<=`,
     *   `>=`,
     *   `!=`, `=`, `:` are supported (colon `:` represents a HAS operator which is
     *   roughly synonymous with equality). <field> can refer to a proto or JSON
     *   field, or a synthetic field. Field names can be camelCase or snake_case.
     *
     *   Examples:
     *   - Filter by name:
     *     name = "projects/proj-1/locations/global/connectivityTests/test-1
     *
     *   - Filter by labels:
     *     - Resources that have a key called `foo`
     *       labels.foo:*
     *     - Resources that have a key called `foo` whose value is `bar`
     *       labels.foo = bar
     * @param {string} request.orderBy
     *   Field to use to sort the list.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.networkmanagement.v1beta1.ConnectivityTest|ConnectivityTest}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/reachability_service.list_connectivity_tests.js</caption>
     * region_tag:networkmanagement_v1beta1_generated_ReachabilityService_ListConnectivityTests_async
     */
    listConnectivityTestsAsync(request?: protos.google.cloud.networkmanagement.v1beta1.IListConnectivityTestsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.networkmanagement.v1beta1.IConnectivityTest>;
    /**
     * Return a fully-qualified connectivityTest resource name string.
     *
     * @param {string} project
     * @param {string} test
     * @returns {string} Resource name string.
     */
    connectivityTestPath(project: string, test: string): string;
    /**
     * Parse the project from ConnectivityTest resource.
     *
     * @param {string} connectivityTestName
     *   A fully-qualified path representing ConnectivityTest resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromConnectivityTestName(connectivityTestName: string): string | number;
    /**
     * Parse the test from ConnectivityTest resource.
     *
     * @param {string} connectivityTestName
     *   A fully-qualified path representing ConnectivityTest resource.
     * @returns {string} A string representing the test.
     */
    matchTestFromConnectivityTestName(connectivityTestName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}

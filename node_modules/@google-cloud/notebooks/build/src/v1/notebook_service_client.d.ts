/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, IamClient, IamProtos, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  API v1 service for Cloud AI Platform Notebooks.
 * @class
 * @memberof v1
 */
export declare class NotebookServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    iamClient: IamClient;
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    notebookServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of NotebookServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new NotebookServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets details of a single Instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.notebooks.v1.Instance|Instance}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.get_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_GetInstance_async
     */
    getInstance(request?: protos.google.cloud.notebooks.v1.IGetInstanceRequest, options?: CallOptions): Promise<[
        protos.google.cloud.notebooks.v1.IInstance,
        protos.google.cloud.notebooks.v1.IGetInstanceRequest | undefined,
        {} | undefined
    ]>;
    getInstance(request: protos.google.cloud.notebooks.v1.IGetInstanceRequest, options: CallOptions, callback: Callback<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IGetInstanceRequest | null | undefined, {} | null | undefined>): void;
    getInstance(request: protos.google.cloud.notebooks.v1.IGetInstanceRequest, callback: Callback<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IGetInstanceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Add/update metadata items for an instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {number[]} request.items
     *   Metadata items to add/update for the instance.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.notebooks.v1.UpdateInstanceMetadataItemsResponse|UpdateInstanceMetadataItemsResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.update_instance_metadata_items.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_UpdateInstanceMetadataItems_async
     */
    updateInstanceMetadataItems(request?: protos.google.cloud.notebooks.v1.IUpdateInstanceMetadataItemsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.notebooks.v1.IUpdateInstanceMetadataItemsResponse,
        (protos.google.cloud.notebooks.v1.IUpdateInstanceMetadataItemsRequest | undefined),
        {} | undefined
    ]>;
    updateInstanceMetadataItems(request: protos.google.cloud.notebooks.v1.IUpdateInstanceMetadataItemsRequest, options: CallOptions, callback: Callback<protos.google.cloud.notebooks.v1.IUpdateInstanceMetadataItemsResponse, protos.google.cloud.notebooks.v1.IUpdateInstanceMetadataItemsRequest | null | undefined, {} | null | undefined>): void;
    updateInstanceMetadataItems(request: protos.google.cloud.notebooks.v1.IUpdateInstanceMetadataItemsRequest, callback: Callback<protos.google.cloud.notebooks.v1.IUpdateInstanceMetadataItemsResponse, protos.google.cloud.notebooks.v1.IUpdateInstanceMetadataItemsRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Check if a notebook instance is upgradable.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.notebookInstance
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {google.cloud.notebooks.v1.UpgradeType} [request.type]
     *   Optional. The optional UpgradeType. Setting this field will search for additional
     *   compute images to upgrade this instance.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.notebooks.v1.IsInstanceUpgradeableResponse|IsInstanceUpgradeableResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.is_instance_upgradeable.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_IsInstanceUpgradeable_async
     */
    isInstanceUpgradeable(request?: protos.google.cloud.notebooks.v1.IIsInstanceUpgradeableRequest, options?: CallOptions): Promise<[
        protos.google.cloud.notebooks.v1.IIsInstanceUpgradeableResponse,
        (protos.google.cloud.notebooks.v1.IIsInstanceUpgradeableRequest | undefined),
        {} | undefined
    ]>;
    isInstanceUpgradeable(request: protos.google.cloud.notebooks.v1.IIsInstanceUpgradeableRequest, options: CallOptions, callback: Callback<protos.google.cloud.notebooks.v1.IIsInstanceUpgradeableResponse, protos.google.cloud.notebooks.v1.IIsInstanceUpgradeableRequest | null | undefined, {} | null | undefined>): void;
    isInstanceUpgradeable(request: protos.google.cloud.notebooks.v1.IIsInstanceUpgradeableRequest, callback: Callback<protos.google.cloud.notebooks.v1.IIsInstanceUpgradeableResponse, protos.google.cloud.notebooks.v1.IIsInstanceUpgradeableRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Check if a notebook instance is healthy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.notebooks.v1.GetInstanceHealthResponse|GetInstanceHealthResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.get_instance_health.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_GetInstanceHealth_async
     */
    getInstanceHealth(request?: protos.google.cloud.notebooks.v1.IGetInstanceHealthRequest, options?: CallOptions): Promise<[
        protos.google.cloud.notebooks.v1.IGetInstanceHealthResponse,
        protos.google.cloud.notebooks.v1.IGetInstanceHealthRequest | undefined,
        {} | undefined
    ]>;
    getInstanceHealth(request: protos.google.cloud.notebooks.v1.IGetInstanceHealthRequest, options: CallOptions, callback: Callback<protos.google.cloud.notebooks.v1.IGetInstanceHealthResponse, protos.google.cloud.notebooks.v1.IGetInstanceHealthRequest | null | undefined, {} | null | undefined>): void;
    getInstanceHealth(request: protos.google.cloud.notebooks.v1.IGetInstanceHealthRequest, callback: Callback<protos.google.cloud.notebooks.v1.IGetInstanceHealthResponse, protos.google.cloud.notebooks.v1.IGetInstanceHealthRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets details of a single Environment.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/environments/{environment_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.notebooks.v1.Environment|Environment}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.get_environment.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_GetEnvironment_async
     */
    getEnvironment(request?: protos.google.cloud.notebooks.v1.IGetEnvironmentRequest, options?: CallOptions): Promise<[
        protos.google.cloud.notebooks.v1.IEnvironment,
        protos.google.cloud.notebooks.v1.IGetEnvironmentRequest | undefined,
        {} | undefined
    ]>;
    getEnvironment(request: protos.google.cloud.notebooks.v1.IGetEnvironmentRequest, options: CallOptions, callback: Callback<protos.google.cloud.notebooks.v1.IEnvironment, protos.google.cloud.notebooks.v1.IGetEnvironmentRequest | null | undefined, {} | null | undefined>): void;
    getEnvironment(request: protos.google.cloud.notebooks.v1.IGetEnvironmentRequest, callback: Callback<protos.google.cloud.notebooks.v1.IEnvironment, protos.google.cloud.notebooks.v1.IGetEnvironmentRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets details of schedule
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.notebooks.v1.Schedule|Schedule}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.get_schedule.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_GetSchedule_async
     */
    getSchedule(request?: protos.google.cloud.notebooks.v1.IGetScheduleRequest, options?: CallOptions): Promise<[
        protos.google.cloud.notebooks.v1.ISchedule,
        protos.google.cloud.notebooks.v1.IGetScheduleRequest | undefined,
        {} | undefined
    ]>;
    getSchedule(request: protos.google.cloud.notebooks.v1.IGetScheduleRequest, options: CallOptions, callback: Callback<protos.google.cloud.notebooks.v1.ISchedule, protos.google.cloud.notebooks.v1.IGetScheduleRequest | null | undefined, {} | null | undefined>): void;
    getSchedule(request: protos.google.cloud.notebooks.v1.IGetScheduleRequest, callback: Callback<protos.google.cloud.notebooks.v1.ISchedule, protos.google.cloud.notebooks.v1.IGetScheduleRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets details of executions
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/executions/{execution_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.notebooks.v1.Execution|Execution}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.get_execution.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_GetExecution_async
     */
    getExecution(request?: protos.google.cloud.notebooks.v1.IGetExecutionRequest, options?: CallOptions): Promise<[
        protos.google.cloud.notebooks.v1.IExecution,
        protos.google.cloud.notebooks.v1.IGetExecutionRequest | undefined,
        {} | undefined
    ]>;
    getExecution(request: protos.google.cloud.notebooks.v1.IGetExecutionRequest, options: CallOptions, callback: Callback<protos.google.cloud.notebooks.v1.IExecution, protos.google.cloud.notebooks.v1.IGetExecutionRequest | null | undefined, {} | null | undefined>): void;
    getExecution(request: protos.google.cloud.notebooks.v1.IGetExecutionRequest, callback: Callback<protos.google.cloud.notebooks.v1.IExecution, protos.google.cloud.notebooks.v1.IGetExecutionRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a new Instance in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `parent=projects/{project_id}/locations/{location}`
     * @param {string} request.instanceId
     *   Required. User-defined unique ID of this instance.
     * @param {google.cloud.notebooks.v1.Instance} request.instance
     *   Required. The instance to be created.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.create_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_CreateInstance_async
     */
    createInstance(request?: protos.google.cloud.notebooks.v1.ICreateInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createInstance(request: protos.google.cloud.notebooks.v1.ICreateInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createInstance(request: protos.google.cloud.notebooks.v1.ICreateInstanceRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.create_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_CreateInstance_async
     */
    checkCreateInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Instance, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Registers an existing legacy notebook instance to the Notebooks API server.
     * Legacy instances are instances created with the legacy Compute Engine
     * calls. They are not manageable by the Notebooks API out of the box. This
     * call makes these instances manageable by the Notebooks API.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `parent=projects/{project_id}/locations/{location}`
     * @param {string} request.instanceId
     *   Required. User defined unique ID of this instance. The `instance_id` must
     *   be 1 to 63 characters long and contain only lowercase letters,
     *   numeric characters, and dashes. The first character must be a lowercase
     *   letter and the last character cannot be a dash.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.register_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_RegisterInstance_async
     */
    registerInstance(request?: protos.google.cloud.notebooks.v1.IRegisterInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    registerInstance(request: protos.google.cloud.notebooks.v1.IRegisterInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    registerInstance(request: protos.google.cloud.notebooks.v1.IRegisterInstanceRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `registerInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.register_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_RegisterInstance_async
     */
    checkRegisterInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Instance, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Updates the guest accelerators of a single Instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {google.cloud.notebooks.v1.Instance.AcceleratorType} request.type
     *   Required. Type of this accelerator.
     * @param {number} request.coreCount
     *   Required. Count of cores of this accelerator. Note that not all combinations
     *   of `type` and `core_count` are valid. Check [GPUs on
     *   Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to
     *   find a valid combination. TPUs are not supported.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.set_instance_accelerator.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_SetInstanceAccelerator_async
     */
    setInstanceAccelerator(request?: protos.google.cloud.notebooks.v1.ISetInstanceAcceleratorRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    setInstanceAccelerator(request: protos.google.cloud.notebooks.v1.ISetInstanceAcceleratorRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    setInstanceAccelerator(request: protos.google.cloud.notebooks.v1.ISetInstanceAcceleratorRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `setInstanceAccelerator()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.set_instance_accelerator.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_SetInstanceAccelerator_async
     */
    checkSetInstanceAcceleratorProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Instance, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Updates the machine type of a single Instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {string} request.machineType
     *   Required. The [Compute Engine machine
     *   type](https://cloud.google.com/compute/docs/machine-types).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.set_instance_machine_type.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_SetInstanceMachineType_async
     */
    setInstanceMachineType(request?: protos.google.cloud.notebooks.v1.ISetInstanceMachineTypeRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    setInstanceMachineType(request: protos.google.cloud.notebooks.v1.ISetInstanceMachineTypeRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    setInstanceMachineType(request: protos.google.cloud.notebooks.v1.ISetInstanceMachineTypeRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `setInstanceMachineType()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.set_instance_machine_type.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_SetInstanceMachineType_async
     */
    checkSetInstanceMachineTypeProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Instance, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Update Notebook Instance configurations.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {google.cloud.notebooks.v1.InstanceConfig} request.config
     *   The instance configurations to be updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.update_instance_config.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_UpdateInstanceConfig_async
     */
    updateInstanceConfig(request?: protos.google.cloud.notebooks.v1.IUpdateInstanceConfigRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateInstanceConfig(request: protos.google.cloud.notebooks.v1.IUpdateInstanceConfigRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateInstanceConfig(request: protos.google.cloud.notebooks.v1.IUpdateInstanceConfigRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateInstanceConfig()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.update_instance_config.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_UpdateInstanceConfig_async
     */
    checkUpdateInstanceConfigProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Instance, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Updates the Shielded instance configuration of a single Instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {google.cloud.notebooks.v1.Instance.ShieldedInstanceConfig} request.shieldedInstanceConfig
     *   ShieldedInstance configuration to be updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.update_shielded_instance_config.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_UpdateShieldedInstanceConfig_async
     */
    updateShieldedInstanceConfig(request?: protos.google.cloud.notebooks.v1.IUpdateShieldedInstanceConfigRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateShieldedInstanceConfig(request: protos.google.cloud.notebooks.v1.IUpdateShieldedInstanceConfigRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateShieldedInstanceConfig(request: protos.google.cloud.notebooks.v1.IUpdateShieldedInstanceConfigRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateShieldedInstanceConfig()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.update_shielded_instance_config.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_UpdateShieldedInstanceConfig_async
     */
    checkUpdateShieldedInstanceConfigProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Instance, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Replaces all the labels of an Instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {number[]} request.labels
     *   Labels to apply to this instance.
     *   These can be later modified by the setLabels method
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.set_instance_labels.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_SetInstanceLabels_async
     */
    setInstanceLabels(request?: protos.google.cloud.notebooks.v1.ISetInstanceLabelsRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    setInstanceLabels(request: protos.google.cloud.notebooks.v1.ISetInstanceLabelsRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    setInstanceLabels(request: protos.google.cloud.notebooks.v1.ISetInstanceLabelsRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `setInstanceLabels()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.set_instance_labels.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_SetInstanceLabels_async
     */
    checkSetInstanceLabelsProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Instance, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Deletes a single Instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.delete_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_DeleteInstance_async
     */
    deleteInstance(request?: protos.google.cloud.notebooks.v1.IDeleteInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteInstance(request: protos.google.cloud.notebooks.v1.IDeleteInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteInstance(request: protos.google.cloud.notebooks.v1.IDeleteInstanceRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.delete_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_DeleteInstance_async
     */
    checkDeleteInstanceProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Starts a notebook instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.start_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_StartInstance_async
     */
    startInstance(request?: protos.google.cloud.notebooks.v1.IStartInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    startInstance(request: protos.google.cloud.notebooks.v1.IStartInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    startInstance(request: protos.google.cloud.notebooks.v1.IStartInstanceRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `startInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.start_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_StartInstance_async
     */
    checkStartInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Instance, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Stops a notebook instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.stop_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_StopInstance_async
     */
    stopInstance(request?: protos.google.cloud.notebooks.v1.IStopInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    stopInstance(request: protos.google.cloud.notebooks.v1.IStopInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    stopInstance(request: protos.google.cloud.notebooks.v1.IStopInstanceRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `stopInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.stop_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_StopInstance_async
     */
    checkStopInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Instance, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Resets a notebook instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.reset_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_ResetInstance_async
     */
    resetInstance(request?: protos.google.cloud.notebooks.v1.IResetInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    resetInstance(request: protos.google.cloud.notebooks.v1.IResetInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    resetInstance(request: protos.google.cloud.notebooks.v1.IResetInstanceRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `resetInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.reset_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_ResetInstance_async
     */
    checkResetInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Instance, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Allows notebook instances to
     * report their latest instance information to the Notebooks
     * API server. The server will merge the reported information to
     * the instance metadata store. Do not use this method directly.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {string} request.vmId
     *   Required. The VM hardware token for authenticating the VM.
     *   https://cloud.google.com/compute/docs/instances/verifying-instance-identity
     * @param {number[]} request.metadata
     *   The metadata reported to Notebooks API. This will be merged to the instance
     *   metadata store
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.report_instance_info.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_ReportInstanceInfo_async
     */
    reportInstanceInfo(request?: protos.google.cloud.notebooks.v1.IReportInstanceInfoRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    reportInstanceInfo(request: protos.google.cloud.notebooks.v1.IReportInstanceInfoRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    reportInstanceInfo(request: protos.google.cloud.notebooks.v1.IReportInstanceInfoRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `reportInstanceInfo()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.report_instance_info.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_ReportInstanceInfo_async
     */
    checkReportInstanceInfoProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Instance, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Upgrades a notebook instance to the latest version.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {google.cloud.notebooks.v1.UpgradeType} [request.type]
     *   Optional. The optional UpgradeType. Setting this field will search for additional
     *   compute images to upgrade this instance.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.upgrade_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_UpgradeInstance_async
     */
    upgradeInstance(request?: protos.google.cloud.notebooks.v1.IUpgradeInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    upgradeInstance(request: protos.google.cloud.notebooks.v1.IUpgradeInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    upgradeInstance(request: protos.google.cloud.notebooks.v1.IUpgradeInstanceRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `upgradeInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.upgrade_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_UpgradeInstance_async
     */
    checkUpgradeInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Instance, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Rollbacks a notebook instance to the previous version.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {string} request.targetSnapshot
     *   Required. The snapshot for rollback.
     *   Example: `projects/test-project/global/snapshots/krwlzipynril`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.rollback_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_RollbackInstance_async
     */
    rollbackInstance(request?: protos.google.cloud.notebooks.v1.IRollbackInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    rollbackInstance(request: protos.google.cloud.notebooks.v1.IRollbackInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    rollbackInstance(request: protos.google.cloud.notebooks.v1.IRollbackInstanceRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `rollbackInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.rollback_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_RollbackInstance_async
     */
    checkRollbackInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Instance, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Creates a Diagnostic File and runs Diagnostic Tool given an Instance.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {google.cloud.notebooks.v1.DiagnosticConfig} request.diagnosticConfig
     *   Required. Defines flags that are used to run the diagnostic tool
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.diagnose_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_DiagnoseInstance_async
     */
    diagnoseInstance(request?: protos.google.cloud.notebooks.v1.IDiagnoseInstanceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    diagnoseInstance(request: protos.google.cloud.notebooks.v1.IDiagnoseInstanceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    diagnoseInstance(request: protos.google.cloud.notebooks.v1.IDiagnoseInstanceRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `diagnoseInstance()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.diagnose_instance.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_DiagnoseInstance_async
     */
    checkDiagnoseInstanceProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Instance, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Allows notebook instances to
     * call this endpoint to upgrade themselves. Do not use this method directly.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/instances/{instance_id}`
     * @param {string} request.vmId
     *   Required. The VM hardware token for authenticating the VM.
     *   https://cloud.google.com/compute/docs/instances/verifying-instance-identity
     * @param {google.cloud.notebooks.v1.UpgradeType} [request.type]
     *   Optional. The optional UpgradeType. Setting this field will search for additional
     *   compute images to upgrade this instance.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.upgrade_instance_internal.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_UpgradeInstanceInternal_async
     */
    upgradeInstanceInternal(request?: protos.google.cloud.notebooks.v1.IUpgradeInstanceInternalRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    upgradeInstanceInternal(request: protos.google.cloud.notebooks.v1.IUpgradeInstanceInternalRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    upgradeInstanceInternal(request: protos.google.cloud.notebooks.v1.IUpgradeInstanceInternalRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IInstance, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `upgradeInstanceInternal()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.upgrade_instance_internal.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_UpgradeInstanceInternal_async
     */
    checkUpgradeInstanceInternalProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Instance, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Creates a new Environment.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format: `projects/{project_id}/locations/{location}`
     * @param {string} request.environmentId
     *   Required. User-defined unique ID of this environment. The `environment_id` must
     *   be 1 to 63 characters long and contain only lowercase letters,
     *   numeric characters, and dashes. The first character must be a lowercase
     *   letter and the last character cannot be a dash.
     * @param {google.cloud.notebooks.v1.Environment} request.environment
     *   Required. The environment to be created.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.create_environment.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_CreateEnvironment_async
     */
    createEnvironment(request?: protos.google.cloud.notebooks.v1.ICreateEnvironmentRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IEnvironment, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createEnvironment(request: protos.google.cloud.notebooks.v1.ICreateEnvironmentRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IEnvironment, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createEnvironment(request: protos.google.cloud.notebooks.v1.ICreateEnvironmentRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IEnvironment, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createEnvironment()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.create_environment.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_CreateEnvironment_async
     */
    checkCreateEnvironmentProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Environment, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Deletes a single Environment.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/environments/{environment_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.delete_environment.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_DeleteEnvironment_async
     */
    deleteEnvironment(request?: protos.google.cloud.notebooks.v1.IDeleteEnvironmentRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteEnvironment(request: protos.google.cloud.notebooks.v1.IDeleteEnvironmentRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteEnvironment(request: protos.google.cloud.notebooks.v1.IDeleteEnvironmentRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteEnvironment()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.delete_environment.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_DeleteEnvironment_async
     */
    checkDeleteEnvironmentProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Deletes schedule and all underlying jobs
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.delete_schedule.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_DeleteSchedule_async
     */
    deleteSchedule(request?: protos.google.cloud.notebooks.v1.IDeleteScheduleRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteSchedule(request: protos.google.cloud.notebooks.v1.IDeleteScheduleRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteSchedule(request: protos.google.cloud.notebooks.v1.IDeleteScheduleRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteSchedule()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.delete_schedule.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_DeleteSchedule_async
     */
    checkDeleteScheduleProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Creates a new Scheduled Notebook in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `parent=projects/{project_id}/locations/{location}`
     * @param {string} request.scheduleId
     *   Required. User-defined unique ID of this schedule.
     * @param {google.cloud.notebooks.v1.Schedule} request.schedule
     *   Required. The schedule to be created.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.create_schedule.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_CreateSchedule_async
     */
    createSchedule(request?: protos.google.cloud.notebooks.v1.ICreateScheduleRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.ISchedule, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createSchedule(request: protos.google.cloud.notebooks.v1.ICreateScheduleRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.ISchedule, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createSchedule(request: protos.google.cloud.notebooks.v1.ICreateScheduleRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.ISchedule, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createSchedule()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.create_schedule.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_CreateSchedule_async
     */
    checkCreateScheduleProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Schedule, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Triggers execution of an existing schedule.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `parent=projects/{project_id}/locations/{location}/schedules/{schedule_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.trigger_schedule.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_TriggerSchedule_async
     */
    triggerSchedule(request?: protos.google.cloud.notebooks.v1.ITriggerScheduleRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.ISchedule, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    triggerSchedule(request: protos.google.cloud.notebooks.v1.ITriggerScheduleRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.ISchedule, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    triggerSchedule(request: protos.google.cloud.notebooks.v1.ITriggerScheduleRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.ISchedule, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `triggerSchedule()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.trigger_schedule.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_TriggerSchedule_async
     */
    checkTriggerScheduleProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Schedule, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Deletes execution
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Format:
     *   `projects/{project_id}/locations/{location}/executions/{execution_id}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.delete_execution.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_DeleteExecution_async
     */
    deleteExecution(request?: protos.google.cloud.notebooks.v1.IDeleteExecutionRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteExecution(request: protos.google.cloud.notebooks.v1.IDeleteExecutionRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteExecution(request: protos.google.cloud.notebooks.v1.IDeleteExecutionRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteExecution()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.delete_execution.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_DeleteExecution_async
     */
    checkDeleteExecutionProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Creates a new Execution in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `parent=projects/{project_id}/locations/{location}`
     * @param {string} request.executionId
     *   Required. User-defined unique ID of this execution.
     * @param {google.cloud.notebooks.v1.Execution} request.execution
     *   Required. The execution to be created.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.create_execution.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_CreateExecution_async
     */
    createExecution(request?: protos.google.cloud.notebooks.v1.ICreateExecutionRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.notebooks.v1.IExecution, protos.google.cloud.notebooks.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createExecution(request: protos.google.cloud.notebooks.v1.ICreateExecutionRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IExecution, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createExecution(request: protos.google.cloud.notebooks.v1.ICreateExecutionRequest, callback: Callback<LROperation<protos.google.cloud.notebooks.v1.IExecution, protos.google.cloud.notebooks.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createExecution()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.create_execution.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_CreateExecution_async
     */
    checkCreateExecutionProgress(name: string): Promise<LROperation<protos.google.cloud.notebooks.v1.Execution, protos.google.cloud.notebooks.v1.OperationMetadata>>;
    /**
     * Lists instances in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `parent=projects/{project_id}/locations/{location}`
     * @param {number} request.pageSize
     *   Maximum return size of the list call.
     * @param {string} request.pageToken
     *   A previous returned page token that can be used to continue listing
     *   from the last result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.notebooks.v1.Instance|Instance}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listInstancesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listInstances(request?: protos.google.cloud.notebooks.v1.IListInstancesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.notebooks.v1.IInstance[],
        protos.google.cloud.notebooks.v1.IListInstancesRequest | null,
        protos.google.cloud.notebooks.v1.IListInstancesResponse
    ]>;
    listInstances(request: protos.google.cloud.notebooks.v1.IListInstancesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.notebooks.v1.IListInstancesRequest, protos.google.cloud.notebooks.v1.IListInstancesResponse | null | undefined, protos.google.cloud.notebooks.v1.IInstance>): void;
    listInstances(request: protos.google.cloud.notebooks.v1.IListInstancesRequest, callback: PaginationCallback<protos.google.cloud.notebooks.v1.IListInstancesRequest, protos.google.cloud.notebooks.v1.IListInstancesResponse | null | undefined, protos.google.cloud.notebooks.v1.IInstance>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `parent=projects/{project_id}/locations/{location}`
     * @param {number} request.pageSize
     *   Maximum return size of the list call.
     * @param {string} request.pageToken
     *   A previous returned page token that can be used to continue listing
     *   from the last result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.notebooks.v1.Instance|Instance} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listInstancesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listInstancesStream(request?: protos.google.cloud.notebooks.v1.IListInstancesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listInstances`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `parent=projects/{project_id}/locations/{location}`
     * @param {number} request.pageSize
     *   Maximum return size of the list call.
     * @param {string} request.pageToken
     *   A previous returned page token that can be used to continue listing
     *   from the last result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.notebooks.v1.Instance|Instance}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.list_instances.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_ListInstances_async
     */
    listInstancesAsync(request?: protos.google.cloud.notebooks.v1.IListInstancesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.notebooks.v1.IInstance>;
    /**
     * Lists environments in a project.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format: `projects/{project_id}/locations/{location}`
     * @param {number} request.pageSize
     *   Maximum return size of the list call.
     * @param {string} request.pageToken
     *   A previous returned page token that can be used to continue listing from
     *   the last result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.notebooks.v1.Environment|Environment}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listEnvironmentsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listEnvironments(request?: protos.google.cloud.notebooks.v1.IListEnvironmentsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.notebooks.v1.IEnvironment[],
        protos.google.cloud.notebooks.v1.IListEnvironmentsRequest | null,
        protos.google.cloud.notebooks.v1.IListEnvironmentsResponse
    ]>;
    listEnvironments(request: protos.google.cloud.notebooks.v1.IListEnvironmentsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.notebooks.v1.IListEnvironmentsRequest, protos.google.cloud.notebooks.v1.IListEnvironmentsResponse | null | undefined, protos.google.cloud.notebooks.v1.IEnvironment>): void;
    listEnvironments(request: protos.google.cloud.notebooks.v1.IListEnvironmentsRequest, callback: PaginationCallback<protos.google.cloud.notebooks.v1.IListEnvironmentsRequest, protos.google.cloud.notebooks.v1.IListEnvironmentsResponse | null | undefined, protos.google.cloud.notebooks.v1.IEnvironment>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format: `projects/{project_id}/locations/{location}`
     * @param {number} request.pageSize
     *   Maximum return size of the list call.
     * @param {string} request.pageToken
     *   A previous returned page token that can be used to continue listing from
     *   the last result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.notebooks.v1.Environment|Environment} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listEnvironmentsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listEnvironmentsStream(request?: protos.google.cloud.notebooks.v1.IListEnvironmentsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listEnvironments`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format: `projects/{project_id}/locations/{location}`
     * @param {number} request.pageSize
     *   Maximum return size of the list call.
     * @param {string} request.pageToken
     *   A previous returned page token that can be used to continue listing from
     *   the last result.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.notebooks.v1.Environment|Environment}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.list_environments.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_ListEnvironments_async
     */
    listEnvironmentsAsync(request?: protos.google.cloud.notebooks.v1.IListEnvironmentsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.notebooks.v1.IEnvironment>;
    /**
     * Lists schedules in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `parent=projects/{project_id}/locations/{location}`
     * @param {number} request.pageSize
     *   Maximum return size of the list call.
     * @param {string} request.pageToken
     *   A previous returned page token that can be used to continue listing
     *   from the last result.
     * @param {string} request.filter
     *   Filter applied to resulting schedules.
     * @param {string} request.orderBy
     *   Field to order results by.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.notebooks.v1.Schedule|Schedule}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listSchedulesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSchedules(request?: protos.google.cloud.notebooks.v1.IListSchedulesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.notebooks.v1.ISchedule[],
        protos.google.cloud.notebooks.v1.IListSchedulesRequest | null,
        protos.google.cloud.notebooks.v1.IListSchedulesResponse
    ]>;
    listSchedules(request: protos.google.cloud.notebooks.v1.IListSchedulesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.notebooks.v1.IListSchedulesRequest, protos.google.cloud.notebooks.v1.IListSchedulesResponse | null | undefined, protos.google.cloud.notebooks.v1.ISchedule>): void;
    listSchedules(request: protos.google.cloud.notebooks.v1.IListSchedulesRequest, callback: PaginationCallback<protos.google.cloud.notebooks.v1.IListSchedulesRequest, protos.google.cloud.notebooks.v1.IListSchedulesResponse | null | undefined, protos.google.cloud.notebooks.v1.ISchedule>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `parent=projects/{project_id}/locations/{location}`
     * @param {number} request.pageSize
     *   Maximum return size of the list call.
     * @param {string} request.pageToken
     *   A previous returned page token that can be used to continue listing
     *   from the last result.
     * @param {string} request.filter
     *   Filter applied to resulting schedules.
     * @param {string} request.orderBy
     *   Field to order results by.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.notebooks.v1.Schedule|Schedule} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listSchedulesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSchedulesStream(request?: protos.google.cloud.notebooks.v1.IListSchedulesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listSchedules`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `parent=projects/{project_id}/locations/{location}`
     * @param {number} request.pageSize
     *   Maximum return size of the list call.
     * @param {string} request.pageToken
     *   A previous returned page token that can be used to continue listing
     *   from the last result.
     * @param {string} request.filter
     *   Filter applied to resulting schedules.
     * @param {string} request.orderBy
     *   Field to order results by.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.notebooks.v1.Schedule|Schedule}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.list_schedules.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_ListSchedules_async
     */
    listSchedulesAsync(request?: protos.google.cloud.notebooks.v1.IListSchedulesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.notebooks.v1.ISchedule>;
    /**
     * Lists executions in a given project and location
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `parent=projects/{project_id}/locations/{location}`
     * @param {number} request.pageSize
     *   Maximum return size of the list call.
     * @param {string} request.pageToken
     *   A previous returned page token that can be used to continue listing
     *   from the last result.
     * @param {string} request.filter
     *   Filter applied to resulting executions. Currently only supports filtering
     *   executions by a specified `schedule_id`.
     *   Format: `schedule_id=<Schedule_ID>`
     * @param {string} request.orderBy
     *   Sort by field.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.notebooks.v1.Execution|Execution}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listExecutionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listExecutions(request?: protos.google.cloud.notebooks.v1.IListExecutionsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.notebooks.v1.IExecution[],
        protos.google.cloud.notebooks.v1.IListExecutionsRequest | null,
        protos.google.cloud.notebooks.v1.IListExecutionsResponse
    ]>;
    listExecutions(request: protos.google.cloud.notebooks.v1.IListExecutionsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.notebooks.v1.IListExecutionsRequest, protos.google.cloud.notebooks.v1.IListExecutionsResponse | null | undefined, protos.google.cloud.notebooks.v1.IExecution>): void;
    listExecutions(request: protos.google.cloud.notebooks.v1.IListExecutionsRequest, callback: PaginationCallback<protos.google.cloud.notebooks.v1.IListExecutionsRequest, protos.google.cloud.notebooks.v1.IListExecutionsResponse | null | undefined, protos.google.cloud.notebooks.v1.IExecution>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `parent=projects/{project_id}/locations/{location}`
     * @param {number} request.pageSize
     *   Maximum return size of the list call.
     * @param {string} request.pageToken
     *   A previous returned page token that can be used to continue listing
     *   from the last result.
     * @param {string} request.filter
     *   Filter applied to resulting executions. Currently only supports filtering
     *   executions by a specified `schedule_id`.
     *   Format: `schedule_id=<Schedule_ID>`
     * @param {string} request.orderBy
     *   Sort by field.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.notebooks.v1.Execution|Execution} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listExecutionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listExecutionsStream(request?: protos.google.cloud.notebooks.v1.IListExecutionsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listExecutions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Format:
     *   `parent=projects/{project_id}/locations/{location}`
     * @param {number} request.pageSize
     *   Maximum return size of the list call.
     * @param {string} request.pageToken
     *   A previous returned page token that can be used to continue listing
     *   from the last result.
     * @param {string} request.filter
     *   Filter applied to resulting executions. Currently only supports filtering
     *   executions by a specified `schedule_id`.
     *   Format: `schedule_id=<Schedule_ID>`
     * @param {string} request.orderBy
     *   Sort by field.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.notebooks.v1.Execution|Execution}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/notebook_service.list_executions.js</caption>
     * region_tag:notebooks_v1_generated_NotebookService_ListExecutions_async
     */
    listExecutionsAsync(request?: protos.google.cloud.notebooks.v1.IListExecutionsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.notebooks.v1.IExecution>;
    /**
     * Gets the access control policy for a resource. Returns an empty policy
     * if the resource exists and does not have a policy set.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {Object} [request.options]
     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
     *   `GetIamPolicy`. This field is only used by Cloud IAM.
     *
     *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    getIamPolicy(request: IamProtos.google.iam.v1.GetIamPolicyRequest, options?: gax.CallOptions | Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined, {} | null | undefined>, callback?: Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined, {} | null | undefined>): Promise<[IamProtos.google.iam.v1.Policy]>;
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    setIamPolicy(request: IamProtos.google.iam.v1.SetIamPolicyRequest, options?: gax.CallOptions | Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined, {} | null | undefined>, callback?: Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined, {} | null | undefined>): Promise<[IamProtos.google.iam.v1.Policy]>;
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     */
    testIamPermissions(request: IamProtos.google.iam.v1.TestIamPermissionsRequest, options?: gax.CallOptions | Callback<IamProtos.google.iam.v1.TestIamPermissionsResponse, IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined, {} | null | undefined>, callback?: Callback<IamProtos.google.iam.v1.TestIamPermissionsResponse, IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined, {} | null | undefined>): Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified environment resource name string.
     *
     * @param {string} project
     * @param {string} environment
     * @returns {string} Resource name string.
     */
    environmentPath(project: string, environment: string): string;
    /**
     * Parse the project from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the environment from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromEnvironmentName(environmentName: string): string | number;
    /**
     * Return a fully-qualified execution resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} execution
     * @returns {string} Resource name string.
     */
    executionPath(project: string, location: string, execution: string): string;
    /**
     * Parse the project from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromExecutionName(executionName: string): string | number;
    /**
     * Parse the location from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromExecutionName(executionName: string): string | number;
    /**
     * Parse the execution from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the execution.
     */
    matchExecutionFromExecutionName(executionName: string): string | number;
    /**
     * Return a fully-qualified instance resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @returns {string} Resource name string.
     */
    instancePath(project: string, instance: string): string;
    /**
     * Parse the project from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromInstanceName(instanceName: string): string | number;
    /**
     * Parse the instance from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromInstanceName(instanceName: string): string | number;
    /**
     * Return a fully-qualified runtime resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} runtime
     * @returns {string} Resource name string.
     */
    runtimePath(project: string, location: string, runtime: string): string;
    /**
     * Parse the project from Runtime resource.
     *
     * @param {string} runtimeName
     *   A fully-qualified path representing Runtime resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromRuntimeName(runtimeName: string): string | number;
    /**
     * Parse the location from Runtime resource.
     *
     * @param {string} runtimeName
     *   A fully-qualified path representing Runtime resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromRuntimeName(runtimeName: string): string | number;
    /**
     * Parse the runtime from Runtime resource.
     *
     * @param {string} runtimeName
     *   A fully-qualified path representing Runtime resource.
     * @returns {string} A string representing the runtime.
     */
    matchRuntimeFromRuntimeName(runtimeName: string): string | number;
    /**
     * Return a fully-qualified schedule resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} schedule
     * @returns {string} Resource name string.
     */
    schedulePath(project: string, location: string, schedule: string): string;
    /**
     * Parse the project from Schedule resource.
     *
     * @param {string} scheduleName
     *   A fully-qualified path representing Schedule resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromScheduleName(scheduleName: string): string | number;
    /**
     * Parse the location from Schedule resource.
     *
     * @param {string} scheduleName
     *   A fully-qualified path representing Schedule resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromScheduleName(scheduleName: string): string | number;
    /**
     * Parse the schedule from Schedule resource.
     *
     * @param {string} scheduleName
     *   A fully-qualified path representing Schedule resource.
     * @returns {string} A string representing the schedule.
     */
    matchScheduleFromScheduleName(scheduleName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}

/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  An interface for managing organization policies.
 *
 *  The Cloud Org Policy service provides a simple mechanism for organizations to
 *  restrict the allowed configurations across their entire Cloud Resource
 *  hierarchy.
 *
 *  You can use a `policy` to configure restrictions in Cloud resources. For
 *  example, you can enforce a `policy` that restricts which Google
 *  Cloud Platform APIs can be activated in a certain part of your resource
 *  hierarchy, or prevents serial port access to VM instances in a particular
 *  folder.
 *
 *  `Policies` are inherited down through the resource hierarchy. A `policy`
 *  applied to a parent resource automatically applies to all its child resources
 *  unless overridden with a `policy` lower in the hierarchy.
 *
 *  A `constraint` defines an aspect of a resource's configuration that can be
 *  controlled by an organization's policy administrator. `Policies` are a
 *  collection of `constraints` that defines their allowable configuration on a
 *  particular resource and its child resources.
 * @class
 * @memberof v2
 */
export declare class OrgPolicyClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    orgPolicyStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of OrgPolicyClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new OrgPolicyClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets a `Policy` on a resource.
     *
     * If no `Policy` is set on the resource, NOT_FOUND is returned. The
     * `etag` value can be used with `UpdatePolicy()` to update a
     * `Policy` during read-modify-write.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Resource name of the policy. See `Policy` for naming
     *   requirements.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.orgpolicy.v2.Policy|Policy}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/org_policy.get_policy.js</caption>
     * region_tag:orgpolicy_v2_generated_OrgPolicy_GetPolicy_async
     */
    getPolicy(request?: protos.google.cloud.orgpolicy.v2.IGetPolicyRequest, options?: CallOptions): Promise<[
        protos.google.cloud.orgpolicy.v2.IPolicy,
        protos.google.cloud.orgpolicy.v2.IGetPolicyRequest | undefined,
        {} | undefined
    ]>;
    getPolicy(request: protos.google.cloud.orgpolicy.v2.IGetPolicyRequest, options: CallOptions, callback: Callback<protos.google.cloud.orgpolicy.v2.IPolicy, protos.google.cloud.orgpolicy.v2.IGetPolicyRequest | null | undefined, {} | null | undefined>): void;
    getPolicy(request: protos.google.cloud.orgpolicy.v2.IGetPolicyRequest, callback: Callback<protos.google.cloud.orgpolicy.v2.IPolicy, protos.google.cloud.orgpolicy.v2.IGetPolicyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets the effective `Policy` on a resource. This is the result of merging
     * `Policies` in the resource hierarchy and evaluating conditions. The
     * returned `Policy` will not have an `etag` or `condition` set because it is
     * a computed `Policy` across multiple resources.
     * Subtrees of Resource Manager resource hierarchy with 'under:' prefix will
     * not be expanded.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The effective policy to compute. See `Policy` for naming rules.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.orgpolicy.v2.Policy|Policy}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/org_policy.get_effective_policy.js</caption>
     * region_tag:orgpolicy_v2_generated_OrgPolicy_GetEffectivePolicy_async
     */
    getEffectivePolicy(request?: protos.google.cloud.orgpolicy.v2.IGetEffectivePolicyRequest, options?: CallOptions): Promise<[
        protos.google.cloud.orgpolicy.v2.IPolicy,
        protos.google.cloud.orgpolicy.v2.IGetEffectivePolicyRequest | undefined,
        {} | undefined
    ]>;
    getEffectivePolicy(request: protos.google.cloud.orgpolicy.v2.IGetEffectivePolicyRequest, options: CallOptions, callback: Callback<protos.google.cloud.orgpolicy.v2.IPolicy, protos.google.cloud.orgpolicy.v2.IGetEffectivePolicyRequest | null | undefined, {} | null | undefined>): void;
    getEffectivePolicy(request: protos.google.cloud.orgpolicy.v2.IGetEffectivePolicyRequest, callback: Callback<protos.google.cloud.orgpolicy.v2.IPolicy, protos.google.cloud.orgpolicy.v2.IGetEffectivePolicyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a Policy.
     *
     * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
     * constraint does not exist.
     * Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
     * policy already exists on the given Cloud resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The Cloud resource that will parent the new Policy. Must be in
     *   one of the following forms:
     *   * `projects/{project_number}`
     *   * `projects/{project_id}`
     *   * `folders/{folder_id}`
     *   * `organizations/{organization_id}`
     * @param {google.cloud.orgpolicy.v2.Policy} request.policy
     *   Required. `Policy` to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.orgpolicy.v2.Policy|Policy}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/org_policy.create_policy.js</caption>
     * region_tag:orgpolicy_v2_generated_OrgPolicy_CreatePolicy_async
     */
    createPolicy(request?: protos.google.cloud.orgpolicy.v2.ICreatePolicyRequest, options?: CallOptions): Promise<[
        protos.google.cloud.orgpolicy.v2.IPolicy,
        protos.google.cloud.orgpolicy.v2.ICreatePolicyRequest | undefined,
        {} | undefined
    ]>;
    createPolicy(request: protos.google.cloud.orgpolicy.v2.ICreatePolicyRequest, options: CallOptions, callback: Callback<protos.google.cloud.orgpolicy.v2.IPolicy, protos.google.cloud.orgpolicy.v2.ICreatePolicyRequest | null | undefined, {} | null | undefined>): void;
    createPolicy(request: protos.google.cloud.orgpolicy.v2.ICreatePolicyRequest, callback: Callback<protos.google.cloud.orgpolicy.v2.IPolicy, protos.google.cloud.orgpolicy.v2.ICreatePolicyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates a Policy.
     *
     * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
     * constraint or the policy do not exist.
     * Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
     * supplied in the request does not match the persisted etag of the policy
     *
     * Note: the supplied policy will perform a full overwrite of all
     * fields.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.orgpolicy.v2.Policy} request.policy
     *   Required. `Policy` to update.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Field mask used to specify the fields to be overwritten in the policy
     *   by the set. The fields specified in the update_mask are relative to the
     *   policy, not the full request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.orgpolicy.v2.Policy|Policy}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/org_policy.update_policy.js</caption>
     * region_tag:orgpolicy_v2_generated_OrgPolicy_UpdatePolicy_async
     */
    updatePolicy(request?: protos.google.cloud.orgpolicy.v2.IUpdatePolicyRequest, options?: CallOptions): Promise<[
        protos.google.cloud.orgpolicy.v2.IPolicy,
        protos.google.cloud.orgpolicy.v2.IUpdatePolicyRequest | undefined,
        {} | undefined
    ]>;
    updatePolicy(request: protos.google.cloud.orgpolicy.v2.IUpdatePolicyRequest, options: CallOptions, callback: Callback<protos.google.cloud.orgpolicy.v2.IPolicy, protos.google.cloud.orgpolicy.v2.IUpdatePolicyRequest | null | undefined, {} | null | undefined>): void;
    updatePolicy(request: protos.google.cloud.orgpolicy.v2.IUpdatePolicyRequest, callback: Callback<protos.google.cloud.orgpolicy.v2.IPolicy, protos.google.cloud.orgpolicy.v2.IUpdatePolicyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes a Policy.
     *
     * Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
     * constraint or Org Policy does not exist.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the policy to delete.
     *   See `Policy` for naming rules.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/org_policy.delete_policy.js</caption>
     * region_tag:orgpolicy_v2_generated_OrgPolicy_DeletePolicy_async
     */
    deletePolicy(request?: protos.google.cloud.orgpolicy.v2.IDeletePolicyRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.orgpolicy.v2.IDeletePolicyRequest | undefined,
        {} | undefined
    ]>;
    deletePolicy(request: protos.google.cloud.orgpolicy.v2.IDeletePolicyRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.orgpolicy.v2.IDeletePolicyRequest | null | undefined, {} | null | undefined>): void;
    deletePolicy(request: protos.google.cloud.orgpolicy.v2.IDeletePolicyRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.orgpolicy.v2.IDeletePolicyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Lists `Constraints` that could be applied on the specified resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The Cloud resource that parents the constraint. Must be in one of
     *   the following forms:
     *   * `projects/{project_number}`
     *   * `projects/{project_id}`
     *   * `folders/{folder_id}`
     *   * `organizations/{organization_id}`
     * @param {number} request.pageSize
     *   Size of the pages to be returned. This is currently unsupported and will
     *   be ignored. The server may at any point start using this field to limit
     *   page size.
     * @param {string} request.pageToken
     *   Page token used to retrieve the next page. This is currently unsupported
     *   and will be ignored. The server may at any point start using this field.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.orgpolicy.v2.Constraint|Constraint}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listConstraintsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listConstraints(request?: protos.google.cloud.orgpolicy.v2.IListConstraintsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.orgpolicy.v2.IConstraint[],
        protos.google.cloud.orgpolicy.v2.IListConstraintsRequest | null,
        protos.google.cloud.orgpolicy.v2.IListConstraintsResponse
    ]>;
    listConstraints(request: protos.google.cloud.orgpolicy.v2.IListConstraintsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.orgpolicy.v2.IListConstraintsRequest, protos.google.cloud.orgpolicy.v2.IListConstraintsResponse | null | undefined, protos.google.cloud.orgpolicy.v2.IConstraint>): void;
    listConstraints(request: protos.google.cloud.orgpolicy.v2.IListConstraintsRequest, callback: PaginationCallback<protos.google.cloud.orgpolicy.v2.IListConstraintsRequest, protos.google.cloud.orgpolicy.v2.IListConstraintsResponse | null | undefined, protos.google.cloud.orgpolicy.v2.IConstraint>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The Cloud resource that parents the constraint. Must be in one of
     *   the following forms:
     *   * `projects/{project_number}`
     *   * `projects/{project_id}`
     *   * `folders/{folder_id}`
     *   * `organizations/{organization_id}`
     * @param {number} request.pageSize
     *   Size of the pages to be returned. This is currently unsupported and will
     *   be ignored. The server may at any point start using this field to limit
     *   page size.
     * @param {string} request.pageToken
     *   Page token used to retrieve the next page. This is currently unsupported
     *   and will be ignored. The server may at any point start using this field.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.orgpolicy.v2.Constraint|Constraint} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listConstraintsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listConstraintsStream(request?: protos.google.cloud.orgpolicy.v2.IListConstraintsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listConstraints`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The Cloud resource that parents the constraint. Must be in one of
     *   the following forms:
     *   * `projects/{project_number}`
     *   * `projects/{project_id}`
     *   * `folders/{folder_id}`
     *   * `organizations/{organization_id}`
     * @param {number} request.pageSize
     *   Size of the pages to be returned. This is currently unsupported and will
     *   be ignored. The server may at any point start using this field to limit
     *   page size.
     * @param {string} request.pageToken
     *   Page token used to retrieve the next page. This is currently unsupported
     *   and will be ignored. The server may at any point start using this field.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.orgpolicy.v2.Constraint|Constraint}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/org_policy.list_constraints.js</caption>
     * region_tag:orgpolicy_v2_generated_OrgPolicy_ListConstraints_async
     */
    listConstraintsAsync(request?: protos.google.cloud.orgpolicy.v2.IListConstraintsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.orgpolicy.v2.IConstraint>;
    /**
     * Retrieves all of the `Policies` that exist on a particular resource.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The target Cloud resource that parents the set of constraints and
     *   policies that will be returned from this call. Must be in one of the
     *   following forms:
     *   * `projects/{project_number}`
     *   * `projects/{project_id}`
     *   * `folders/{folder_id}`
     *   * `organizations/{organization_id}`
     * @param {number} request.pageSize
     *   Size of the pages to be returned. This is currently unsupported and will
     *   be ignored. The server may at any point start using this field to limit
     *   page size.
     * @param {string} request.pageToken
     *   Page token used to retrieve the next page. This is currently unsupported
     *   and will be ignored. The server may at any point start using this field.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.orgpolicy.v2.Policy|Policy}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listPoliciesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listPolicies(request?: protos.google.cloud.orgpolicy.v2.IListPoliciesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.orgpolicy.v2.IPolicy[],
        protos.google.cloud.orgpolicy.v2.IListPoliciesRequest | null,
        protos.google.cloud.orgpolicy.v2.IListPoliciesResponse
    ]>;
    listPolicies(request: protos.google.cloud.orgpolicy.v2.IListPoliciesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.orgpolicy.v2.IListPoliciesRequest, protos.google.cloud.orgpolicy.v2.IListPoliciesResponse | null | undefined, protos.google.cloud.orgpolicy.v2.IPolicy>): void;
    listPolicies(request: protos.google.cloud.orgpolicy.v2.IListPoliciesRequest, callback: PaginationCallback<protos.google.cloud.orgpolicy.v2.IListPoliciesRequest, protos.google.cloud.orgpolicy.v2.IListPoliciesResponse | null | undefined, protos.google.cloud.orgpolicy.v2.IPolicy>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The target Cloud resource that parents the set of constraints and
     *   policies that will be returned from this call. Must be in one of the
     *   following forms:
     *   * `projects/{project_number}`
     *   * `projects/{project_id}`
     *   * `folders/{folder_id}`
     *   * `organizations/{organization_id}`
     * @param {number} request.pageSize
     *   Size of the pages to be returned. This is currently unsupported and will
     *   be ignored. The server may at any point start using this field to limit
     *   page size.
     * @param {string} request.pageToken
     *   Page token used to retrieve the next page. This is currently unsupported
     *   and will be ignored. The server may at any point start using this field.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.orgpolicy.v2.Policy|Policy} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listPoliciesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listPoliciesStream(request?: protos.google.cloud.orgpolicy.v2.IListPoliciesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listPolicies`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The target Cloud resource that parents the set of constraints and
     *   policies that will be returned from this call. Must be in one of the
     *   following forms:
     *   * `projects/{project_number}`
     *   * `projects/{project_id}`
     *   * `folders/{folder_id}`
     *   * `organizations/{organization_id}`
     * @param {number} request.pageSize
     *   Size of the pages to be returned. This is currently unsupported and will
     *   be ignored. The server may at any point start using this field to limit
     *   page size.
     * @param {string} request.pageToken
     *   Page token used to retrieve the next page. This is currently unsupported
     *   and will be ignored. The server may at any point start using this field.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.orgpolicy.v2.Policy|Policy}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/org_policy.list_policies.js</caption>
     * region_tag:orgpolicy_v2_generated_OrgPolicy_ListPolicies_async
     */
    listPoliciesAsync(request?: protos.google.cloud.orgpolicy.v2.IListPoliciesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.orgpolicy.v2.IPolicy>;
    /**
     * Return a fully-qualified folderConstraint resource name string.
     *
     * @param {string} folder
     * @param {string} constraint
     * @returns {string} Resource name string.
     */
    folderConstraintPath(folder: string, constraint: string): string;
    /**
     * Parse the folder from FolderConstraint resource.
     *
     * @param {string} folderConstraintName
     *   A fully-qualified path representing folder_constraint resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderConstraintName(folderConstraintName: string): string | number;
    /**
     * Parse the constraint from FolderConstraint resource.
     *
     * @param {string} folderConstraintName
     *   A fully-qualified path representing folder_constraint resource.
     * @returns {string} A string representing the constraint.
     */
    matchConstraintFromFolderConstraintName(folderConstraintName: string): string | number;
    /**
     * Return a fully-qualified folderPolicy resource name string.
     *
     * @param {string} folder
     * @param {string} policy
     * @returns {string} Resource name string.
     */
    folderPolicyPath(folder: string, policy: string): string;
    /**
     * Parse the folder from FolderPolicy resource.
     *
     * @param {string} folderPolicyName
     *   A fully-qualified path representing folder_policy resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderPolicyName(folderPolicyName: string): string | number;
    /**
     * Parse the policy from FolderPolicy resource.
     *
     * @param {string} folderPolicyName
     *   A fully-qualified path representing folder_policy resource.
     * @returns {string} A string representing the policy.
     */
    matchPolicyFromFolderPolicyName(folderPolicyName: string): string | number;
    /**
     * Return a fully-qualified organizationConstraint resource name string.
     *
     * @param {string} organization
     * @param {string} constraint
     * @returns {string} Resource name string.
     */
    organizationConstraintPath(organization: string, constraint: string): string;
    /**
     * Parse the organization from OrganizationConstraint resource.
     *
     * @param {string} organizationConstraintName
     *   A fully-qualified path representing organization_constraint resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationConstraintName(organizationConstraintName: string): string | number;
    /**
     * Parse the constraint from OrganizationConstraint resource.
     *
     * @param {string} organizationConstraintName
     *   A fully-qualified path representing organization_constraint resource.
     * @returns {string} A string representing the constraint.
     */
    matchConstraintFromOrganizationConstraintName(organizationConstraintName: string): string | number;
    /**
     * Return a fully-qualified organizationPolicy resource name string.
     *
     * @param {string} organization
     * @param {string} policy
     * @returns {string} Resource name string.
     */
    organizationPolicyPath(organization: string, policy: string): string;
    /**
     * Parse the organization from OrganizationPolicy resource.
     *
     * @param {string} organizationPolicyName
     *   A fully-qualified path representing organization_policy resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationPolicyName(organizationPolicyName: string): string | number;
    /**
     * Parse the policy from OrganizationPolicy resource.
     *
     * @param {string} organizationPolicyName
     *   A fully-qualified path representing organization_policy resource.
     * @returns {string} A string representing the policy.
     */
    matchPolicyFromOrganizationPolicyName(organizationPolicyName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified projectConstraint resource name string.
     *
     * @param {string} project
     * @param {string} constraint
     * @returns {string} Resource name string.
     */
    projectConstraintPath(project: string, constraint: string): string;
    /**
     * Parse the project from ProjectConstraint resource.
     *
     * @param {string} projectConstraintName
     *   A fully-qualified path representing project_constraint resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectConstraintName(projectConstraintName: string): string | number;
    /**
     * Parse the constraint from ProjectConstraint resource.
     *
     * @param {string} projectConstraintName
     *   A fully-qualified path representing project_constraint resource.
     * @returns {string} A string representing the constraint.
     */
    matchConstraintFromProjectConstraintName(projectConstraintName: string): string | number;
    /**
     * Return a fully-qualified projectPolicy resource name string.
     *
     * @param {string} project
     * @param {string} policy
     * @returns {string} Resource name string.
     */
    projectPolicyPath(project: string, policy: string): string;
    /**
     * Parse the project from ProjectPolicy resource.
     *
     * @param {string} projectPolicyName
     *   A fully-qualified path representing project_policy resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectPolicyName(projectPolicyName: string): string | number;
    /**
     * Parse the policy from ProjectPolicy resource.
     *
     * @param {string} projectPolicyName
     *   A fully-qualified path representing project_policy resource.
     * @returns {string} A string representing the policy.
     */
    matchPolicyFromProjectPolicyName(projectPolicyName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}

/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, IamClient, IamProtos, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  [Certificate Authority
 *  Service][google.cloud.security.privateca.v1.CertificateAuthorityService]
 *  manages private certificate authorities and issued certificates.
 * @class
 * @memberof v1
 */
export declare class CertificateAuthorityServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    iamClient: IamClient;
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    certificateAuthorityServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of CertificateAuthorityServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new CertificateAuthorityServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Create a new {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate}
     * in a given Project, Location from a particular
     * {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool} associated with the
     *   {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate}, in the
     *   format `projects/* /locations/* /caPools/*`.
     * @param {string} [request.certificateId]
     *   Optional. It must be unique within a location and match the regular
     *   expression `[a-zA-Z0-9_-]{1,63}`. This field is required when using a
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     *   in the Enterprise {@link protos.|CertificateAuthority.Tier}, but is optional and its
     *   value is ignored otherwise.
     * @param {google.cloud.security.privateca.v1.Certificate} request.certificate
     *   Required. A {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate}
     *   with initial field values.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and the
     *   request times out. If you make the request again with the same request ID,
     *   the server can check if original operation with the same request ID was
     *   received, and if so, will ignore the second request. This prevents clients
     *   from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {boolean} [request.validateOnly]
     *   Optional. If this is true, no
     *   {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate} resource will
     *   be persisted regardless of the
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool}'s
     *   {@link protos.google.cloud.security.privateca.v1.CaPool.tier|tier}, and the returned
     *   {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate} will not
     *   contain the
     *   {@link protos.google.cloud.security.privateca.v1.Certificate.pem_certificate|pem_certificate}
     *   field.
     * @param {string} [request.issuingCertificateAuthorityId]
     *   Optional. The resource ID of the
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     *   that should issue the certificate.  This optional field will ignore the
     *   load-balancing scheme of the Pool and directly issue the certificate from
     *   the CA with the specified ID, contained in the same
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool} referenced by `parent`.
     *   Per-CA quota rules apply. If left empty, a
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     *   will be chosen from the {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool}
     *   by the service. For example, to issue a
     *   {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate} from a
     *   Certificate Authority with resource name
     *   "projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca",
     *   you can set the
     *   {@link protos.google.cloud.security.privateca.v1.CreateCertificateRequest.parent|parent}
     *   to "projects/my-project/locations/us-central1/caPools/my-pool" and the
     *   {@link protos.google.cloud.security.privateca.v1.CreateCertificateRequest.issuing_certificate_authority_id|issuing_certificate_authority_id}
     *   to "my-ca".
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.create_certificate.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_CreateCertificate_async
     */
    createCertificate(request?: protos.google.cloud.security.privateca.v1.ICreateCertificateRequest, options?: CallOptions): Promise<[
        protos.google.cloud.security.privateca.v1.ICertificate,
        (protos.google.cloud.security.privateca.v1.ICreateCertificateRequest | undefined),
        {} | undefined
    ]>;
    createCertificate(request: protos.google.cloud.security.privateca.v1.ICreateCertificateRequest, options: CallOptions, callback: Callback<protos.google.cloud.security.privateca.v1.ICertificate, protos.google.cloud.security.privateca.v1.ICreateCertificateRequest | null | undefined, {} | null | undefined>): void;
    createCertificate(request: protos.google.cloud.security.privateca.v1.ICreateCertificateRequest, callback: Callback<protos.google.cloud.security.privateca.v1.ICertificate, protos.google.cloud.security.privateca.v1.ICreateCertificateRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns a {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The {@link protos.google.cloud.security.privateca.v1.Certificate.name|name}
     *   of the {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate} to
     *   get.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.get_certificate.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_GetCertificate_async
     */
    getCertificate(request?: protos.google.cloud.security.privateca.v1.IGetCertificateRequest, options?: CallOptions): Promise<[
        protos.google.cloud.security.privateca.v1.ICertificate,
        (protos.google.cloud.security.privateca.v1.IGetCertificateRequest | undefined),
        {} | undefined
    ]>;
    getCertificate(request: protos.google.cloud.security.privateca.v1.IGetCertificateRequest, options: CallOptions, callback: Callback<protos.google.cloud.security.privateca.v1.ICertificate, protos.google.cloud.security.privateca.v1.IGetCertificateRequest | null | undefined, {} | null | undefined>): void;
    getCertificate(request: protos.google.cloud.security.privateca.v1.IGetCertificateRequest, callback: Callback<protos.google.cloud.security.privateca.v1.ICertificate, protos.google.cloud.security.privateca.v1.IGetCertificateRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Revoke a {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name for this
     *   {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate} in the format
     *   `projects/* /locations/* /caPools/* /certificates/*`.
     * @param {google.cloud.security.privateca.v1.RevocationReason} request.reason
     *   Required. The
     *   {@link protos.google.cloud.security.privateca.v1.RevocationReason|RevocationReason} for
     *   revoking this certificate.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.revoke_certificate.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_RevokeCertificate_async
     */
    revokeCertificate(request?: protos.google.cloud.security.privateca.v1.IRevokeCertificateRequest, options?: CallOptions): Promise<[
        protos.google.cloud.security.privateca.v1.ICertificate,
        (protos.google.cloud.security.privateca.v1.IRevokeCertificateRequest | undefined),
        {} | undefined
    ]>;
    revokeCertificate(request: protos.google.cloud.security.privateca.v1.IRevokeCertificateRequest, options: CallOptions, callback: Callback<protos.google.cloud.security.privateca.v1.ICertificate, protos.google.cloud.security.privateca.v1.IRevokeCertificateRequest | null | undefined, {} | null | undefined>): void;
    revokeCertificate(request: protos.google.cloud.security.privateca.v1.IRevokeCertificateRequest, callback: Callback<protos.google.cloud.security.privateca.v1.ICertificate, protos.google.cloud.security.privateca.v1.IRevokeCertificateRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Update a {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate}.
     * Currently, the only field you can update is the
     * {@link protos.google.cloud.security.privateca.v1.Certificate.labels|labels} field.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.security.privateca.v1.Certificate} request.certificate
     *   Required. {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate}
     *   with updated values.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. A list of fields to be updated in this request.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.update_certificate.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_UpdateCertificate_async
     */
    updateCertificate(request?: protos.google.cloud.security.privateca.v1.IUpdateCertificateRequest, options?: CallOptions): Promise<[
        protos.google.cloud.security.privateca.v1.ICertificate,
        (protos.google.cloud.security.privateca.v1.IUpdateCertificateRequest | undefined),
        {} | undefined
    ]>;
    updateCertificate(request: protos.google.cloud.security.privateca.v1.IUpdateCertificateRequest, options: CallOptions, callback: Callback<protos.google.cloud.security.privateca.v1.ICertificate, protos.google.cloud.security.privateca.v1.IUpdateCertificateRequest | null | undefined, {} | null | undefined>): void;
    updateCertificate(request: protos.google.cloud.security.privateca.v1.IUpdateCertificateRequest, callback: Callback<protos.google.cloud.security.privateca.v1.ICertificate, protos.google.cloud.security.privateca.v1.IUpdateCertificateRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Fetch a certificate signing request (CSR) from a
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     * that is in state
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION|AWAITING_USER_ACTIVATION}
     * and is of type
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE|SUBORDINATE}.
     * The CSR must then be signed by the desired parent Certificate Authority,
     * which could be another
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     * resource, or could be an on-prem certificate authority. See also
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthorityService.ActivateCertificateAuthority|ActivateCertificateAuthority}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name for this
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     *   in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.security.privateca.v1.FetchCertificateAuthorityCsrResponse|FetchCertificateAuthorityCsrResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.fetch_certificate_authority_csr.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_FetchCertificateAuthorityCsr_async
     */
    fetchCertificateAuthorityCsr(request?: protos.google.cloud.security.privateca.v1.IFetchCertificateAuthorityCsrRequest, options?: CallOptions): Promise<[
        protos.google.cloud.security.privateca.v1.IFetchCertificateAuthorityCsrResponse,
        (protos.google.cloud.security.privateca.v1.IFetchCertificateAuthorityCsrRequest | undefined),
        {} | undefined
    ]>;
    fetchCertificateAuthorityCsr(request: protos.google.cloud.security.privateca.v1.IFetchCertificateAuthorityCsrRequest, options: CallOptions, callback: Callback<protos.google.cloud.security.privateca.v1.IFetchCertificateAuthorityCsrResponse, protos.google.cloud.security.privateca.v1.IFetchCertificateAuthorityCsrRequest | null | undefined, {} | null | undefined>): void;
    fetchCertificateAuthorityCsr(request: protos.google.cloud.security.privateca.v1.IFetchCertificateAuthorityCsrRequest, callback: Callback<protos.google.cloud.security.privateca.v1.IFetchCertificateAuthorityCsrResponse, protos.google.cloud.security.privateca.v1.IFetchCertificateAuthorityCsrRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns a
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority.name|name} of the
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     *   to get.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.get_certificate_authority.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_GetCertificateAuthority_async
     */
    getCertificateAuthority(request?: protos.google.cloud.security.privateca.v1.IGetCertificateAuthorityRequest, options?: CallOptions): Promise<[
        protos.google.cloud.security.privateca.v1.ICertificateAuthority,
        (protos.google.cloud.security.privateca.v1.IGetCertificateAuthorityRequest | undefined),
        {} | undefined
    ]>;
    getCertificateAuthority(request: protos.google.cloud.security.privateca.v1.IGetCertificateAuthorityRequest, options: CallOptions, callback: Callback<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IGetCertificateAuthorityRequest | null | undefined, {} | null | undefined>): void;
    getCertificateAuthority(request: protos.google.cloud.security.privateca.v1.IGetCertificateAuthorityRequest, callback: Callback<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IGetCertificateAuthorityRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns a {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The {@link protos.google.cloud.security.privateca.v1.CaPool.name|name} of the
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool} to get.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.get_ca_pool.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_GetCaPool_async
     */
    getCaPool(request?: protos.google.cloud.security.privateca.v1.IGetCaPoolRequest, options?: CallOptions): Promise<[
        protos.google.cloud.security.privateca.v1.ICaPool,
        protos.google.cloud.security.privateca.v1.IGetCaPoolRequest | undefined,
        {} | undefined
    ]>;
    getCaPool(request: protos.google.cloud.security.privateca.v1.IGetCaPoolRequest, options: CallOptions, callback: Callback<protos.google.cloud.security.privateca.v1.ICaPool, protos.google.cloud.security.privateca.v1.IGetCaPoolRequest | null | undefined, {} | null | undefined>): void;
    getCaPool(request: protos.google.cloud.security.privateca.v1.IGetCaPoolRequest, callback: Callback<protos.google.cloud.security.privateca.v1.ICaPool, protos.google.cloud.security.privateca.v1.IGetCaPoolRequest | null | undefined, {} | null | undefined>): void;
    /**
     * FetchCaCerts returns the current trust anchor for the
     * {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool}. This will include CA
     * certificate chains for all ACTIVE
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     * resources in the {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.caPool
     *   Required. The resource name for the
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool} in the format
     *   `projects/* /locations/* /caPools/*`.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.security.privateca.v1.FetchCaCertsResponse|FetchCaCertsResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.fetch_ca_certs.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_FetchCaCerts_async
     */
    fetchCaCerts(request?: protos.google.cloud.security.privateca.v1.IFetchCaCertsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.security.privateca.v1.IFetchCaCertsResponse,
        (protos.google.cloud.security.privateca.v1.IFetchCaCertsRequest | undefined),
        {} | undefined
    ]>;
    fetchCaCerts(request: protos.google.cloud.security.privateca.v1.IFetchCaCertsRequest, options: CallOptions, callback: Callback<protos.google.cloud.security.privateca.v1.IFetchCaCertsResponse, protos.google.cloud.security.privateca.v1.IFetchCaCertsRequest | null | undefined, {} | null | undefined>): void;
    fetchCaCerts(request: protos.google.cloud.security.privateca.v1.IFetchCaCertsRequest, callback: Callback<protos.google.cloud.security.privateca.v1.IFetchCaCertsResponse, protos.google.cloud.security.privateca.v1.IFetchCaCertsRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns a
     * {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationList}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList.name|name}
     *   of the
     *   {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationList}
     *   to get.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationList}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.get_certificate_revocation_list.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_GetCertificateRevocationList_async
     */
    getCertificateRevocationList(request?: protos.google.cloud.security.privateca.v1.IGetCertificateRevocationListRequest, options?: CallOptions): Promise<[
        protos.google.cloud.security.privateca.v1.ICertificateRevocationList,
        (protos.google.cloud.security.privateca.v1.IGetCertificateRevocationListRequest | undefined),
        {} | undefined
    ]>;
    getCertificateRevocationList(request: protos.google.cloud.security.privateca.v1.IGetCertificateRevocationListRequest, options: CallOptions, callback: Callback<protos.google.cloud.security.privateca.v1.ICertificateRevocationList, protos.google.cloud.security.privateca.v1.IGetCertificateRevocationListRequest | null | undefined, {} | null | undefined>): void;
    getCertificateRevocationList(request: protos.google.cloud.security.privateca.v1.IGetCertificateRevocationListRequest, callback: Callback<protos.google.cloud.security.privateca.v1.ICertificateRevocationList, protos.google.cloud.security.privateca.v1.IGetCertificateRevocationListRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns a
     * {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplate}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The
     *   {@link protos.google.cloud.security.privateca.v1.CertificateTemplate.name|name} of the
     *   {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplate}
     *   to get.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplate}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.get_certificate_template.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_GetCertificateTemplate_async
     */
    getCertificateTemplate(request?: protos.google.cloud.security.privateca.v1.IGetCertificateTemplateRequest, options?: CallOptions): Promise<[
        protos.google.cloud.security.privateca.v1.ICertificateTemplate,
        (protos.google.cloud.security.privateca.v1.IGetCertificateTemplateRequest | undefined),
        {} | undefined
    ]>;
    getCertificateTemplate(request: protos.google.cloud.security.privateca.v1.IGetCertificateTemplateRequest, options: CallOptions, callback: Callback<protos.google.cloud.security.privateca.v1.ICertificateTemplate, protos.google.cloud.security.privateca.v1.IGetCertificateTemplateRequest | null | undefined, {} | null | undefined>): void;
    getCertificateTemplate(request: protos.google.cloud.security.privateca.v1.IGetCertificateTemplateRequest, callback: Callback<protos.google.cloud.security.privateca.v1.ICertificateTemplate, protos.google.cloud.security.privateca.v1.IGetCertificateTemplateRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Activate a
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     * that is in state
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION|AWAITING_USER_ACTIVATION}
     * and is of type
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE|SUBORDINATE}.
     * After the parent Certificate Authority signs a certificate signing request
     * from
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCertificateAuthorityCsr|FetchCertificateAuthorityCsr},
     * this method can complete the activation process.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name for this
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     *   in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
     * @param {string} request.pemCaCertificate
     *   Required. The signed CA certificate issued from
     *   {@link protos.google.cloud.security.privateca.v1.FetchCertificateAuthorityCsrResponse.pem_csr|FetchCertificateAuthorityCsrResponse.pem_csr}.
     * @param {google.cloud.security.privateca.v1.SubordinateConfig} request.subordinateConfig
     *   Required. Must include information about the issuer of
     *   'pem_ca_certificate', and any further issuers until the self-signed CA.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.activate_certificate_authority.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_ActivateCertificateAuthority_async
     */
    activateCertificateAuthority(request?: protos.google.cloud.security.privateca.v1.IActivateCertificateAuthorityRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    activateCertificateAuthority(request: protos.google.cloud.security.privateca.v1.IActivateCertificateAuthorityRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    activateCertificateAuthority(request: protos.google.cloud.security.privateca.v1.IActivateCertificateAuthorityRequest, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `activateCertificateAuthority()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.activate_certificate_authority.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_ActivateCertificateAuthority_async
     */
    checkActivateCertificateAuthorityProgress(name: string): Promise<LROperation<protos.google.cloud.security.privateca.v1.CertificateAuthority, protos.google.cloud.security.privateca.v1.OperationMetadata>>;
    /**
     * Create a new
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     * in a given Project and Location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool} associated with the
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthorities},
     *   in the format `projects/* /locations/* /caPools/*`.
     * @param {string} request.certificateAuthorityId
     *   Required. It must be unique within a location and match the regular
     *   expression `[a-zA-Z0-9_-]{1,63}`
     * @param {google.cloud.security.privateca.v1.CertificateAuthority} request.certificateAuthority
     *   Required. A
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     *   with initial field values.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.create_certificate_authority.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_CreateCertificateAuthority_async
     */
    createCertificateAuthority(request?: protos.google.cloud.security.privateca.v1.ICreateCertificateAuthorityRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createCertificateAuthority(request: protos.google.cloud.security.privateca.v1.ICreateCertificateAuthorityRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createCertificateAuthority(request: protos.google.cloud.security.privateca.v1.ICreateCertificateAuthorityRequest, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createCertificateAuthority()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.create_certificate_authority.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_CreateCertificateAuthority_async
     */
    checkCreateCertificateAuthorityProgress(name: string): Promise<LROperation<protos.google.cloud.security.privateca.v1.CertificateAuthority, protos.google.cloud.security.privateca.v1.OperationMetadata>>;
    /**
     * Disable a
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name for this
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     *   in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {boolean} [request.ignoreDependentResources]
     *   Optional. This field allows this CA to be disabled even if it's being
     *   depended on by another resource. However, doing so may result in unintended
     *   and unrecoverable effects on any dependent resource(s) since the CA will
     *   no longer be able to issue certificates.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.disable_certificate_authority.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_DisableCertificateAuthority_async
     */
    disableCertificateAuthority(request?: protos.google.cloud.security.privateca.v1.IDisableCertificateAuthorityRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    disableCertificateAuthority(request: protos.google.cloud.security.privateca.v1.IDisableCertificateAuthorityRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    disableCertificateAuthority(request: protos.google.cloud.security.privateca.v1.IDisableCertificateAuthorityRequest, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `disableCertificateAuthority()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.disable_certificate_authority.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_DisableCertificateAuthority_async
     */
    checkDisableCertificateAuthorityProgress(name: string): Promise<LROperation<protos.google.cloud.security.privateca.v1.CertificateAuthority, protos.google.cloud.security.privateca.v1.OperationMetadata>>;
    /**
     * Enable a
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name for this
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     *   in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.enable_certificate_authority.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_EnableCertificateAuthority_async
     */
    enableCertificateAuthority(request?: protos.google.cloud.security.privateca.v1.IEnableCertificateAuthorityRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    enableCertificateAuthority(request: protos.google.cloud.security.privateca.v1.IEnableCertificateAuthorityRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    enableCertificateAuthority(request: protos.google.cloud.security.privateca.v1.IEnableCertificateAuthorityRequest, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `enableCertificateAuthority()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.enable_certificate_authority.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_EnableCertificateAuthority_async
     */
    checkEnableCertificateAuthorityProgress(name: string): Promise<LROperation<protos.google.cloud.security.privateca.v1.CertificateAuthority, protos.google.cloud.security.privateca.v1.OperationMetadata>>;
    /**
     * Undelete a
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     * that has been deleted.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name for this
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     *   in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.undelete_certificate_authority.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_UndeleteCertificateAuthority_async
     */
    undeleteCertificateAuthority(request?: protos.google.cloud.security.privateca.v1.IUndeleteCertificateAuthorityRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    undeleteCertificateAuthority(request: protos.google.cloud.security.privateca.v1.IUndeleteCertificateAuthorityRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    undeleteCertificateAuthority(request: protos.google.cloud.security.privateca.v1.IUndeleteCertificateAuthorityRequest, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `undeleteCertificateAuthority()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.undelete_certificate_authority.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_UndeleteCertificateAuthority_async
     */
    checkUndeleteCertificateAuthorityProgress(name: string): Promise<LROperation<protos.google.cloud.security.privateca.v1.CertificateAuthority, protos.google.cloud.security.privateca.v1.OperationMetadata>>;
    /**
     * Delete a
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name for this
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     *   in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {boolean} [request.ignoreActiveCertificates]
     *   Optional. This field allows the CA to be deleted even if the CA has
     *   active certs. Active certs include both unrevoked and unexpired certs.
     * @param {boolean} [request.skipGracePeriod]
     *   Optional. If this flag is set, the Certificate Authority will be deleted as
     *   soon as possible without a 30-day grace period where undeletion would have
     *   been allowed. If you proceed, there will be no way to recover this CA.
     * @param {boolean} [request.ignoreDependentResources]
     *   Optional. This field allows this ca to be deleted even if it's being
     *   depended on by another resource. However, doing so may result in unintended
     *   and unrecoverable effects on any dependent resource(s) since the CA will
     *   no longer be able to issue certificates.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.delete_certificate_authority.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_DeleteCertificateAuthority_async
     */
    deleteCertificateAuthority(request?: protos.google.cloud.security.privateca.v1.IDeleteCertificateAuthorityRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteCertificateAuthority(request: protos.google.cloud.security.privateca.v1.IDeleteCertificateAuthorityRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteCertificateAuthority(request: protos.google.cloud.security.privateca.v1.IDeleteCertificateAuthorityRequest, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteCertificateAuthority()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.delete_certificate_authority.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_DeleteCertificateAuthority_async
     */
    checkDeleteCertificateAuthorityProgress(name: string): Promise<LROperation<protos.google.cloud.security.privateca.v1.CertificateAuthority, protos.google.cloud.security.privateca.v1.OperationMetadata>>;
    /**
     * Update a
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.security.privateca.v1.CertificateAuthority} request.certificateAuthority
     *   Required.
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}
     *   with updated values.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. A list of fields to be updated in this request.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.update_certificate_authority.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_UpdateCertificateAuthority_async
     */
    updateCertificateAuthority(request?: protos.google.cloud.security.privateca.v1.IUpdateCertificateAuthorityRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateCertificateAuthority(request: protos.google.cloud.security.privateca.v1.IUpdateCertificateAuthorityRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateCertificateAuthority(request: protos.google.cloud.security.privateca.v1.IUpdateCertificateAuthorityRequest, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateAuthority, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateCertificateAuthority()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.update_certificate_authority.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_UpdateCertificateAuthority_async
     */
    checkUpdateCertificateAuthorityProgress(name: string): Promise<LROperation<protos.google.cloud.security.privateca.v1.CertificateAuthority, protos.google.cloud.security.privateca.v1.OperationMetadata>>;
    /**
     * Create a {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool}, in the format
     *   `projects/* /locations/*`.
     * @param {string} request.caPoolId
     *   Required. It must be unique within a location and match the regular
     *   expression `[a-zA-Z0-9_-]{1,63}`
     * @param {google.cloud.security.privateca.v1.CaPool} request.caPool
     *   Required. A {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool} with
     *   initial field values.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.create_ca_pool.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_CreateCaPool_async
     */
    createCaPool(request?: protos.google.cloud.security.privateca.v1.ICreateCaPoolRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.security.privateca.v1.ICaPool, protos.google.cloud.security.privateca.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createCaPool(request: protos.google.cloud.security.privateca.v1.ICreateCaPoolRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICaPool, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createCaPool(request: protos.google.cloud.security.privateca.v1.ICreateCaPoolRequest, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICaPool, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createCaPool()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.create_ca_pool.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_CreateCaPool_async
     */
    checkCreateCaPoolProgress(name: string): Promise<LROperation<protos.google.cloud.security.privateca.v1.CaPool, protos.google.cloud.security.privateca.v1.OperationMetadata>>;
    /**
     * Update a {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.security.privateca.v1.CaPool} request.caPool
     *   Required. {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool} with updated
     *   values.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. A list of fields to be updated in this request.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.update_ca_pool.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_UpdateCaPool_async
     */
    updateCaPool(request?: protos.google.cloud.security.privateca.v1.IUpdateCaPoolRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.security.privateca.v1.ICaPool, protos.google.cloud.security.privateca.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateCaPool(request: protos.google.cloud.security.privateca.v1.IUpdateCaPoolRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICaPool, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateCaPool(request: protos.google.cloud.security.privateca.v1.IUpdateCaPoolRequest, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICaPool, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateCaPool()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.update_ca_pool.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_UpdateCaPool_async
     */
    checkUpdateCaPoolProgress(name: string): Promise<LROperation<protos.google.cloud.security.privateca.v1.CaPool, protos.google.cloud.security.privateca.v1.OperationMetadata>>;
    /**
     * Delete a {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name for this
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool} in the format
     *   `projects/* /locations/* /caPools/*`.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {boolean} [request.ignoreDependentResources]
     *   Optional. This field allows this pool to be deleted even if it's being
     *   depended on by another resource. However, doing so may result in unintended
     *   and unrecoverable effects on any dependent resource(s) since the pool will
     *   no longer be able to issue certificates.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.delete_ca_pool.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_DeleteCaPool_async
     */
    deleteCaPool(request?: protos.google.cloud.security.privateca.v1.IDeleteCaPoolRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.security.privateca.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteCaPool(request: protos.google.cloud.security.privateca.v1.IDeleteCaPoolRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteCaPool(request: protos.google.cloud.security.privateca.v1.IDeleteCaPoolRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteCaPool()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.delete_ca_pool.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_DeleteCaPool_async
     */
    checkDeleteCaPoolProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.security.privateca.v1.OperationMetadata>>;
    /**
     * Update a
     * {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationList}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.security.privateca.v1.CertificateRevocationList} request.certificateRevocationList
     *   Required.
     *   {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationList}
     *   with updated values.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. A list of fields to be updated in this request.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.update_certificate_revocation_list.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_UpdateCertificateRevocationList_async
     */
    updateCertificateRevocationList(request?: protos.google.cloud.security.privateca.v1.IUpdateCertificateRevocationListRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.security.privateca.v1.ICertificateRevocationList, protos.google.cloud.security.privateca.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateCertificateRevocationList(request: protos.google.cloud.security.privateca.v1.IUpdateCertificateRevocationListRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateRevocationList, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateCertificateRevocationList(request: protos.google.cloud.security.privateca.v1.IUpdateCertificateRevocationListRequest, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateRevocationList, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateCertificateRevocationList()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.update_certificate_revocation_list.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_UpdateCertificateRevocationList_async
     */
    checkUpdateCertificateRevocationListProgress(name: string): Promise<LROperation<protos.google.cloud.security.privateca.v1.CertificateRevocationList, protos.google.cloud.security.privateca.v1.OperationMetadata>>;
    /**
     * Create a new
     * {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplate}
     * in a given Project and Location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplate},
     *   in the format `projects/* /locations/*`.
     * @param {string} request.certificateTemplateId
     *   Required. It must be unique within a location and match the regular
     *   expression `[a-zA-Z0-9_-]{1,63}`
     * @param {google.cloud.security.privateca.v1.CertificateTemplate} request.certificateTemplate
     *   Required. A
     *   {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplate}
     *   with initial field values.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.create_certificate_template.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_CreateCertificateTemplate_async
     */
    createCertificateTemplate(request?: protos.google.cloud.security.privateca.v1.ICreateCertificateTemplateRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.security.privateca.v1.ICertificateTemplate, protos.google.cloud.security.privateca.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createCertificateTemplate(request: protos.google.cloud.security.privateca.v1.ICreateCertificateTemplateRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateTemplate, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createCertificateTemplate(request: protos.google.cloud.security.privateca.v1.ICreateCertificateTemplateRequest, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateTemplate, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createCertificateTemplate()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.create_certificate_template.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_CreateCertificateTemplate_async
     */
    checkCreateCertificateTemplateProgress(name: string): Promise<LROperation<protos.google.cloud.security.privateca.v1.CertificateTemplate, protos.google.cloud.security.privateca.v1.OperationMetadata>>;
    /**
     * DeleteCertificateTemplate deletes a
     * {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplate}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name for this
     *   {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplate}
     *   in the format `projects/* /locations/* /certificateTemplates/*`.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.delete_certificate_template.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_DeleteCertificateTemplate_async
     */
    deleteCertificateTemplate(request?: protos.google.cloud.security.privateca.v1.IDeleteCertificateTemplateRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.security.privateca.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteCertificateTemplate(request: protos.google.cloud.security.privateca.v1.IDeleteCertificateTemplateRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteCertificateTemplate(request: protos.google.cloud.security.privateca.v1.IDeleteCertificateTemplateRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteCertificateTemplate()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.delete_certificate_template.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_DeleteCertificateTemplate_async
     */
    checkDeleteCertificateTemplateProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.security.privateca.v1.OperationMetadata>>;
    /**
     * Update a
     * {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplate}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.security.privateca.v1.CertificateTemplate} request.certificateTemplate
     *   Required.
     *   {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplate}
     *   with updated values.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. A list of fields to be updated in this request.
     * @param {string} [request.requestId]
     *   Optional. An ID to identify requests. Specify a unique request ID so that
     *   if you must retry your request, the server will know to ignore the request
     *   if it has already been completed. The server will guarantee that for at
     *   least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.update_certificate_template.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_UpdateCertificateTemplate_async
     */
    updateCertificateTemplate(request?: protos.google.cloud.security.privateca.v1.IUpdateCertificateTemplateRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.security.privateca.v1.ICertificateTemplate, protos.google.cloud.security.privateca.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateCertificateTemplate(request: protos.google.cloud.security.privateca.v1.IUpdateCertificateTemplateRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateTemplate, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateCertificateTemplate(request: protos.google.cloud.security.privateca.v1.IUpdateCertificateTemplateRequest, callback: Callback<LROperation<protos.google.cloud.security.privateca.v1.ICertificateTemplate, protos.google.cloud.security.privateca.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateCertificateTemplate()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.update_certificate_template.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_UpdateCertificateTemplate_async
     */
    checkUpdateCertificateTemplateProgress(name: string): Promise<LROperation<protos.google.cloud.security.privateca.v1.CertificateTemplate, protos.google.cloud.security.privateca.v1.OperationMetadata>>;
    /**
     * Lists {@link protos.google.cloud.security.privateca.v1.Certificate|Certificates}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1.Certificate|Certificates}, in the
     *   format `projects/* /locations/* /caPools/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1.Certificate|Certificates} to include
     *   in the response. Further
     *   {@link protos.google.cloud.security.privateca.v1.Certificate|Certificates} can
     *   subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificatesResponse.next_page_token|ListCertificatesResponse.next_page_token}
     *   in a subsequent request. If unspecified, the server will pick an
     *   appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificatesResponse.next_page_token|ListCertificatesResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response. For
     *   details on supported filters and syntax, see [Certificates Filtering
     *   documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#filtering_support).
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted. For details on
     *   supported fields and syntax, see [Certificates Sorting
     *   documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#sorting_support).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listCertificatesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificates(request?: protos.google.cloud.security.privateca.v1.IListCertificatesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.security.privateca.v1.ICertificate[],
        protos.google.cloud.security.privateca.v1.IListCertificatesRequest | null,
        protos.google.cloud.security.privateca.v1.IListCertificatesResponse
    ]>;
    listCertificates(request: protos.google.cloud.security.privateca.v1.IListCertificatesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.security.privateca.v1.IListCertificatesRequest, protos.google.cloud.security.privateca.v1.IListCertificatesResponse | null | undefined, protos.google.cloud.security.privateca.v1.ICertificate>): void;
    listCertificates(request: protos.google.cloud.security.privateca.v1.IListCertificatesRequest, callback: PaginationCallback<protos.google.cloud.security.privateca.v1.IListCertificatesRequest, protos.google.cloud.security.privateca.v1.IListCertificatesResponse | null | undefined, protos.google.cloud.security.privateca.v1.ICertificate>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1.Certificate|Certificates}, in the
     *   format `projects/* /locations/* /caPools/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1.Certificate|Certificates} to include
     *   in the response. Further
     *   {@link protos.google.cloud.security.privateca.v1.Certificate|Certificates} can
     *   subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificatesResponse.next_page_token|ListCertificatesResponse.next_page_token}
     *   in a subsequent request. If unspecified, the server will pick an
     *   appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificatesResponse.next_page_token|ListCertificatesResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response. For
     *   details on supported filters and syntax, see [Certificates Filtering
     *   documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#filtering_support).
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted. For details on
     *   supported fields and syntax, see [Certificates Sorting
     *   documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#sorting_support).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCertificatesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificatesStream(request?: protos.google.cloud.security.privateca.v1.IListCertificatesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listCertificates`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1.Certificate|Certificates}, in the
     *   format `projects/* /locations/* /caPools/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1.Certificate|Certificates} to include
     *   in the response. Further
     *   {@link protos.google.cloud.security.privateca.v1.Certificate|Certificates} can
     *   subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificatesResponse.next_page_token|ListCertificatesResponse.next_page_token}
     *   in a subsequent request. If unspecified, the server will pick an
     *   appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificatesResponse.next_page_token|ListCertificatesResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response. For
     *   details on supported filters and syntax, see [Certificates Filtering
     *   documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#filtering_support).
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted. For details on
     *   supported fields and syntax, see [Certificates Sorting
     *   documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#sorting_support).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.security.privateca.v1.Certificate|Certificate}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.list_certificates.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_ListCertificates_async
     */
    listCertificatesAsync(request?: protos.google.cloud.security.privateca.v1.IListCertificatesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.security.privateca.v1.ICertificate>;
    /**
     * Lists
     * {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthorities}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool} associated with the
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthorities},
     *   in the format `projects/* /locations/* /caPools/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthorities}
     *   to include in the response. Further
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthorities}
     *   can subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateAuthoritiesResponse.next_page_token|ListCertificateAuthoritiesResponse.next_page_token}
     *   in a subsequent request. If unspecified, the server will pick an
     *   appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateAuthoritiesResponse.next_page_token|ListCertificateAuthoritiesResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listCertificateAuthoritiesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateAuthorities(request?: protos.google.cloud.security.privateca.v1.IListCertificateAuthoritiesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.security.privateca.v1.ICertificateAuthority[],
        protos.google.cloud.security.privateca.v1.IListCertificateAuthoritiesRequest | null,
        protos.google.cloud.security.privateca.v1.IListCertificateAuthoritiesResponse
    ]>;
    listCertificateAuthorities(request: protos.google.cloud.security.privateca.v1.IListCertificateAuthoritiesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.security.privateca.v1.IListCertificateAuthoritiesRequest, protos.google.cloud.security.privateca.v1.IListCertificateAuthoritiesResponse | null | undefined, protos.google.cloud.security.privateca.v1.ICertificateAuthority>): void;
    listCertificateAuthorities(request: protos.google.cloud.security.privateca.v1.IListCertificateAuthoritiesRequest, callback: PaginationCallback<protos.google.cloud.security.privateca.v1.IListCertificateAuthoritiesRequest, protos.google.cloud.security.privateca.v1.IListCertificateAuthoritiesResponse | null | undefined, protos.google.cloud.security.privateca.v1.ICertificateAuthority>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool} associated with the
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthorities},
     *   in the format `projects/* /locations/* /caPools/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthorities}
     *   to include in the response. Further
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthorities}
     *   can subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateAuthoritiesResponse.next_page_token|ListCertificateAuthoritiesResponse.next_page_token}
     *   in a subsequent request. If unspecified, the server will pick an
     *   appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateAuthoritiesResponse.next_page_token|ListCertificateAuthoritiesResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCertificateAuthoritiesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateAuthoritiesStream(request?: protos.google.cloud.security.privateca.v1.IListCertificateAuthoritiesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listCertificateAuthorities`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool} associated with the
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthorities},
     *   in the format `projects/* /locations/* /caPools/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthorities}
     *   to include in the response. Further
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthorities}
     *   can subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateAuthoritiesResponse.next_page_token|ListCertificateAuthoritiesResponse.next_page_token}
     *   in a subsequent request. If unspecified, the server will pick an
     *   appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateAuthoritiesResponse.next_page_token|ListCertificateAuthoritiesResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.security.privateca.v1.CertificateAuthority|CertificateAuthority}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.list_certificate_authorities.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_ListCertificateAuthorities_async
     */
    listCertificateAuthoritiesAsync(request?: protos.google.cloud.security.privateca.v1.IListCertificateAuthoritiesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.security.privateca.v1.ICertificateAuthority>;
    /**
     * Lists {@link protos.google.cloud.security.privateca.v1.CaPool|CaPools}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPools}, in the format
     *   `projects/* /locations/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPools} to include in the
     *   response. Further {@link protos.google.cloud.security.privateca.v1.CaPool|CaPools} can
     *   subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1.ListCaPoolsResponse.next_page_token|ListCaPoolsResponse.next_page_token}
     *   in a subsequent request. If unspecified, the server will pick an
     *   appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1.ListCaPoolsResponse.next_page_token|ListCaPoolsResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listCaPoolsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCaPools(request?: protos.google.cloud.security.privateca.v1.IListCaPoolsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.security.privateca.v1.ICaPool[],
        protos.google.cloud.security.privateca.v1.IListCaPoolsRequest | null,
        protos.google.cloud.security.privateca.v1.IListCaPoolsResponse
    ]>;
    listCaPools(request: protos.google.cloud.security.privateca.v1.IListCaPoolsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.security.privateca.v1.IListCaPoolsRequest, protos.google.cloud.security.privateca.v1.IListCaPoolsResponse | null | undefined, protos.google.cloud.security.privateca.v1.ICaPool>): void;
    listCaPools(request: protos.google.cloud.security.privateca.v1.IListCaPoolsRequest, callback: PaginationCallback<protos.google.cloud.security.privateca.v1.IListCaPoolsRequest, protos.google.cloud.security.privateca.v1.IListCaPoolsResponse | null | undefined, protos.google.cloud.security.privateca.v1.ICaPool>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPools}, in the format
     *   `projects/* /locations/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPools} to include in the
     *   response. Further {@link protos.google.cloud.security.privateca.v1.CaPool|CaPools} can
     *   subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1.ListCaPoolsResponse.next_page_token|ListCaPoolsResponse.next_page_token}
     *   in a subsequent request. If unspecified, the server will pick an
     *   appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1.ListCaPoolsResponse.next_page_token|ListCaPoolsResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCaPoolsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCaPoolsStream(request?: protos.google.cloud.security.privateca.v1.IListCaPoolsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listCaPools`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPools}, in the format
     *   `projects/* /locations/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPools} to include in the
     *   response. Further {@link protos.google.cloud.security.privateca.v1.CaPool|CaPools} can
     *   subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1.ListCaPoolsResponse.next_page_token|ListCaPoolsResponse.next_page_token}
     *   in a subsequent request. If unspecified, the server will pick an
     *   appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1.ListCaPoolsResponse.next_page_token|ListCaPoolsResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.security.privateca.v1.CaPool|CaPool}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.list_ca_pools.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_ListCaPools_async
     */
    listCaPoolsAsync(request?: protos.google.cloud.security.privateca.v1.IListCaPoolsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.security.privateca.v1.ICaPool>;
    /**
     * Lists
     * {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationLists}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationLists},
     *   in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationLists}
     *   to include in the response. Further
     *   {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationLists}
     *   can subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateRevocationListsResponse.next_page_token|ListCertificateRevocationListsResponse.next_page_token}
     *   in a subsequent request. If unspecified, the server will pick an
     *   appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateRevocationListsResponse.next_page_token|ListCertificateRevocationListsResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationList}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listCertificateRevocationListsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateRevocationLists(request?: protos.google.cloud.security.privateca.v1.IListCertificateRevocationListsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.security.privateca.v1.ICertificateRevocationList[],
        protos.google.cloud.security.privateca.v1.IListCertificateRevocationListsRequest | null,
        protos.google.cloud.security.privateca.v1.IListCertificateRevocationListsResponse
    ]>;
    listCertificateRevocationLists(request: protos.google.cloud.security.privateca.v1.IListCertificateRevocationListsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.security.privateca.v1.IListCertificateRevocationListsRequest, protos.google.cloud.security.privateca.v1.IListCertificateRevocationListsResponse | null | undefined, protos.google.cloud.security.privateca.v1.ICertificateRevocationList>): void;
    listCertificateRevocationLists(request: protos.google.cloud.security.privateca.v1.IListCertificateRevocationListsRequest, callback: PaginationCallback<protos.google.cloud.security.privateca.v1.IListCertificateRevocationListsRequest, protos.google.cloud.security.privateca.v1.IListCertificateRevocationListsResponse | null | undefined, protos.google.cloud.security.privateca.v1.ICertificateRevocationList>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationLists},
     *   in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationLists}
     *   to include in the response. Further
     *   {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationLists}
     *   can subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateRevocationListsResponse.next_page_token|ListCertificateRevocationListsResponse.next_page_token}
     *   in a subsequent request. If unspecified, the server will pick an
     *   appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateRevocationListsResponse.next_page_token|ListCertificateRevocationListsResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationList} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCertificateRevocationListsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateRevocationListsStream(request?: protos.google.cloud.security.privateca.v1.IListCertificateRevocationListsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listCertificateRevocationLists`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationLists},
     *   in the format `projects/* /locations/* /caPools/* /certificateAuthorities/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationLists}
     *   to include in the response. Further
     *   {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationLists}
     *   can subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateRevocationListsResponse.next_page_token|ListCertificateRevocationListsResponse.next_page_token}
     *   in a subsequent request. If unspecified, the server will pick an
     *   appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateRevocationListsResponse.next_page_token|ListCertificateRevocationListsResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.security.privateca.v1.CertificateRevocationList|CertificateRevocationList}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.list_certificate_revocation_lists.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_ListCertificateRevocationLists_async
     */
    listCertificateRevocationListsAsync(request?: protos.google.cloud.security.privateca.v1.IListCertificateRevocationListsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.security.privateca.v1.ICertificateRevocationList>;
    /**
     * Lists
     * {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplates}.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplates},
     *   in the format `projects/* /locations/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplates}
     *   to include in the response. Further
     *   {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplates}
     *   can subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateTemplatesResponse.next_page_token|ListCertificateTemplatesResponse.next_page_token}
     *   in a subsequent request. If unspecified, the server will pick an
     *   appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateTemplatesResponse.next_page_token|ListCertificateTemplatesResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplate}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listCertificateTemplatesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateTemplates(request?: protos.google.cloud.security.privateca.v1.IListCertificateTemplatesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.security.privateca.v1.ICertificateTemplate[],
        protos.google.cloud.security.privateca.v1.IListCertificateTemplatesRequest | null,
        protos.google.cloud.security.privateca.v1.IListCertificateTemplatesResponse
    ]>;
    listCertificateTemplates(request: protos.google.cloud.security.privateca.v1.IListCertificateTemplatesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.security.privateca.v1.IListCertificateTemplatesRequest, protos.google.cloud.security.privateca.v1.IListCertificateTemplatesResponse | null | undefined, protos.google.cloud.security.privateca.v1.ICertificateTemplate>): void;
    listCertificateTemplates(request: protos.google.cloud.security.privateca.v1.IListCertificateTemplatesRequest, callback: PaginationCallback<protos.google.cloud.security.privateca.v1.IListCertificateTemplatesRequest, protos.google.cloud.security.privateca.v1.IListCertificateTemplatesResponse | null | undefined, protos.google.cloud.security.privateca.v1.ICertificateTemplate>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplates},
     *   in the format `projects/* /locations/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplates}
     *   to include in the response. Further
     *   {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplates}
     *   can subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateTemplatesResponse.next_page_token|ListCertificateTemplatesResponse.next_page_token}
     *   in a subsequent request. If unspecified, the server will pick an
     *   appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateTemplatesResponse.next_page_token|ListCertificateTemplatesResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplate} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCertificateTemplatesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateTemplatesStream(request?: protos.google.cloud.security.privateca.v1.IListCertificateTemplatesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listCertificateTemplates`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplates},
     *   in the format `projects/* /locations/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplates}
     *   to include in the response. Further
     *   {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplates}
     *   can subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateTemplatesResponse.next_page_token|ListCertificateTemplatesResponse.next_page_token}
     *   in a subsequent request. If unspecified, the server will pick an
     *   appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1.ListCertificateTemplatesResponse.next_page_token|ListCertificateTemplatesResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.security.privateca.v1.CertificateTemplate|CertificateTemplate}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/certificate_authority_service.list_certificate_templates.js</caption>
     * region_tag:privateca_v1_generated_CertificateAuthorityService_ListCertificateTemplates_async
     */
    listCertificateTemplatesAsync(request?: protos.google.cloud.security.privateca.v1.IListCertificateTemplatesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.security.privateca.v1.ICertificateTemplate>;
    /**
     * Gets the access control policy for a resource. Returns an empty policy
     * if the resource exists and does not have a policy set.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {Object} [request.options]
     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
     *   `GetIamPolicy`. This field is only used by Cloud IAM.
     *
     *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    getIamPolicy(request: IamProtos.google.iam.v1.GetIamPolicyRequest, options?: gax.CallOptions | Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined, {} | null | undefined>, callback?: Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined, {} | null | undefined>): Promise<[IamProtos.google.iam.v1.Policy]>;
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    setIamPolicy(request: IamProtos.google.iam.v1.SetIamPolicyRequest, options?: gax.CallOptions | Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined, {} | null | undefined>, callback?: Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined, {} | null | undefined>): Promise<[IamProtos.google.iam.v1.Policy]>;
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     */
    testIamPermissions(request: IamProtos.google.iam.v1.TestIamPermissionsRequest, options?: gax.CallOptions | Callback<IamProtos.google.iam.v1.TestIamPermissionsResponse, IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined, {} | null | undefined>, callback?: Callback<IamProtos.google.iam.v1.TestIamPermissionsResponse, IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined, {} | null | undefined>): Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified caPool resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} ca_pool
     * @returns {string} Resource name string.
     */
    caPoolPath(project: string, location: string, caPool: string): string;
    /**
     * Parse the project from CaPool resource.
     *
     * @param {string} caPoolName
     *   A fully-qualified path representing CaPool resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCaPoolName(caPoolName: string): string | number;
    /**
     * Parse the location from CaPool resource.
     *
     * @param {string} caPoolName
     *   A fully-qualified path representing CaPool resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCaPoolName(caPoolName: string): string | number;
    /**
     * Parse the ca_pool from CaPool resource.
     *
     * @param {string} caPoolName
     *   A fully-qualified path representing CaPool resource.
     * @returns {string} A string representing the ca_pool.
     */
    matchCaPoolFromCaPoolName(caPoolName: string): string | number;
    /**
     * Return a fully-qualified certificate resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} ca_pool
     * @param {string} certificate
     * @returns {string} Resource name string.
     */
    certificatePath(project: string, location: string, caPool: string, certificate: string): string;
    /**
     * Parse the project from Certificate resource.
     *
     * @param {string} certificateName
     *   A fully-qualified path representing Certificate resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCertificateName(certificateName: string): string | number;
    /**
     * Parse the location from Certificate resource.
     *
     * @param {string} certificateName
     *   A fully-qualified path representing Certificate resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCertificateName(certificateName: string): string | number;
    /**
     * Parse the ca_pool from Certificate resource.
     *
     * @param {string} certificateName
     *   A fully-qualified path representing Certificate resource.
     * @returns {string} A string representing the ca_pool.
     */
    matchCaPoolFromCertificateName(certificateName: string): string | number;
    /**
     * Parse the certificate from Certificate resource.
     *
     * @param {string} certificateName
     *   A fully-qualified path representing Certificate resource.
     * @returns {string} A string representing the certificate.
     */
    matchCertificateFromCertificateName(certificateName: string): string | number;
    /**
     * Return a fully-qualified certificateAuthority resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} ca_pool
     * @param {string} certificate_authority
     * @returns {string} Resource name string.
     */
    certificateAuthorityPath(project: string, location: string, caPool: string, certificateAuthority: string): string;
    /**
     * Parse the project from CertificateAuthority resource.
     *
     * @param {string} certificateAuthorityName
     *   A fully-qualified path representing CertificateAuthority resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCertificateAuthorityName(certificateAuthorityName: string): string | number;
    /**
     * Parse the location from CertificateAuthority resource.
     *
     * @param {string} certificateAuthorityName
     *   A fully-qualified path representing CertificateAuthority resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCertificateAuthorityName(certificateAuthorityName: string): string | number;
    /**
     * Parse the ca_pool from CertificateAuthority resource.
     *
     * @param {string} certificateAuthorityName
     *   A fully-qualified path representing CertificateAuthority resource.
     * @returns {string} A string representing the ca_pool.
     */
    matchCaPoolFromCertificateAuthorityName(certificateAuthorityName: string): string | number;
    /**
     * Parse the certificate_authority from CertificateAuthority resource.
     *
     * @param {string} certificateAuthorityName
     *   A fully-qualified path representing CertificateAuthority resource.
     * @returns {string} A string representing the certificate_authority.
     */
    matchCertificateAuthorityFromCertificateAuthorityName(certificateAuthorityName: string): string | number;
    /**
     * Return a fully-qualified certificateRevocationList resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} ca_pool
     * @param {string} certificate_authority
     * @param {string} certificate_revocation_list
     * @returns {string} Resource name string.
     */
    certificateRevocationListPath(project: string, location: string, caPool: string, certificateAuthority: string, certificateRevocationList: string): string;
    /**
     * Parse the project from CertificateRevocationList resource.
     *
     * @param {string} certificateRevocationListName
     *   A fully-qualified path representing CertificateRevocationList resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCertificateRevocationListName(certificateRevocationListName: string): string | number;
    /**
     * Parse the location from CertificateRevocationList resource.
     *
     * @param {string} certificateRevocationListName
     *   A fully-qualified path representing CertificateRevocationList resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCertificateRevocationListName(certificateRevocationListName: string): string | number;
    /**
     * Parse the ca_pool from CertificateRevocationList resource.
     *
     * @param {string} certificateRevocationListName
     *   A fully-qualified path representing CertificateRevocationList resource.
     * @returns {string} A string representing the ca_pool.
     */
    matchCaPoolFromCertificateRevocationListName(certificateRevocationListName: string): string | number;
    /**
     * Parse the certificate_authority from CertificateRevocationList resource.
     *
     * @param {string} certificateRevocationListName
     *   A fully-qualified path representing CertificateRevocationList resource.
     * @returns {string} A string representing the certificate_authority.
     */
    matchCertificateAuthorityFromCertificateRevocationListName(certificateRevocationListName: string): string | number;
    /**
     * Parse the certificate_revocation_list from CertificateRevocationList resource.
     *
     * @param {string} certificateRevocationListName
     *   A fully-qualified path representing CertificateRevocationList resource.
     * @returns {string} A string representing the certificate_revocation_list.
     */
    matchCertificateRevocationListFromCertificateRevocationListName(certificateRevocationListName: string): string | number;
    /**
     * Return a fully-qualified certificateTemplate resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} certificate_template
     * @returns {string} Resource name string.
     */
    certificateTemplatePath(project: string, location: string, certificateTemplate: string): string;
    /**
     * Parse the project from CertificateTemplate resource.
     *
     * @param {string} certificateTemplateName
     *   A fully-qualified path representing CertificateTemplate resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCertificateTemplateName(certificateTemplateName: string): string | number;
    /**
     * Parse the location from CertificateTemplate resource.
     *
     * @param {string} certificateTemplateName
     *   A fully-qualified path representing CertificateTemplate resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCertificateTemplateName(certificateTemplateName: string): string | number;
    /**
     * Parse the certificate_template from CertificateTemplate resource.
     *
     * @param {string} certificateTemplateName
     *   A fully-qualified path representing CertificateTemplate resource.
     * @returns {string} A string representing the certificate_template.
     */
    matchCertificateTemplateFromCertificateTemplateName(certificateTemplateName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}

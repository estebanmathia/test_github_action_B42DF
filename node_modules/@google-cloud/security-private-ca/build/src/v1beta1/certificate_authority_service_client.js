"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertificateAuthorityServiceClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/certificate_authority_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./certificate_authority_service_client_config.json");
const version = require('../../../package.json').version;
/**
 *  {@link protos.google.cloud.security.privateca.v1beta1.CertificateAuthorityService|Certificate Authority Service} manages private
 *  certificate authorities and issued certificates.
 * @class
 * @memberof v1beta1
 */
class CertificateAuthorityServiceClient {
    /**
     * Construct an instance of CertificateAuthorityServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new CertificateAuthorityServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this
            .constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            certificatePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/certificateAuthorities/{certificate_authority}/certificates/{certificate}'),
            certificateAuthorityPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/certificateAuthorities/{certificate_authority}'),
            certificateRevocationListPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/certificateAuthorities/{certificate_authority}/certificateRevocationLists/{certificate_revocation_list}'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            reusableConfigPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/reusableConfigs/{reusable_config}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listCertificates: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'certificates'),
            listCertificateAuthorities: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'certificateAuthorities'),
            listCertificateRevocationLists: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'certificateRevocationLists'),
            listReusableConfigs: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'reusableConfigs'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback) {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.longrunning.Operations.CancelOperation',
                    post: '/v1beta1/{name=projects/*/locations/*/operations/*}:cancel',
                    body: '*',
                },
                {
                    selector: 'google.longrunning.Operations.DeleteOperation',
                    delete: '/v1beta1/{name=projects/*/locations/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v1beta1/{name=projects/*/locations/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v1beta1/{name=projects/*/locations/*}/operations',
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        const activateCertificateAuthorityResponse = protoFilesRoot.lookup('.google.cloud.security.privateca.v1beta1.CertificateAuthority');
        const activateCertificateAuthorityMetadata = protoFilesRoot.lookup('.google.cloud.security.privateca.v1beta1.OperationMetadata');
        const createCertificateAuthorityResponse = protoFilesRoot.lookup('.google.cloud.security.privateca.v1beta1.CertificateAuthority');
        const createCertificateAuthorityMetadata = protoFilesRoot.lookup('.google.cloud.security.privateca.v1beta1.OperationMetadata');
        const disableCertificateAuthorityResponse = protoFilesRoot.lookup('.google.cloud.security.privateca.v1beta1.CertificateAuthority');
        const disableCertificateAuthorityMetadata = protoFilesRoot.lookup('.google.cloud.security.privateca.v1beta1.OperationMetadata');
        const enableCertificateAuthorityResponse = protoFilesRoot.lookup('.google.cloud.security.privateca.v1beta1.CertificateAuthority');
        const enableCertificateAuthorityMetadata = protoFilesRoot.lookup('.google.cloud.security.privateca.v1beta1.OperationMetadata');
        const restoreCertificateAuthorityResponse = protoFilesRoot.lookup('.google.cloud.security.privateca.v1beta1.CertificateAuthority');
        const restoreCertificateAuthorityMetadata = protoFilesRoot.lookup('.google.cloud.security.privateca.v1beta1.OperationMetadata');
        const scheduleDeleteCertificateAuthorityResponse = protoFilesRoot.lookup('.google.cloud.security.privateca.v1beta1.CertificateAuthority');
        const scheduleDeleteCertificateAuthorityMetadata = protoFilesRoot.lookup('.google.cloud.security.privateca.v1beta1.OperationMetadata');
        const updateCertificateAuthorityResponse = protoFilesRoot.lookup('.google.cloud.security.privateca.v1beta1.CertificateAuthority');
        const updateCertificateAuthorityMetadata = protoFilesRoot.lookup('.google.cloud.security.privateca.v1beta1.OperationMetadata');
        const updateCertificateRevocationListResponse = protoFilesRoot.lookup('.google.cloud.security.privateca.v1beta1.CertificateRevocationList');
        const updateCertificateRevocationListMetadata = protoFilesRoot.lookup('.google.cloud.security.privateca.v1beta1.OperationMetadata');
        this.descriptors.longrunning = {
            activateCertificateAuthority: new this._gaxModule.LongrunningDescriptor(this.operationsClient, activateCertificateAuthorityResponse.decode.bind(activateCertificateAuthorityResponse), activateCertificateAuthorityMetadata.decode.bind(activateCertificateAuthorityMetadata)),
            createCertificateAuthority: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createCertificateAuthorityResponse.decode.bind(createCertificateAuthorityResponse), createCertificateAuthorityMetadata.decode.bind(createCertificateAuthorityMetadata)),
            disableCertificateAuthority: new this._gaxModule.LongrunningDescriptor(this.operationsClient, disableCertificateAuthorityResponse.decode.bind(disableCertificateAuthorityResponse), disableCertificateAuthorityMetadata.decode.bind(disableCertificateAuthorityMetadata)),
            enableCertificateAuthority: new this._gaxModule.LongrunningDescriptor(this.operationsClient, enableCertificateAuthorityResponse.decode.bind(enableCertificateAuthorityResponse), enableCertificateAuthorityMetadata.decode.bind(enableCertificateAuthorityMetadata)),
            restoreCertificateAuthority: new this._gaxModule.LongrunningDescriptor(this.operationsClient, restoreCertificateAuthorityResponse.decode.bind(restoreCertificateAuthorityResponse), restoreCertificateAuthorityMetadata.decode.bind(restoreCertificateAuthorityMetadata)),
            scheduleDeleteCertificateAuthority: new this._gaxModule.LongrunningDescriptor(this.operationsClient, scheduleDeleteCertificateAuthorityResponse.decode.bind(scheduleDeleteCertificateAuthorityResponse), scheduleDeleteCertificateAuthorityMetadata.decode.bind(scheduleDeleteCertificateAuthorityMetadata)),
            updateCertificateAuthority: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateCertificateAuthorityResponse.decode.bind(updateCertificateAuthorityResponse), updateCertificateAuthorityMetadata.decode.bind(updateCertificateAuthorityMetadata)),
            updateCertificateRevocationList: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateCertificateRevocationListResponse.decode.bind(updateCertificateRevocationListResponse), updateCertificateRevocationListMetadata.decode.bind(updateCertificateRevocationListMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.security.privateca.v1beta1.CertificateAuthorityService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.certificateAuthorityServiceStub) {
            return this.certificateAuthorityServiceStub;
        }
        // Put together the "service stub" for
        // google.cloud.security.privateca.v1beta1.CertificateAuthorityService.
        this.certificateAuthorityServiceStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.security.privateca.v1beta1.CertificateAuthorityService')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.security.privateca.v1beta1
                    .CertificateAuthorityService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const certificateAuthorityServiceStubMethods = [
            'createCertificate',
            'getCertificate',
            'listCertificates',
            'revokeCertificate',
            'updateCertificate',
            'activateCertificateAuthority',
            'createCertificateAuthority',
            'disableCertificateAuthority',
            'enableCertificateAuthority',
            'fetchCertificateAuthorityCsr',
            'getCertificateAuthority',
            'listCertificateAuthorities',
            'restoreCertificateAuthority',
            'scheduleDeleteCertificateAuthority',
            'updateCertificateAuthority',
            'getCertificateRevocationList',
            'listCertificateRevocationLists',
            'updateCertificateRevocationList',
            'getReusableConfig',
            'listReusableConfigs',
        ];
        for (const methodName of certificateAuthorityServiceStubMethods) {
            const callPromise = this.certificateAuthorityServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.certificateAuthorityServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'privateca.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'privateca.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    createCertificate(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createCertificate(request, options, callback);
    }
    getCertificate(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getCertificate(request, options, callback);
    }
    revokeCertificate(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.revokeCertificate(request, options, callback);
    }
    updateCertificate(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'certificate.name': (_a = request.certificate.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateCertificate(request, options, callback);
    }
    fetchCertificateAuthorityCsr(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.fetchCertificateAuthorityCsr(request, options, callback);
    }
    getCertificateAuthority(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getCertificateAuthority(request, options, callback);
    }
    getCertificateRevocationList(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getCertificateRevocationList(request, options, callback);
    }
    getReusableConfig(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getReusableConfig(request, options, callback);
    }
    activateCertificateAuthority(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.activateCertificateAuthority(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `activateCertificateAuthority()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/certificate_authority_service.activate_certificate_authority.js</caption>
     * region_tag:privateca_v1beta1_generated_CertificateAuthorityService_ActivateCertificateAuthority_async
     */
    async checkActivateCertificateAuthorityProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.activateCertificateAuthority, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createCertificateAuthority(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createCertificateAuthority(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createCertificateAuthority()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/certificate_authority_service.create_certificate_authority.js</caption>
     * region_tag:privateca_v1beta1_generated_CertificateAuthorityService_CreateCertificateAuthority_async
     */
    async checkCreateCertificateAuthorityProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createCertificateAuthority, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    disableCertificateAuthority(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.disableCertificateAuthority(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `disableCertificateAuthority()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/certificate_authority_service.disable_certificate_authority.js</caption>
     * region_tag:privateca_v1beta1_generated_CertificateAuthorityService_DisableCertificateAuthority_async
     */
    async checkDisableCertificateAuthorityProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.disableCertificateAuthority, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    enableCertificateAuthority(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.enableCertificateAuthority(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `enableCertificateAuthority()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/certificate_authority_service.enable_certificate_authority.js</caption>
     * region_tag:privateca_v1beta1_generated_CertificateAuthorityService_EnableCertificateAuthority_async
     */
    async checkEnableCertificateAuthorityProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.enableCertificateAuthority, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    restoreCertificateAuthority(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.restoreCertificateAuthority(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `restoreCertificateAuthority()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/certificate_authority_service.restore_certificate_authority.js</caption>
     * region_tag:privateca_v1beta1_generated_CertificateAuthorityService_RestoreCertificateAuthority_async
     */
    async checkRestoreCertificateAuthorityProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.restoreCertificateAuthority, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    scheduleDeleteCertificateAuthority(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.scheduleDeleteCertificateAuthority(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `scheduleDeleteCertificateAuthority()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/certificate_authority_service.schedule_delete_certificate_authority.js</caption>
     * region_tag:privateca_v1beta1_generated_CertificateAuthorityService_ScheduleDeleteCertificateAuthority_async
     */
    async checkScheduleDeleteCertificateAuthorityProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.scheduleDeleteCertificateAuthority, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateCertificateAuthority(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'certificate_authority.name': (_a = request.certificateAuthority.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateCertificateAuthority(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateCertificateAuthority()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/certificate_authority_service.update_certificate_authority.js</caption>
     * region_tag:privateca_v1beta1_generated_CertificateAuthorityService_UpdateCertificateAuthority_async
     */
    async checkUpdateCertificateAuthorityProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateCertificateAuthority, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateCertificateRevocationList(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'certificate_revocation_list.name': (_a = request.certificateRevocationList.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateCertificateRevocationList(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateCertificateRevocationList()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/certificate_authority_service.update_certificate_revocation_list.js</caption>
     * region_tag:privateca_v1beta1_generated_CertificateAuthorityService_UpdateCertificateRevocationList_async
     */
    async checkUpdateCertificateRevocationListProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateCertificateRevocationList, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listCertificates(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listCertificates(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1beta1.Certificate|Certificates}, in the format
     *   `projects/* /locations/* /certificateauthorities/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1beta1.Certificate|Certificates} to include in the
     *   response. Further {@link protos.google.cloud.security.privateca.v1beta1.Certificate|Certificates} can subsequently be obtained
     *   by including the
     *   {@link protos.google.cloud.security.privateca.v1beta1.ListCertificatesResponse.next_page_token|ListCertificatesResponse.next_page_token} in a subsequent
     *   request. If unspecified, the server will pick an appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1beta1.ListCertificatesResponse.next_page_token|ListCertificatesResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response. For details
     *   on supported filters and syntax, see [Certificates Filtering
     *   documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#filtering_support).
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted. For details on supported fields
     *   and syntax, see [Certificates Sorting
     *   documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#sorting_support).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.security.privateca.v1beta1.Certificate|Certificate} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCertificatesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificatesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCertificates'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCertificates.createStream(this.innerApiCalls.listCertificates, request, callSettings);
    }
    /**
     * Equivalent to `listCertificates`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1beta1.Certificate|Certificates}, in the format
     *   `projects/* /locations/* /certificateauthorities/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1beta1.Certificate|Certificates} to include in the
     *   response. Further {@link protos.google.cloud.security.privateca.v1beta1.Certificate|Certificates} can subsequently be obtained
     *   by including the
     *   {@link protos.google.cloud.security.privateca.v1beta1.ListCertificatesResponse.next_page_token|ListCertificatesResponse.next_page_token} in a subsequent
     *   request. If unspecified, the server will pick an appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1beta1.ListCertificatesResponse.next_page_token|ListCertificatesResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response. For details
     *   on supported filters and syntax, see [Certificates Filtering
     *   documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#filtering_support).
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted. For details on supported fields
     *   and syntax, see [Certificates Sorting
     *   documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#sorting_support).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.security.privateca.v1beta1.Certificate|Certificate}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/certificate_authority_service.list_certificates.js</caption>
     * region_tag:privateca_v1beta1_generated_CertificateAuthorityService_ListCertificates_async
     */
    listCertificatesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCertificates'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCertificates.asyncIterate(this.innerApiCalls['listCertificates'], request, callSettings);
    }
    listCertificateAuthorities(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listCertificateAuthorities(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities}, in the format
     *   `projects/* /locations/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of {@link protos.google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities} to
     *   include in the response.
     *   Further {@link protos.google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities} can subsequently be
     *   obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesResponse.next_page_token|ListCertificateAuthoritiesResponse.next_page_token} in a subsequent
     *   request. If unspecified, the server will pick an appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesResponse.next_page_token|ListCertificateAuthoritiesResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCertificateAuthoritiesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateAuthoritiesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCertificateAuthorities'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCertificateAuthorities.createStream(this.innerApiCalls.listCertificateAuthorities, request, callSettings);
    }
    /**
     * Equivalent to `listCertificateAuthorities`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities}, in the format
     *   `projects/* /locations/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of {@link protos.google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities} to
     *   include in the response.
     *   Further {@link protos.google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthorities} can subsequently be
     *   obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesResponse.next_page_token|ListCertificateAuthoritiesResponse.next_page_token} in a subsequent
     *   request. If unspecified, the server will pick an appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1beta1.ListCertificateAuthoritiesResponse.next_page_token|ListCertificateAuthoritiesResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.security.privateca.v1beta1.CertificateAuthority|CertificateAuthority}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/certificate_authority_service.list_certificate_authorities.js</caption>
     * region_tag:privateca_v1beta1_generated_CertificateAuthorityService_ListCertificateAuthorities_async
     */
    listCertificateAuthoritiesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCertificateAuthorities'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCertificateAuthorities.asyncIterate(this.innerApiCalls['listCertificateAuthorities'], request, callSettings);
    }
    listCertificateRevocationLists(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listCertificateRevocationLists(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationLists}, in the format
     *   `projects/* /locations/* /certificateauthorities/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationLists} to include in the
     *   response. Further {@link protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationLists}
     *   can subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsResponse.next_page_token|ListCertificateRevocationListsResponse.next_page_token} in a subsequent
     *   request. If unspecified, the server will pick an appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsResponse.next_page_token|ListCertificateRevocationListsResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationList} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCertificateRevocationListsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listCertificateRevocationListsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCertificateRevocationLists'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCertificateRevocationLists.createStream(this.innerApiCalls.listCertificateRevocationLists, request, callSettings);
    }
    /**
     * Equivalent to `listCertificateRevocationLists`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationLists}, in the format
     *   `projects/* /locations/* /certificateauthorities/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationLists} to include in the
     *   response. Further {@link protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationLists}
     *   can subsequently be obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsResponse.next_page_token|ListCertificateRevocationListsResponse.next_page_token} in a subsequent
     *   request. If unspecified, the server will pick an appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1beta1.ListCertificateRevocationListsResponse.next_page_token|ListCertificateRevocationListsResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.security.privateca.v1beta1.CertificateRevocationList|CertificateRevocationList}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/certificate_authority_service.list_certificate_revocation_lists.js</caption>
     * region_tag:privateca_v1beta1_generated_CertificateAuthorityService_ListCertificateRevocationLists_async
     */
    listCertificateRevocationListsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listCertificateRevocationLists'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCertificateRevocationLists.asyncIterate(this.innerApiCalls['listCertificateRevocationLists'], request, callSettings);
    }
    listReusableConfigs(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listReusableConfigs(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfigs}, in the format
     *   `projects/* /locations/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfigs} to include in the response.
     *   Further {@link protos.google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfigs} can subsequently be
     *   obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1beta1.ListReusableConfigsResponse.next_page_token|ListReusableConfigsResponse.next_page_token} in a subsequent request. If
     *   unspecified, the server will pick an appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1beta1.ListReusableConfigsResponse.next_page_token|ListReusableConfigsResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfig} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listReusableConfigsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listReusableConfigsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listReusableConfigs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listReusableConfigs.createStream(this.innerApiCalls.listReusableConfigs, request, callSettings);
    }
    /**
     * Equivalent to `listReusableConfigs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location associated with the
     *   {@link protos.google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfigs}, in the format
     *   `projects/* /locations/*`.
     * @param {number} [request.pageSize]
     *   Optional. Limit on the number of
     *   {@link protos.google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfigs} to include in the response.
     *   Further {@link protos.google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfigs} can subsequently be
     *   obtained by including the
     *   {@link protos.google.cloud.security.privateca.v1beta1.ListReusableConfigsResponse.next_page_token|ListReusableConfigsResponse.next_page_token} in a subsequent request. If
     *   unspecified, the server will pick an appropriate default.
     * @param {string} [request.pageToken]
     *   Optional. Pagination token, returned earlier via
     *   {@link protos.google.cloud.security.privateca.v1beta1.ListReusableConfigsResponse.next_page_token|ListReusableConfigsResponse.next_page_token}.
     * @param {string} [request.filter]
     *   Optional. Only include resources that match the filter in the response.
     * @param {string} [request.orderBy]
     *   Optional. Specify how the results should be sorted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.security.privateca.v1beta1.ReusableConfig|ReusableConfig}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/certificate_authority_service.list_reusable_configs.js</caption>
     * region_tag:privateca_v1beta1_generated_CertificateAuthorityService_ListReusableConfigs_async
     */
    listReusableConfigsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listReusableConfigs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listReusableConfigs.asyncIterate(this.innerApiCalls['listReusableConfigs'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified certificate resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} certificate_authority
     * @param {string} certificate
     * @returns {string} Resource name string.
     */
    certificatePath(project, location, certificateAuthority, certificate) {
        return this.pathTemplates.certificatePathTemplate.render({
            project: project,
            location: location,
            certificate_authority: certificateAuthority,
            certificate: certificate,
        });
    }
    /**
     * Parse the project from Certificate resource.
     *
     * @param {string} certificateName
     *   A fully-qualified path representing Certificate resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCertificateName(certificateName) {
        return this.pathTemplates.certificatePathTemplate.match(certificateName)
            .project;
    }
    /**
     * Parse the location from Certificate resource.
     *
     * @param {string} certificateName
     *   A fully-qualified path representing Certificate resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCertificateName(certificateName) {
        return this.pathTemplates.certificatePathTemplate.match(certificateName)
            .location;
    }
    /**
     * Parse the certificate_authority from Certificate resource.
     *
     * @param {string} certificateName
     *   A fully-qualified path representing Certificate resource.
     * @returns {string} A string representing the certificate_authority.
     */
    matchCertificateAuthorityFromCertificateName(certificateName) {
        return this.pathTemplates.certificatePathTemplate.match(certificateName)
            .certificate_authority;
    }
    /**
     * Parse the certificate from Certificate resource.
     *
     * @param {string} certificateName
     *   A fully-qualified path representing Certificate resource.
     * @returns {string} A string representing the certificate.
     */
    matchCertificateFromCertificateName(certificateName) {
        return this.pathTemplates.certificatePathTemplate.match(certificateName)
            .certificate;
    }
    /**
     * Return a fully-qualified certificateAuthority resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} certificate_authority
     * @returns {string} Resource name string.
     */
    certificateAuthorityPath(project, location, certificateAuthority) {
        return this.pathTemplates.certificateAuthorityPathTemplate.render({
            project: project,
            location: location,
            certificate_authority: certificateAuthority,
        });
    }
    /**
     * Parse the project from CertificateAuthority resource.
     *
     * @param {string} certificateAuthorityName
     *   A fully-qualified path representing CertificateAuthority resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCertificateAuthorityName(certificateAuthorityName) {
        return this.pathTemplates.certificateAuthorityPathTemplate.match(certificateAuthorityName).project;
    }
    /**
     * Parse the location from CertificateAuthority resource.
     *
     * @param {string} certificateAuthorityName
     *   A fully-qualified path representing CertificateAuthority resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCertificateAuthorityName(certificateAuthorityName) {
        return this.pathTemplates.certificateAuthorityPathTemplate.match(certificateAuthorityName).location;
    }
    /**
     * Parse the certificate_authority from CertificateAuthority resource.
     *
     * @param {string} certificateAuthorityName
     *   A fully-qualified path representing CertificateAuthority resource.
     * @returns {string} A string representing the certificate_authority.
     */
    matchCertificateAuthorityFromCertificateAuthorityName(certificateAuthorityName) {
        return this.pathTemplates.certificateAuthorityPathTemplate.match(certificateAuthorityName).certificate_authority;
    }
    /**
     * Return a fully-qualified certificateRevocationList resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} certificate_authority
     * @param {string} certificate_revocation_list
     * @returns {string} Resource name string.
     */
    certificateRevocationListPath(project, location, certificateAuthority, certificateRevocationList) {
        return this.pathTemplates.certificateRevocationListPathTemplate.render({
            project: project,
            location: location,
            certificate_authority: certificateAuthority,
            certificate_revocation_list: certificateRevocationList,
        });
    }
    /**
     * Parse the project from CertificateRevocationList resource.
     *
     * @param {string} certificateRevocationListName
     *   A fully-qualified path representing CertificateRevocationList resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCertificateRevocationListName(certificateRevocationListName) {
        return this.pathTemplates.certificateRevocationListPathTemplate.match(certificateRevocationListName).project;
    }
    /**
     * Parse the location from CertificateRevocationList resource.
     *
     * @param {string} certificateRevocationListName
     *   A fully-qualified path representing CertificateRevocationList resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCertificateRevocationListName(certificateRevocationListName) {
        return this.pathTemplates.certificateRevocationListPathTemplate.match(certificateRevocationListName).location;
    }
    /**
     * Parse the certificate_authority from CertificateRevocationList resource.
     *
     * @param {string} certificateRevocationListName
     *   A fully-qualified path representing CertificateRevocationList resource.
     * @returns {string} A string representing the certificate_authority.
     */
    matchCertificateAuthorityFromCertificateRevocationListName(certificateRevocationListName) {
        return this.pathTemplates.certificateRevocationListPathTemplate.match(certificateRevocationListName).certificate_authority;
    }
    /**
     * Parse the certificate_revocation_list from CertificateRevocationList resource.
     *
     * @param {string} certificateRevocationListName
     *   A fully-qualified path representing CertificateRevocationList resource.
     * @returns {string} A string representing the certificate_revocation_list.
     */
    matchCertificateRevocationListFromCertificateRevocationListName(certificateRevocationListName) {
        return this.pathTemplates.certificateRevocationListPathTemplate.match(certificateRevocationListName).certificate_revocation_list;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified reusableConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} reusable_config
     * @returns {string} Resource name string.
     */
    reusableConfigPath(project, location, reusableConfig) {
        return this.pathTemplates.reusableConfigPathTemplate.render({
            project: project,
            location: location,
            reusable_config: reusableConfig,
        });
    }
    /**
     * Parse the project from ReusableConfig resource.
     *
     * @param {string} reusableConfigName
     *   A fully-qualified path representing ReusableConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromReusableConfigName(reusableConfigName) {
        return this.pathTemplates.reusableConfigPathTemplate.match(reusableConfigName).project;
    }
    /**
     * Parse the location from ReusableConfig resource.
     *
     * @param {string} reusableConfigName
     *   A fully-qualified path representing ReusableConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromReusableConfigName(reusableConfigName) {
        return this.pathTemplates.reusableConfigPathTemplate.match(reusableConfigName).location;
    }
    /**
     * Parse the reusable_config from ReusableConfig resource.
     *
     * @param {string} reusableConfigName
     *   A fully-qualified path representing ReusableConfig resource.
     * @returns {string} A string representing the reusable_config.
     */
    matchReusableConfigFromReusableConfigName(reusableConfigName) {
        return this.pathTemplates.reusableConfigPathTemplate.match(reusableConfigName).reusable_config;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.certificateAuthorityServiceStub && !this._terminated) {
            return this.certificateAuthorityServiceStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.CertificateAuthorityServiceClient = CertificateAuthorityServiceClient;
//# sourceMappingURL=certificate_authority_service_client.js.map
/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Service Directory API for registering services. It defines the following
 *  resource model:
 *
 *  - The API has a collection of
 *  {@link protos.google.cloud.servicedirectory.v1.Namespace|Namespace}
 *  resources, named `projects/* /locations/* /namespaces/*`.
 *
 *  - Each Namespace has a collection of
 *  {@link protos.google.cloud.servicedirectory.v1.Service|Service} resources, named
 *  `projects/* /locations/* /namespaces/* /services/*`.
 *
 *  - Each Service has a collection of
 *  {@link protos.google.cloud.servicedirectory.v1.Endpoint|Endpoint}
 *  resources, named
 *  `projects/* /locations/* /namespaces/* /services/* /endpoints/*`.
 * @class
 * @memberof v1
 */
export declare class RegistrationServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    registrationServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of RegistrationServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new RegistrationServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Creates a namespace, and returns the new namespace.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the project and location the namespace
     *   will be created in.
     * @param {string} request.namespaceId
     *   Required. The Resource ID must be 1-63 characters long, and comply with
     *   <a href="https://www.ietf.org/rfc/rfc1035.txt" target="_blank">RFC1035</a>.
     *   Specifically, the name must be 1-63 characters long and match the regular
     *   expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first
     *   character must be a lowercase letter, and all following characters must
     *   be a dash, lowercase letter, or digit, except the last character, which
     *   cannot be a dash.
     * @param {google.cloud.servicedirectory.v1.Namespace} request.namespace
     *   Required. A namespace with initial fields set.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.servicedirectory.v1.Namespace|Namespace}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.create_namespace.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_CreateNamespace_async
     */
    createNamespace(request?: protos.google.cloud.servicedirectory.v1.ICreateNamespaceRequest, options?: CallOptions): Promise<[
        protos.google.cloud.servicedirectory.v1.INamespace,
        (protos.google.cloud.servicedirectory.v1.ICreateNamespaceRequest | undefined),
        {} | undefined
    ]>;
    createNamespace(request: protos.google.cloud.servicedirectory.v1.ICreateNamespaceRequest, options: CallOptions, callback: Callback<protos.google.cloud.servicedirectory.v1.INamespace, protos.google.cloud.servicedirectory.v1.ICreateNamespaceRequest | null | undefined, {} | null | undefined>): void;
    createNamespace(request: protos.google.cloud.servicedirectory.v1.ICreateNamespaceRequest, callback: Callback<protos.google.cloud.servicedirectory.v1.INamespace, protos.google.cloud.servicedirectory.v1.ICreateNamespaceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets a namespace.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the namespace to retrieve.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.servicedirectory.v1.Namespace|Namespace}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.get_namespace.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_GetNamespace_async
     */
    getNamespace(request?: protos.google.cloud.servicedirectory.v1.IGetNamespaceRequest, options?: CallOptions): Promise<[
        protos.google.cloud.servicedirectory.v1.INamespace,
        protos.google.cloud.servicedirectory.v1.IGetNamespaceRequest | undefined,
        {} | undefined
    ]>;
    getNamespace(request: protos.google.cloud.servicedirectory.v1.IGetNamespaceRequest, options: CallOptions, callback: Callback<protos.google.cloud.servicedirectory.v1.INamespace, protos.google.cloud.servicedirectory.v1.IGetNamespaceRequest | null | undefined, {} | null | undefined>): void;
    getNamespace(request: protos.google.cloud.servicedirectory.v1.IGetNamespaceRequest, callback: Callback<protos.google.cloud.servicedirectory.v1.INamespace, protos.google.cloud.servicedirectory.v1.IGetNamespaceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates a namespace.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.servicedirectory.v1.Namespace} request.namespace
     *   Required. The updated namespace.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. List of fields to be updated in this request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.servicedirectory.v1.Namespace|Namespace}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.update_namespace.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_UpdateNamespace_async
     */
    updateNamespace(request?: protos.google.cloud.servicedirectory.v1.IUpdateNamespaceRequest, options?: CallOptions): Promise<[
        protos.google.cloud.servicedirectory.v1.INamespace,
        (protos.google.cloud.servicedirectory.v1.IUpdateNamespaceRequest | undefined),
        {} | undefined
    ]>;
    updateNamespace(request: protos.google.cloud.servicedirectory.v1.IUpdateNamespaceRequest, options: CallOptions, callback: Callback<protos.google.cloud.servicedirectory.v1.INamespace, protos.google.cloud.servicedirectory.v1.IUpdateNamespaceRequest | null | undefined, {} | null | undefined>): void;
    updateNamespace(request: protos.google.cloud.servicedirectory.v1.IUpdateNamespaceRequest, callback: Callback<protos.google.cloud.servicedirectory.v1.INamespace, protos.google.cloud.servicedirectory.v1.IUpdateNamespaceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes a namespace. This also deletes all services and endpoints in
     * the namespace.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the namespace to delete.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.delete_namespace.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_DeleteNamespace_async
     */
    deleteNamespace(request?: protos.google.cloud.servicedirectory.v1.IDeleteNamespaceRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        (protos.google.cloud.servicedirectory.v1.IDeleteNamespaceRequest | undefined),
        {} | undefined
    ]>;
    deleteNamespace(request: protos.google.cloud.servicedirectory.v1.IDeleteNamespaceRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.servicedirectory.v1.IDeleteNamespaceRequest | null | undefined, {} | null | undefined>): void;
    deleteNamespace(request: protos.google.cloud.servicedirectory.v1.IDeleteNamespaceRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.servicedirectory.v1.IDeleteNamespaceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a service, and returns the new service.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the namespace this service will belong to.
     * @param {string} request.serviceId
     *   Required. The Resource ID must be 1-63 characters long, and comply with
     *   <a href="https://www.ietf.org/rfc/rfc1035.txt" target="_blank">RFC1035</a>.
     *   Specifically, the name must be 1-63 characters long and match the regular
     *   expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first
     *   character must be a lowercase letter, and all following characters must
     *   be a dash, lowercase letter, or digit, except the last character, which
     *   cannot be a dash.
     * @param {google.cloud.servicedirectory.v1.Service} request.service
     *   Required. A service  with initial fields set.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.servicedirectory.v1.Service|Service}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.create_service.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_CreateService_async
     */
    createService(request?: protos.google.cloud.servicedirectory.v1.ICreateServiceRequest, options?: CallOptions): Promise<[
        protos.google.cloud.servicedirectory.v1.IService,
        protos.google.cloud.servicedirectory.v1.ICreateServiceRequest | undefined,
        {} | undefined
    ]>;
    createService(request: protos.google.cloud.servicedirectory.v1.ICreateServiceRequest, options: CallOptions, callback: Callback<protos.google.cloud.servicedirectory.v1.IService, protos.google.cloud.servicedirectory.v1.ICreateServiceRequest | null | undefined, {} | null | undefined>): void;
    createService(request: protos.google.cloud.servicedirectory.v1.ICreateServiceRequest, callback: Callback<protos.google.cloud.servicedirectory.v1.IService, protos.google.cloud.servicedirectory.v1.ICreateServiceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets a service.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the service to get.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.servicedirectory.v1.Service|Service}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.get_service.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_GetService_async
     */
    getService(request?: protos.google.cloud.servicedirectory.v1.IGetServiceRequest, options?: CallOptions): Promise<[
        protos.google.cloud.servicedirectory.v1.IService,
        protos.google.cloud.servicedirectory.v1.IGetServiceRequest | undefined,
        {} | undefined
    ]>;
    getService(request: protos.google.cloud.servicedirectory.v1.IGetServiceRequest, options: CallOptions, callback: Callback<protos.google.cloud.servicedirectory.v1.IService, protos.google.cloud.servicedirectory.v1.IGetServiceRequest | null | undefined, {} | null | undefined>): void;
    getService(request: protos.google.cloud.servicedirectory.v1.IGetServiceRequest, callback: Callback<protos.google.cloud.servicedirectory.v1.IService, protos.google.cloud.servicedirectory.v1.IGetServiceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates a service.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.servicedirectory.v1.Service} request.service
     *   Required. The updated service.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. List of fields to be updated in this request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.servicedirectory.v1.Service|Service}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.update_service.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_UpdateService_async
     */
    updateService(request?: protos.google.cloud.servicedirectory.v1.IUpdateServiceRequest, options?: CallOptions): Promise<[
        protos.google.cloud.servicedirectory.v1.IService,
        protos.google.cloud.servicedirectory.v1.IUpdateServiceRequest | undefined,
        {} | undefined
    ]>;
    updateService(request: protos.google.cloud.servicedirectory.v1.IUpdateServiceRequest, options: CallOptions, callback: Callback<protos.google.cloud.servicedirectory.v1.IService, protos.google.cloud.servicedirectory.v1.IUpdateServiceRequest | null | undefined, {} | null | undefined>): void;
    updateService(request: protos.google.cloud.servicedirectory.v1.IUpdateServiceRequest, callback: Callback<protos.google.cloud.servicedirectory.v1.IService, protos.google.cloud.servicedirectory.v1.IUpdateServiceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes a service. This also deletes all endpoints associated with
     * the service.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the service to delete.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.delete_service.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_DeleteService_async
     */
    deleteService(request?: protos.google.cloud.servicedirectory.v1.IDeleteServiceRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.servicedirectory.v1.IDeleteServiceRequest | undefined,
        {} | undefined
    ]>;
    deleteService(request: protos.google.cloud.servicedirectory.v1.IDeleteServiceRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.servicedirectory.v1.IDeleteServiceRequest | null | undefined, {} | null | undefined>): void;
    deleteService(request: protos.google.cloud.servicedirectory.v1.IDeleteServiceRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.servicedirectory.v1.IDeleteServiceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates an endpoint, and returns the new endpoint.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the service that this endpoint provides.
     * @param {string} request.endpointId
     *   Required. The Resource ID must be 1-63 characters long, and comply with
     *   <a href="https://www.ietf.org/rfc/rfc1035.txt" target="_blank">RFC1035</a>.
     *   Specifically, the name must be 1-63 characters long and match the regular
     *   expression `[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?` which means the first
     *   character must be a lowercase letter, and all following characters must
     *   be a dash, lowercase letter, or digit, except the last character, which
     *   cannot be a dash.
     * @param {google.cloud.servicedirectory.v1.Endpoint} request.endpoint
     *   Required. A endpoint with initial fields set.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.servicedirectory.v1.Endpoint|Endpoint}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.create_endpoint.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_CreateEndpoint_async
     */
    createEndpoint(request?: protos.google.cloud.servicedirectory.v1.ICreateEndpointRequest, options?: CallOptions): Promise<[
        protos.google.cloud.servicedirectory.v1.IEndpoint,
        (protos.google.cloud.servicedirectory.v1.ICreateEndpointRequest | undefined),
        {} | undefined
    ]>;
    createEndpoint(request: protos.google.cloud.servicedirectory.v1.ICreateEndpointRequest, options: CallOptions, callback: Callback<protos.google.cloud.servicedirectory.v1.IEndpoint, protos.google.cloud.servicedirectory.v1.ICreateEndpointRequest | null | undefined, {} | null | undefined>): void;
    createEndpoint(request: protos.google.cloud.servicedirectory.v1.ICreateEndpointRequest, callback: Callback<protos.google.cloud.servicedirectory.v1.IEndpoint, protos.google.cloud.servicedirectory.v1.ICreateEndpointRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets an endpoint.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the endpoint to get.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.servicedirectory.v1.Endpoint|Endpoint}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.get_endpoint.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_GetEndpoint_async
     */
    getEndpoint(request?: protos.google.cloud.servicedirectory.v1.IGetEndpointRequest, options?: CallOptions): Promise<[
        protos.google.cloud.servicedirectory.v1.IEndpoint,
        protos.google.cloud.servicedirectory.v1.IGetEndpointRequest | undefined,
        {} | undefined
    ]>;
    getEndpoint(request: protos.google.cloud.servicedirectory.v1.IGetEndpointRequest, options: CallOptions, callback: Callback<protos.google.cloud.servicedirectory.v1.IEndpoint, protos.google.cloud.servicedirectory.v1.IGetEndpointRequest | null | undefined, {} | null | undefined>): void;
    getEndpoint(request: protos.google.cloud.servicedirectory.v1.IGetEndpointRequest, callback: Callback<protos.google.cloud.servicedirectory.v1.IEndpoint, protos.google.cloud.servicedirectory.v1.IGetEndpointRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates an endpoint.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.servicedirectory.v1.Endpoint} request.endpoint
     *   Required. The updated endpoint.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. List of fields to be updated in this request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.servicedirectory.v1.Endpoint|Endpoint}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.update_endpoint.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_UpdateEndpoint_async
     */
    updateEndpoint(request?: protos.google.cloud.servicedirectory.v1.IUpdateEndpointRequest, options?: CallOptions): Promise<[
        protos.google.cloud.servicedirectory.v1.IEndpoint,
        (protos.google.cloud.servicedirectory.v1.IUpdateEndpointRequest | undefined),
        {} | undefined
    ]>;
    updateEndpoint(request: protos.google.cloud.servicedirectory.v1.IUpdateEndpointRequest, options: CallOptions, callback: Callback<protos.google.cloud.servicedirectory.v1.IEndpoint, protos.google.cloud.servicedirectory.v1.IUpdateEndpointRequest | null | undefined, {} | null | undefined>): void;
    updateEndpoint(request: protos.google.cloud.servicedirectory.v1.IUpdateEndpointRequest, callback: Callback<protos.google.cloud.servicedirectory.v1.IEndpoint, protos.google.cloud.servicedirectory.v1.IUpdateEndpointRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes an endpoint.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the endpoint to delete.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.delete_endpoint.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_DeleteEndpoint_async
     */
    deleteEndpoint(request?: protos.google.cloud.servicedirectory.v1.IDeleteEndpointRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        (protos.google.cloud.servicedirectory.v1.IDeleteEndpointRequest | undefined),
        {} | undefined
    ]>;
    deleteEndpoint(request: protos.google.cloud.servicedirectory.v1.IDeleteEndpointRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.servicedirectory.v1.IDeleteEndpointRequest | null | undefined, {} | null | undefined>): void;
    deleteEndpoint(request: protos.google.cloud.servicedirectory.v1.IDeleteEndpointRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.servicedirectory.v1.IDeleteEndpointRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets the IAM Policy for a resource (namespace or service only).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {google.iam.v1.GetPolicyOptions} request.options
     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
     *   `GetIamPolicy`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.iam.v1.Policy|Policy}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.get_iam_policy.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_GetIamPolicy_async
     */
    getIamPolicy(request?: protos.google.iam.v1.IGetIamPolicyRequest, options?: CallOptions): Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.IGetIamPolicyRequest | undefined,
        {} | undefined
    ]>;
    getIamPolicy(request: protos.google.iam.v1.IGetIamPolicyRequest, options: CallOptions, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.IGetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    getIamPolicy(request: protos.google.iam.v1.IGetIamPolicyRequest, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.IGetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Sets the IAM Policy for a resource (namespace or service only).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being specified.
     *   See the operation documentation for the appropriate value for this field.
     * @param {google.iam.v1.Policy} request.policy
     *   REQUIRED: The complete policy to be applied to the `resource`. The size of
     *   the policy is limited to a few 10s of KB. An empty policy is a
     *   valid policy but certain Cloud Platform services (such as Projects)
     *   might reject them.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
     *   the fields in the mask will be modified. If no mask is provided, the
     *   following default mask is used:
     *
     *   `paths: "bindings, etag"`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.iam.v1.Policy|Policy}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.set_iam_policy.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_SetIamPolicy_async
     */
    setIamPolicy(request?: protos.google.iam.v1.ISetIamPolicyRequest, options?: CallOptions): Promise<[
        protos.google.iam.v1.IPolicy,
        protos.google.iam.v1.ISetIamPolicyRequest | undefined,
        {} | undefined
    ]>;
    setIamPolicy(request: protos.google.iam.v1.ISetIamPolicyRequest, options: CallOptions, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.ISetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    setIamPolicy(request: protos.google.iam.v1.ISetIamPolicyRequest, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.ISetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Tests IAM permissions for a resource (namespace or service only).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see
     *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.iam.v1.TestIamPermissionsResponse|TestIamPermissionsResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.test_iam_permissions.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_TestIamPermissions_async
     */
    testIamPermissions(request?: protos.google.iam.v1.ITestIamPermissionsRequest, options?: CallOptions): Promise<[
        protos.google.iam.v1.ITestIamPermissionsResponse,
        protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
        {} | undefined
    ]>;
    testIamPermissions(request: protos.google.iam.v1.ITestIamPermissionsRequest, options: CallOptions, callback: Callback<protos.google.iam.v1.ITestIamPermissionsResponse, protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined, {} | null | undefined>): void;
    testIamPermissions(request: protos.google.iam.v1.ITestIamPermissionsRequest, callback: Callback<protos.google.iam.v1.ITestIamPermissionsResponse, protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Lists all namespaces.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the project and location whose namespaces
     *   you'd like to list.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. The next_page_token value returned from a previous List request,
     *   if any.
     * @param {string} [request.filter]
     *   Optional. The filter to list results by.
     *
     *   General `filter` string syntax:
     *   `<field> <operator> <value> (<logical connector>)`
     *
     *   *   `<field>` can be `name` or `labels.<key>` for map field
     *   *   `<operator>` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:`
     *       means `HAS`, and is roughly the same as `=`
     *   *   `<value>` must be the same data type as field
     *   *   `<logical connector>` can be `AND`, `OR`, `NOT`
     *
     *   Examples of valid filters:
     *
     *   *   `labels.owner` returns namespaces that have a label with the key
     *       `owner`, this is the same as `labels:owner`
     *   *   `labels.owner=sd` returns namespaces that have key/value
     *       `owner=sd`
     *   *   `name>projects/my-project/locations/us-east1/namespaces/namespace-c`
     *       returns namespaces that have name that is alphabetically later than the
     *       string, so "namespace-e" is returned but "namespace-a" is not
     *   *   `labels.owner!=sd AND labels.foo=bar` returns namespaces that have
     *       `owner` in label key but value is not `sd` AND have key/value `foo=bar`
     *   *   `doesnotexist.foo=bar` returns an empty list. Note that namespace
     *       doesn't have a field called "doesnotexist". Since the filter does not
     *       match any namespaces, it returns no results
     *
     *   For more information about filtering, see
     *   [API Filtering](https://aip.dev/160).
     * @param {string} [request.orderBy]
     *   Optional. The order to list results by.
     *
     *   General `order_by` string syntax: `<field> (<asc|desc>) (,)`
     *
     *   *   `<field>` allows value: `name`
     *   *   `<asc|desc>` ascending or descending order by `<field>`. If this is
     *       left blank, `asc` is used
     *
     *   Note that an empty `order_by` string results in default order, which is
     *   order by `name` in ascending order.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.servicedirectory.v1.Namespace|Namespace}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listNamespacesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listNamespaces(request?: protos.google.cloud.servicedirectory.v1.IListNamespacesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.servicedirectory.v1.INamespace[],
        protos.google.cloud.servicedirectory.v1.IListNamespacesRequest | null,
        protos.google.cloud.servicedirectory.v1.IListNamespacesResponse
    ]>;
    listNamespaces(request: protos.google.cloud.servicedirectory.v1.IListNamespacesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.servicedirectory.v1.IListNamespacesRequest, protos.google.cloud.servicedirectory.v1.IListNamespacesResponse | null | undefined, protos.google.cloud.servicedirectory.v1.INamespace>): void;
    listNamespaces(request: protos.google.cloud.servicedirectory.v1.IListNamespacesRequest, callback: PaginationCallback<protos.google.cloud.servicedirectory.v1.IListNamespacesRequest, protos.google.cloud.servicedirectory.v1.IListNamespacesResponse | null | undefined, protos.google.cloud.servicedirectory.v1.INamespace>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the project and location whose namespaces
     *   you'd like to list.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. The next_page_token value returned from a previous List request,
     *   if any.
     * @param {string} [request.filter]
     *   Optional. The filter to list results by.
     *
     *   General `filter` string syntax:
     *   `<field> <operator> <value> (<logical connector>)`
     *
     *   *   `<field>` can be `name` or `labels.<key>` for map field
     *   *   `<operator>` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:`
     *       means `HAS`, and is roughly the same as `=`
     *   *   `<value>` must be the same data type as field
     *   *   `<logical connector>` can be `AND`, `OR`, `NOT`
     *
     *   Examples of valid filters:
     *
     *   *   `labels.owner` returns namespaces that have a label with the key
     *       `owner`, this is the same as `labels:owner`
     *   *   `labels.owner=sd` returns namespaces that have key/value
     *       `owner=sd`
     *   *   `name>projects/my-project/locations/us-east1/namespaces/namespace-c`
     *       returns namespaces that have name that is alphabetically later than the
     *       string, so "namespace-e" is returned but "namespace-a" is not
     *   *   `labels.owner!=sd AND labels.foo=bar` returns namespaces that have
     *       `owner` in label key but value is not `sd` AND have key/value `foo=bar`
     *   *   `doesnotexist.foo=bar` returns an empty list. Note that namespace
     *       doesn't have a field called "doesnotexist". Since the filter does not
     *       match any namespaces, it returns no results
     *
     *   For more information about filtering, see
     *   [API Filtering](https://aip.dev/160).
     * @param {string} [request.orderBy]
     *   Optional. The order to list results by.
     *
     *   General `order_by` string syntax: `<field> (<asc|desc>) (,)`
     *
     *   *   `<field>` allows value: `name`
     *   *   `<asc|desc>` ascending or descending order by `<field>`. If this is
     *       left blank, `asc` is used
     *
     *   Note that an empty `order_by` string results in default order, which is
     *   order by `name` in ascending order.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.servicedirectory.v1.Namespace|Namespace} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listNamespacesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listNamespacesStream(request?: protos.google.cloud.servicedirectory.v1.IListNamespacesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listNamespaces`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the project and location whose namespaces
     *   you'd like to list.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. The next_page_token value returned from a previous List request,
     *   if any.
     * @param {string} [request.filter]
     *   Optional. The filter to list results by.
     *
     *   General `filter` string syntax:
     *   `<field> <operator> <value> (<logical connector>)`
     *
     *   *   `<field>` can be `name` or `labels.<key>` for map field
     *   *   `<operator>` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:`
     *       means `HAS`, and is roughly the same as `=`
     *   *   `<value>` must be the same data type as field
     *   *   `<logical connector>` can be `AND`, `OR`, `NOT`
     *
     *   Examples of valid filters:
     *
     *   *   `labels.owner` returns namespaces that have a label with the key
     *       `owner`, this is the same as `labels:owner`
     *   *   `labels.owner=sd` returns namespaces that have key/value
     *       `owner=sd`
     *   *   `name>projects/my-project/locations/us-east1/namespaces/namespace-c`
     *       returns namespaces that have name that is alphabetically later than the
     *       string, so "namespace-e" is returned but "namespace-a" is not
     *   *   `labels.owner!=sd AND labels.foo=bar` returns namespaces that have
     *       `owner` in label key but value is not `sd` AND have key/value `foo=bar`
     *   *   `doesnotexist.foo=bar` returns an empty list. Note that namespace
     *       doesn't have a field called "doesnotexist". Since the filter does not
     *       match any namespaces, it returns no results
     *
     *   For more information about filtering, see
     *   [API Filtering](https://aip.dev/160).
     * @param {string} [request.orderBy]
     *   Optional. The order to list results by.
     *
     *   General `order_by` string syntax: `<field> (<asc|desc>) (,)`
     *
     *   *   `<field>` allows value: `name`
     *   *   `<asc|desc>` ascending or descending order by `<field>`. If this is
     *       left blank, `asc` is used
     *
     *   Note that an empty `order_by` string results in default order, which is
     *   order by `name` in ascending order.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.servicedirectory.v1.Namespace|Namespace}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.list_namespaces.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_ListNamespaces_async
     */
    listNamespacesAsync(request?: protos.google.cloud.servicedirectory.v1.IListNamespacesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.servicedirectory.v1.INamespace>;
    /**
     * Lists all services belonging to a namespace.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the namespace whose services you'd
     *   like to list.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. The next_page_token value returned from a previous List request,
     *   if any.
     * @param {string} [request.filter]
     *   Optional. The filter to list results by.
     *
     *   General `filter` string syntax:
     *   `<field> <operator> <value> (<logical connector>)`
     *
     *   *   `<field>` can be `name` or `annotations.<key>` for map field
     *   *   `<operator>` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:`
     *       means `HAS`, and is roughly the same as `=`
     *   *   `<value>` must be the same data type as field
     *   *   `<logical connector>` can be `AND`, `OR`, `NOT`
     *
     *   Examples of valid filters:
     *
     *   *   `annotations.owner` returns services that have a annotation with the
     *       key `owner`, this is the same as `annotations:owner`
     *   *   `annotations.protocol=gRPC` returns services that have key/value
     *       `protocol=gRPC`
     *   *
     *   `name>projects/my-project/locations/us-east1/namespaces/my-namespace/services/service-c`
     *       returns services that have name that is alphabetically later than the
     *       string, so "service-e" is returned but "service-a" is not
     *   *   `annotations.owner!=sd AND annotations.foo=bar` returns services that
     *       have `owner` in annotation key but value is not `sd` AND have
     *       key/value `foo=bar`
     *   *   `doesnotexist.foo=bar` returns an empty list. Note that service
     *       doesn't have a field called "doesnotexist". Since the filter does not
     *       match any services, it returns no results
     *
     *   For more information about filtering, see
     *   [API Filtering](https://aip.dev/160).
     * @param {string} [request.orderBy]
     *   Optional. The order to list results by.
     *
     *   General `order_by` string syntax: `<field> (<asc|desc>) (,)`
     *
     *   *   `<field>` allows value: `name`
     *   *   `<asc|desc>` ascending or descending order by `<field>`. If this is
     *       left blank, `asc` is used
     *
     *   Note that an empty `order_by` string results in default order, which is
     *   order by `name` in ascending order.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.servicedirectory.v1.Service|Service}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listServicesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listServices(request?: protos.google.cloud.servicedirectory.v1.IListServicesRequest, options?: CallOptions): Promise<[
        protos.google.cloud.servicedirectory.v1.IService[],
        protos.google.cloud.servicedirectory.v1.IListServicesRequest | null,
        protos.google.cloud.servicedirectory.v1.IListServicesResponse
    ]>;
    listServices(request: protos.google.cloud.servicedirectory.v1.IListServicesRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.servicedirectory.v1.IListServicesRequest, protos.google.cloud.servicedirectory.v1.IListServicesResponse | null | undefined, protos.google.cloud.servicedirectory.v1.IService>): void;
    listServices(request: protos.google.cloud.servicedirectory.v1.IListServicesRequest, callback: PaginationCallback<protos.google.cloud.servicedirectory.v1.IListServicesRequest, protos.google.cloud.servicedirectory.v1.IListServicesResponse | null | undefined, protos.google.cloud.servicedirectory.v1.IService>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the namespace whose services you'd
     *   like to list.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. The next_page_token value returned from a previous List request,
     *   if any.
     * @param {string} [request.filter]
     *   Optional. The filter to list results by.
     *
     *   General `filter` string syntax:
     *   `<field> <operator> <value> (<logical connector>)`
     *
     *   *   `<field>` can be `name` or `annotations.<key>` for map field
     *   *   `<operator>` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:`
     *       means `HAS`, and is roughly the same as `=`
     *   *   `<value>` must be the same data type as field
     *   *   `<logical connector>` can be `AND`, `OR`, `NOT`
     *
     *   Examples of valid filters:
     *
     *   *   `annotations.owner` returns services that have a annotation with the
     *       key `owner`, this is the same as `annotations:owner`
     *   *   `annotations.protocol=gRPC` returns services that have key/value
     *       `protocol=gRPC`
     *   *
     *   `name>projects/my-project/locations/us-east1/namespaces/my-namespace/services/service-c`
     *       returns services that have name that is alphabetically later than the
     *       string, so "service-e" is returned but "service-a" is not
     *   *   `annotations.owner!=sd AND annotations.foo=bar` returns services that
     *       have `owner` in annotation key but value is not `sd` AND have
     *       key/value `foo=bar`
     *   *   `doesnotexist.foo=bar` returns an empty list. Note that service
     *       doesn't have a field called "doesnotexist". Since the filter does not
     *       match any services, it returns no results
     *
     *   For more information about filtering, see
     *   [API Filtering](https://aip.dev/160).
     * @param {string} [request.orderBy]
     *   Optional. The order to list results by.
     *
     *   General `order_by` string syntax: `<field> (<asc|desc>) (,)`
     *
     *   *   `<field>` allows value: `name`
     *   *   `<asc|desc>` ascending or descending order by `<field>`. If this is
     *       left blank, `asc` is used
     *
     *   Note that an empty `order_by` string results in default order, which is
     *   order by `name` in ascending order.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.servicedirectory.v1.Service|Service} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listServicesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listServicesStream(request?: protos.google.cloud.servicedirectory.v1.IListServicesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listServices`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the namespace whose services you'd
     *   like to list.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. The next_page_token value returned from a previous List request,
     *   if any.
     * @param {string} [request.filter]
     *   Optional. The filter to list results by.
     *
     *   General `filter` string syntax:
     *   `<field> <operator> <value> (<logical connector>)`
     *
     *   *   `<field>` can be `name` or `annotations.<key>` for map field
     *   *   `<operator>` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:`
     *       means `HAS`, and is roughly the same as `=`
     *   *   `<value>` must be the same data type as field
     *   *   `<logical connector>` can be `AND`, `OR`, `NOT`
     *
     *   Examples of valid filters:
     *
     *   *   `annotations.owner` returns services that have a annotation with the
     *       key `owner`, this is the same as `annotations:owner`
     *   *   `annotations.protocol=gRPC` returns services that have key/value
     *       `protocol=gRPC`
     *   *
     *   `name>projects/my-project/locations/us-east1/namespaces/my-namespace/services/service-c`
     *       returns services that have name that is alphabetically later than the
     *       string, so "service-e" is returned but "service-a" is not
     *   *   `annotations.owner!=sd AND annotations.foo=bar` returns services that
     *       have `owner` in annotation key but value is not `sd` AND have
     *       key/value `foo=bar`
     *   *   `doesnotexist.foo=bar` returns an empty list. Note that service
     *       doesn't have a field called "doesnotexist". Since the filter does not
     *       match any services, it returns no results
     *
     *   For more information about filtering, see
     *   [API Filtering](https://aip.dev/160).
     * @param {string} [request.orderBy]
     *   Optional. The order to list results by.
     *
     *   General `order_by` string syntax: `<field> (<asc|desc>) (,)`
     *
     *   *   `<field>` allows value: `name`
     *   *   `<asc|desc>` ascending or descending order by `<field>`. If this is
     *       left blank, `asc` is used
     *
     *   Note that an empty `order_by` string results in default order, which is
     *   order by `name` in ascending order.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.servicedirectory.v1.Service|Service}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.list_services.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_ListServices_async
     */
    listServicesAsync(request?: protos.google.cloud.servicedirectory.v1.IListServicesRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.servicedirectory.v1.IService>;
    /**
     * Lists all endpoints.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the service whose endpoints you'd like to
     *   list.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. The next_page_token value returned from a previous List request,
     *   if any.
     * @param {string} [request.filter]
     *   Optional. The filter to list results by.
     *
     *   General `filter` string syntax:
     *   `<field> <operator> <value> (<logical connector>)`
     *
     *   *   `<field>` can be `name`, `address`, `port`, or `annotations.<key>` for
     *        map field
     *   *   `<operator>` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:`
     *       means `HAS`, and is roughly the same as `=`
     *   *   `<value>` must be the same data type as field
     *   *   `<logical connector>` can be `AND`, `OR`, `NOT`
     *
     *   Examples of valid filters:
     *
     *   *   `annotations.owner` returns endpoints that have a annotation with the
     *       key `owner`, this is the same as `annotations:owner`
     *   *   `annotations.protocol=gRPC` returns endpoints that have key/value
     *       `protocol=gRPC`
     *   *   `address=192.108.1.105` returns endpoints that have this address
     *   *   `port>8080` returns endpoints that have port number larger than 8080
     *   *
     *   `name>projects/my-project/locations/us-east1/namespaces/my-namespace/services/my-service/endpoints/endpoint-c`
     *       returns endpoints that have name that is alphabetically later than the
     *       string, so "endpoint-e" is returned but "endpoint-a" is not
     *   *   `annotations.owner!=sd AND annotations.foo=bar` returns endpoints that
     *       have `owner` in annotation key but value is not `sd` AND have
     *       key/value `foo=bar`
     *   *   `doesnotexist.foo=bar` returns an empty list. Note that endpoint
     *       doesn't have a field called "doesnotexist". Since the filter does not
     *       match any endpoints, it returns no results
     *
     *   For more information about filtering, see
     *   [API Filtering](https://aip.dev/160).
     * @param {string} [request.orderBy]
     *   Optional. The order to list results by.
     *
     *   General `order_by` string syntax: `<field> (<asc|desc>) (,)`
     *
     *   *   `<field>` allows values: `name`, `address`, `port`
     *   *   `<asc|desc>` ascending or descending order by `<field>`. If this is
     *       left blank, `asc` is used
     *
     *   Note that an empty `order_by` string results in default order, which is
     *   order by `name` in ascending order.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.servicedirectory.v1.Endpoint|Endpoint}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listEndpointsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listEndpoints(request?: protos.google.cloud.servicedirectory.v1.IListEndpointsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.servicedirectory.v1.IEndpoint[],
        protos.google.cloud.servicedirectory.v1.IListEndpointsRequest | null,
        protos.google.cloud.servicedirectory.v1.IListEndpointsResponse
    ]>;
    listEndpoints(request: protos.google.cloud.servicedirectory.v1.IListEndpointsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.servicedirectory.v1.IListEndpointsRequest, protos.google.cloud.servicedirectory.v1.IListEndpointsResponse | null | undefined, protos.google.cloud.servicedirectory.v1.IEndpoint>): void;
    listEndpoints(request: protos.google.cloud.servicedirectory.v1.IListEndpointsRequest, callback: PaginationCallback<protos.google.cloud.servicedirectory.v1.IListEndpointsRequest, protos.google.cloud.servicedirectory.v1.IListEndpointsResponse | null | undefined, protos.google.cloud.servicedirectory.v1.IEndpoint>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the service whose endpoints you'd like to
     *   list.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. The next_page_token value returned from a previous List request,
     *   if any.
     * @param {string} [request.filter]
     *   Optional. The filter to list results by.
     *
     *   General `filter` string syntax:
     *   `<field> <operator> <value> (<logical connector>)`
     *
     *   *   `<field>` can be `name`, `address`, `port`, or `annotations.<key>` for
     *        map field
     *   *   `<operator>` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:`
     *       means `HAS`, and is roughly the same as `=`
     *   *   `<value>` must be the same data type as field
     *   *   `<logical connector>` can be `AND`, `OR`, `NOT`
     *
     *   Examples of valid filters:
     *
     *   *   `annotations.owner` returns endpoints that have a annotation with the
     *       key `owner`, this is the same as `annotations:owner`
     *   *   `annotations.protocol=gRPC` returns endpoints that have key/value
     *       `protocol=gRPC`
     *   *   `address=192.108.1.105` returns endpoints that have this address
     *   *   `port>8080` returns endpoints that have port number larger than 8080
     *   *
     *   `name>projects/my-project/locations/us-east1/namespaces/my-namespace/services/my-service/endpoints/endpoint-c`
     *       returns endpoints that have name that is alphabetically later than the
     *       string, so "endpoint-e" is returned but "endpoint-a" is not
     *   *   `annotations.owner!=sd AND annotations.foo=bar` returns endpoints that
     *       have `owner` in annotation key but value is not `sd` AND have
     *       key/value `foo=bar`
     *   *   `doesnotexist.foo=bar` returns an empty list. Note that endpoint
     *       doesn't have a field called "doesnotexist". Since the filter does not
     *       match any endpoints, it returns no results
     *
     *   For more information about filtering, see
     *   [API Filtering](https://aip.dev/160).
     * @param {string} [request.orderBy]
     *   Optional. The order to list results by.
     *
     *   General `order_by` string syntax: `<field> (<asc|desc>) (,)`
     *
     *   *   `<field>` allows values: `name`, `address`, `port`
     *   *   `<asc|desc>` ascending or descending order by `<field>`. If this is
     *       left blank, `asc` is used
     *
     *   Note that an empty `order_by` string results in default order, which is
     *   order by `name` in ascending order.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.servicedirectory.v1.Endpoint|Endpoint} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listEndpointsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listEndpointsStream(request?: protos.google.cloud.servicedirectory.v1.IListEndpointsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listEndpoints`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the service whose endpoints you'd like to
     *   list.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. The next_page_token value returned from a previous List request,
     *   if any.
     * @param {string} [request.filter]
     *   Optional. The filter to list results by.
     *
     *   General `filter` string syntax:
     *   `<field> <operator> <value> (<logical connector>)`
     *
     *   *   `<field>` can be `name`, `address`, `port`, or `annotations.<key>` for
     *        map field
     *   *   `<operator>` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:`
     *       means `HAS`, and is roughly the same as `=`
     *   *   `<value>` must be the same data type as field
     *   *   `<logical connector>` can be `AND`, `OR`, `NOT`
     *
     *   Examples of valid filters:
     *
     *   *   `annotations.owner` returns endpoints that have a annotation with the
     *       key `owner`, this is the same as `annotations:owner`
     *   *   `annotations.protocol=gRPC` returns endpoints that have key/value
     *       `protocol=gRPC`
     *   *   `address=192.108.1.105` returns endpoints that have this address
     *   *   `port>8080` returns endpoints that have port number larger than 8080
     *   *
     *   `name>projects/my-project/locations/us-east1/namespaces/my-namespace/services/my-service/endpoints/endpoint-c`
     *       returns endpoints that have name that is alphabetically later than the
     *       string, so "endpoint-e" is returned but "endpoint-a" is not
     *   *   `annotations.owner!=sd AND annotations.foo=bar` returns endpoints that
     *       have `owner` in annotation key but value is not `sd` AND have
     *       key/value `foo=bar`
     *   *   `doesnotexist.foo=bar` returns an empty list. Note that endpoint
     *       doesn't have a field called "doesnotexist". Since the filter does not
     *       match any endpoints, it returns no results
     *
     *   For more information about filtering, see
     *   [API Filtering](https://aip.dev/160).
     * @param {string} [request.orderBy]
     *   Optional. The order to list results by.
     *
     *   General `order_by` string syntax: `<field> (<asc|desc>) (,)`
     *
     *   *   `<field>` allows values: `name`, `address`, `port`
     *   *   `<asc|desc>` ascending or descending order by `<field>`. If this is
     *       left blank, `asc` is used
     *
     *   Note that an empty `order_by` string results in default order, which is
     *   order by `name` in ascending order.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.servicedirectory.v1.Endpoint|Endpoint}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/registration_service.list_endpoints.js</caption>
     * region_tag:servicedirectory_v1_generated_RegistrationService_ListEndpoints_async
     */
    listEndpointsAsync(request?: protos.google.cloud.servicedirectory.v1.IListEndpointsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.servicedirectory.v1.IEndpoint>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Return a fully-qualified endpoint resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} namespace
     * @param {string} service
     * @param {string} endpoint
     * @returns {string} Resource name string.
     */
    endpointPath(project: string, location: string, namespace: string, service: string, endpoint: string): string;
    /**
     * Parse the project from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEndpointName(endpointName: string): string | number;
    /**
     * Parse the location from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEndpointName(endpointName: string): string | number;
    /**
     * Parse the namespace from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the namespace.
     */
    matchNamespaceFromEndpointName(endpointName: string): string | number;
    /**
     * Parse the service from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromEndpointName(endpointName: string): string | number;
    /**
     * Parse the endpoint from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the endpoint.
     */
    matchEndpointFromEndpointName(endpointName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified namespace resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} namespace
     * @returns {string} Resource name string.
     */
    namespacePath(project: string, location: string, namespace: string): string;
    /**
     * Parse the project from Namespace resource.
     *
     * @param {string} namespaceName
     *   A fully-qualified path representing Namespace resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromNamespaceName(namespaceName: string): string | number;
    /**
     * Parse the location from Namespace resource.
     *
     * @param {string} namespaceName
     *   A fully-qualified path representing Namespace resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromNamespaceName(namespaceName: string): string | number;
    /**
     * Parse the namespace from Namespace resource.
     *
     * @param {string} namespaceName
     *   A fully-qualified path representing Namespace resource.
     * @returns {string} A string representing the namespace.
     */
    matchNamespaceFromNamespaceName(namespaceName: string): string | number;
    /**
     * Return a fully-qualified service resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} namespace
     * @param {string} service
     * @returns {string} Resource name string.
     */
    servicePath(project: string, location: string, namespace: string, service: string): string;
    /**
     * Parse the project from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromServiceName(serviceName: string): string | number;
    /**
     * Parse the location from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromServiceName(serviceName: string): string | number;
    /**
     * Parse the namespace from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the namespace.
     */
    matchNamespaceFromServiceName(serviceName: string): string | number;
    /**
     * Parse the service from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromServiceName(serviceName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}

import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LocationsClient, LocationProtos } from 'google-gax';
import * as protos from '../../protos/protos';
/**
 *  Service Directory API for looking up service data at runtime.
 * @class
 * @memberof v1beta1
 */
export declare class LookupServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    lookupServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of LookupServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new LookupServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Returns a {@link protos.google.cloud.servicedirectory.v1beta1.Service|service} and its
     * associated endpoints.
     * Resolving a service is not considered an active developer method.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the service to resolve.
     * @param {number} [request.maxEndpoints]
     *   Optional. The maximum number of endpoints to return. Defaults to 25.
     *   Maximum is 100. If a value less than one is specified, the Default is used.
     *   If a value greater than the Maximum is specified, the Maximum is used.
     * @param {string} [request.endpointFilter]
     *   Optional. The filter applied to the endpoints of the resolved service.
     *
     *   General `filter` string syntax:
     *   `<field> <operator> <value> (<logical connector>)`
     *
     *   *   `<field>` can be `name`, `address`, `port`, or `metadata.<key>` for
     *       map field
     *   *   `<operator>` can be `<`, `>`, `<=`, `>=`, `!=`, `=`, `:`. Of which `:`
     *       means `HAS`, and is roughly the same as `=`
     *   *   `<value>` must be the same data type as field
     *   *   `<logical connector>` can be `AND`, `OR`, `NOT`
     *
     *   Examples of valid filters:
     *
     *   *   `metadata.owner` returns endpoints that have a annotation with the key
     *       `owner`, this is the same as `metadata:owner`
     *   *   `metadata.protocol=gRPC` returns endpoints that have key/value
     *       `protocol=gRPC`
     *   *   `address=192.108.1.105` returns endpoints that have this address
     *   *   `port>8080` returns endpoints that have port number larger than 8080
     *   *
     *   `name>projects/my-project/locations/us-east1/namespaces/my-namespace/services/my-service/endpoints/endpoint-c`
     *       returns endpoints that have name that is alphabetically later than the
     *       string, so "endpoint-e" is returned but "endpoint-a" is not
     *   *
     *   `name=projects/my-project/locations/us-central1/namespaces/my-namespace/services/my-service/endpoints/ep-1`
     *        returns the endpoint that has an endpoint_id equal to `ep-1`
     *   *   `metadata.owner!=sd AND metadata.foo=bar` returns endpoints that have
     *       `owner` in annotation key but value is not `sd` AND have key/value
     *        `foo=bar`
     *   *   `doesnotexist.foo=bar` returns an empty list. Note that endpoint
     *       doesn't have a field called "doesnotexist". Since the filter does not
     *       match any endpoint, it returns no results
     *
     *   For more information about filtering, see
     *   [API Filtering](https://aip.dev/160).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.servicedirectory.v1beta1.ResolveServiceResponse|ResolveServiceResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta1/lookup_service.resolve_service.js</caption>
     * region_tag:servicedirectory_v1beta1_generated_LookupService_ResolveService_async
     */
    resolveService(request?: protos.google.cloud.servicedirectory.v1beta1.IResolveServiceRequest, options?: CallOptions): Promise<[
        protos.google.cloud.servicedirectory.v1beta1.IResolveServiceResponse,
        (protos.google.cloud.servicedirectory.v1beta1.IResolveServiceRequest | undefined),
        {} | undefined
    ]>;
    resolveService(request: protos.google.cloud.servicedirectory.v1beta1.IResolveServiceRequest, options: CallOptions, callback: Callback<protos.google.cloud.servicedirectory.v1beta1.IResolveServiceResponse, protos.google.cloud.servicedirectory.v1beta1.IResolveServiceRequest | null | undefined, {} | null | undefined>): void;
    resolveService(request: protos.google.cloud.servicedirectory.v1beta1.IResolveServiceRequest, callback: Callback<protos.google.cloud.servicedirectory.v1beta1.IResolveServiceResponse, protos.google.cloud.servicedirectory.v1beta1.IResolveServiceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Return a fully-qualified endpoint resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} namespace
     * @param {string} service
     * @param {string} endpoint
     * @returns {string} Resource name string.
     */
    endpointPath(project: string, location: string, namespace: string, service: string, endpoint: string): string;
    /**
     * Parse the project from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEndpointName(endpointName: string): string | number;
    /**
     * Parse the location from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEndpointName(endpointName: string): string | number;
    /**
     * Parse the namespace from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the namespace.
     */
    matchNamespaceFromEndpointName(endpointName: string): string | number;
    /**
     * Parse the service from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromEndpointName(endpointName: string): string | number;
    /**
     * Parse the endpoint from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the endpoint.
     */
    matchEndpointFromEndpointName(endpointName: string): string | number;
    /**
     * Return a fully-qualified namespace resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} namespace
     * @returns {string} Resource name string.
     */
    namespacePath(project: string, location: string, namespace: string): string;
    /**
     * Parse the project from Namespace resource.
     *
     * @param {string} namespaceName
     *   A fully-qualified path representing Namespace resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromNamespaceName(namespaceName: string): string | number;
    /**
     * Parse the location from Namespace resource.
     *
     * @param {string} namespaceName
     *   A fully-qualified path representing Namespace resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromNamespaceName(namespaceName: string): string | number;
    /**
     * Parse the namespace from Namespace resource.
     *
     * @param {string} namespaceName
     *   A fully-qualified path representing Namespace resource.
     * @returns {string} A string representing the namespace.
     */
    matchNamespaceFromNamespaceName(namespaceName: string): string | number;
    /**
     * Return a fully-qualified service resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} namespace
     * @param {string} service
     * @returns {string} Resource name string.
     */
    servicePath(project: string, location: string, namespace: string, service: string): string;
    /**
     * Parse the project from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromServiceName(serviceName: string): string | number;
    /**
     * Parse the location from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromServiceName(serviceName: string): string | number;
    /**
     * Parse the namespace from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the namespace.
     */
    matchNamespaceFromServiceName(serviceName: string): string | number;
    /**
     * Parse the service from Service resource.
     *
     * @param {string} serviceName
     *   A fully-qualified path representing Service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromServiceName(serviceName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}

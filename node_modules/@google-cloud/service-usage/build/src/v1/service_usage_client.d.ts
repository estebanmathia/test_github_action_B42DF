/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Enables services that service consumers want to use on Google Cloud Platform,
 *  lists the available or enabled services, or disables services that service
 *  consumers no longer use.
 *
 *  See [Service Usage API](https://cloud.google.com/service-usage/docs/overview)
 * @class
 * @memberof v1
 */
export declare class ServiceUsageClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    serviceUsageStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of ServiceUsageClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new ServiceUsageClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Returns the service configuration and enabled state for a given service.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Name of the consumer and service to get the `ConsumerState` for.
     *
     *   An example name would be:
     *   `projects/123/services/serviceusage.googleapis.com` where `123` is the
     *   project number.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.api.serviceusage.v1.Service|Service}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/service_usage.get_service.js</caption>
     * region_tag:serviceusage_v1_generated_ServiceUsage_GetService_async
     */
    getService(request?: protos.google.api.serviceusage.v1.IGetServiceRequest, options?: CallOptions): Promise<[
        protos.google.api.serviceusage.v1.IService,
        protos.google.api.serviceusage.v1.IGetServiceRequest | undefined,
        {} | undefined
    ]>;
    getService(request: protos.google.api.serviceusage.v1.IGetServiceRequest, options: CallOptions, callback: Callback<protos.google.api.serviceusage.v1.IService, protos.google.api.serviceusage.v1.IGetServiceRequest | null | undefined, {} | null | undefined>): void;
    getService(request: protos.google.api.serviceusage.v1.IGetServiceRequest, callback: Callback<protos.google.api.serviceusage.v1.IService, protos.google.api.serviceusage.v1.IGetServiceRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns the service configurations and enabled states for a given list of
     * services.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Parent to retrieve services from.
     *   If this is set, the parent of all of the services specified in `names` must
     *   match this field. An example name would be: `projects/123` where `123` is
     *   the project number. The `BatchGetServices` method currently only supports
     *   projects.
     * @param {string[]} request.names
     *   Names of the services to retrieve.
     *
     *   An example name would be:
     *   `projects/123/services/serviceusage.googleapis.com` where `123` is the
     *   project number.
     *   A single request can get a maximum of 30 services at a time.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.api.serviceusage.v1.BatchGetServicesResponse|BatchGetServicesResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/service_usage.batch_get_services.js</caption>
     * region_tag:serviceusage_v1_generated_ServiceUsage_BatchGetServices_async
     */
    batchGetServices(request?: protos.google.api.serviceusage.v1.IBatchGetServicesRequest, options?: CallOptions): Promise<[
        protos.google.api.serviceusage.v1.IBatchGetServicesResponse,
        protos.google.api.serviceusage.v1.IBatchGetServicesRequest | undefined,
        {} | undefined
    ]>;
    batchGetServices(request: protos.google.api.serviceusage.v1.IBatchGetServicesRequest, options: CallOptions, callback: Callback<protos.google.api.serviceusage.v1.IBatchGetServicesResponse, protos.google.api.serviceusage.v1.IBatchGetServicesRequest | null | undefined, {} | null | undefined>): void;
    batchGetServices(request: protos.google.api.serviceusage.v1.IBatchGetServicesRequest, callback: Callback<protos.google.api.serviceusage.v1.IBatchGetServicesResponse, protos.google.api.serviceusage.v1.IBatchGetServicesRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Enable a service so that it can be used with a project.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Name of the consumer and service to enable the service on.
     *
     *   The `EnableService` and `DisableService` methods currently only support
     *   projects.
     *
     *   Enabling a service requires that the service is public or is shared with
     *   the user enabling the service.
     *
     *   An example name would be:
     *   `projects/123/services/serviceusage.googleapis.com` where `123` is the
     *   project number.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/service_usage.enable_service.js</caption>
     * region_tag:serviceusage_v1_generated_ServiceUsage_EnableService_async
     */
    enableService(request?: protos.google.api.serviceusage.v1.IEnableServiceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.api.serviceusage.v1.IEnableServiceResponse, protos.google.api.serviceusage.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    enableService(request: protos.google.api.serviceusage.v1.IEnableServiceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.api.serviceusage.v1.IEnableServiceResponse, protos.google.api.serviceusage.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    enableService(request: protos.google.api.serviceusage.v1.IEnableServiceRequest, callback: Callback<LROperation<protos.google.api.serviceusage.v1.IEnableServiceResponse, protos.google.api.serviceusage.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `enableService()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/service_usage.enable_service.js</caption>
     * region_tag:serviceusage_v1_generated_ServiceUsage_EnableService_async
     */
    checkEnableServiceProgress(name: string): Promise<LROperation<protos.google.api.serviceusage.v1.EnableServiceResponse, protos.google.api.serviceusage.v1.OperationMetadata>>;
    /**
     * Disable a service so that it can no longer be used with a project.
     * This prevents unintended usage that may cause unexpected billing
     * charges or security leaks.
     *
     * It is not valid to call the disable method on a service that is not
     * currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
     * the target service is not currently enabled.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Name of the consumer and service to disable the service on.
     *
     *   The enable and disable methods currently only support projects.
     *
     *   An example name would be:
     *   `projects/123/services/serviceusage.googleapis.com` where `123` is the
     *   project number.
     * @param {boolean} request.disableDependentServices
     *   Indicates if services that are enabled and which depend on this service
     *   should also be disabled. If not set, an error will be generated if any
     *   enabled services depend on the service to be disabled. When set, the
     *   service, and any enabled services that depend on it, will be disabled
     *   together.
     * @param {google.api.serviceusage.v1.DisableServiceRequest.CheckIfServiceHasUsage} request.checkIfServiceHasUsage
     *   Defines the behavior for checking service usage when disabling a service.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/service_usage.disable_service.js</caption>
     * region_tag:serviceusage_v1_generated_ServiceUsage_DisableService_async
     */
    disableService(request?: protos.google.api.serviceusage.v1.IDisableServiceRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.api.serviceusage.v1.IDisableServiceResponse, protos.google.api.serviceusage.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    disableService(request: protos.google.api.serviceusage.v1.IDisableServiceRequest, options: CallOptions, callback: Callback<LROperation<protos.google.api.serviceusage.v1.IDisableServiceResponse, protos.google.api.serviceusage.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    disableService(request: protos.google.api.serviceusage.v1.IDisableServiceRequest, callback: Callback<LROperation<protos.google.api.serviceusage.v1.IDisableServiceResponse, protos.google.api.serviceusage.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `disableService()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/service_usage.disable_service.js</caption>
     * region_tag:serviceusage_v1_generated_ServiceUsage_DisableService_async
     */
    checkDisableServiceProgress(name: string): Promise<LROperation<protos.google.api.serviceusage.v1.DisableServiceResponse, protos.google.api.serviceusage.v1.OperationMetadata>>;
    /**
     * Enable multiple services on a project. The operation is atomic: if enabling
     * any service fails, then the entire batch fails, and no state changes occur.
     * To enable a single service, use the `EnableService` method instead.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Parent to enable services on.
     *
     *   An example name would be:
     *   `projects/123` where `123` is the project number.
     *
     *   The `BatchEnableServices` method currently only supports projects.
     * @param {string[]} request.serviceIds
     *   The identifiers of the services to enable on the project.
     *
     *   A valid identifier would be:
     *   serviceusage.googleapis.com
     *
     *   Enabling services requires that each service is public or is shared with
     *   the user enabling the service.
     *
     *   A single request can enable a maximum of 20 services at a time. If more
     *   than 20 services are specified, the request will fail, and no state changes
     *   will occur.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/service_usage.batch_enable_services.js</caption>
     * region_tag:serviceusage_v1_generated_ServiceUsage_BatchEnableServices_async
     */
    batchEnableServices(request?: protos.google.api.serviceusage.v1.IBatchEnableServicesRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.api.serviceusage.v1.IBatchEnableServicesResponse, protos.google.api.serviceusage.v1.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    batchEnableServices(request: protos.google.api.serviceusage.v1.IBatchEnableServicesRequest, options: CallOptions, callback: Callback<LROperation<protos.google.api.serviceusage.v1.IBatchEnableServicesResponse, protos.google.api.serviceusage.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    batchEnableServices(request: protos.google.api.serviceusage.v1.IBatchEnableServicesRequest, callback: Callback<LROperation<protos.google.api.serviceusage.v1.IBatchEnableServicesResponse, protos.google.api.serviceusage.v1.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `batchEnableServices()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/service_usage.batch_enable_services.js</caption>
     * region_tag:serviceusage_v1_generated_ServiceUsage_BatchEnableServices_async
     */
    checkBatchEnableServicesProgress(name: string): Promise<LROperation<protos.google.api.serviceusage.v1.BatchEnableServicesResponse, protos.google.api.serviceusage.v1.OperationMetadata>>;
    /**
     * List all services available to the specified project, and the current
     * state of those services with respect to the project. The list includes
     * all public services, all services for which the calling user has the
     * `servicemanagement.services.bind` permission, and all services that have
     * already been enabled on the project. The list can be filtered to
     * only include services in a specific state, for example to only include
     * services enabled on the project.
     *
     * WARNING: If you need to query enabled services frequently or across
     * an organization, you should use
     * [Cloud Asset Inventory
     * API](https://cloud.google.com/asset-inventory/docs/apis), which provides
     * higher throughput and richer filtering capability.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Parent to search for services on.
     *
     *   An example name would be:
     *   `projects/123` where `123` is the project number.
     * @param {number} request.pageSize
     *   Requested size of the next page of data.
     *   Requested page size cannot exceed 200.
     *   If not set, the default page size is 50.
     * @param {string} request.pageToken
     *   Token identifying which result to start with, which is returned by a
     *   previous list call.
     * @param {string} request.filter
     *   Only list services that conform to the given filter.
     *   The allowed filter strings are `state:ENABLED` and `state:DISABLED`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.api.serviceusage.v1.Service|Service}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listServicesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listServices(request?: protos.google.api.serviceusage.v1.IListServicesRequest, options?: CallOptions): Promise<[
        protos.google.api.serviceusage.v1.IService[],
        protos.google.api.serviceusage.v1.IListServicesRequest | null,
        protos.google.api.serviceusage.v1.IListServicesResponse
    ]>;
    listServices(request: protos.google.api.serviceusage.v1.IListServicesRequest, options: CallOptions, callback: PaginationCallback<protos.google.api.serviceusage.v1.IListServicesRequest, protos.google.api.serviceusage.v1.IListServicesResponse | null | undefined, protos.google.api.serviceusage.v1.IService>): void;
    listServices(request: protos.google.api.serviceusage.v1.IListServicesRequest, callback: PaginationCallback<protos.google.api.serviceusage.v1.IListServicesRequest, protos.google.api.serviceusage.v1.IListServicesResponse | null | undefined, protos.google.api.serviceusage.v1.IService>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Parent to search for services on.
     *
     *   An example name would be:
     *   `projects/123` where `123` is the project number.
     * @param {number} request.pageSize
     *   Requested size of the next page of data.
     *   Requested page size cannot exceed 200.
     *   If not set, the default page size is 50.
     * @param {string} request.pageToken
     *   Token identifying which result to start with, which is returned by a
     *   previous list call.
     * @param {string} request.filter
     *   Only list services that conform to the given filter.
     *   The allowed filter strings are `state:ENABLED` and `state:DISABLED`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.api.serviceusage.v1.Service|Service} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listServicesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listServicesStream(request?: protos.google.api.serviceusage.v1.IListServicesRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listServices`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Parent to search for services on.
     *
     *   An example name would be:
     *   `projects/123` where `123` is the project number.
     * @param {number} request.pageSize
     *   Requested size of the next page of data.
     *   Requested page size cannot exceed 200.
     *   If not set, the default page size is 50.
     * @param {string} request.pageToken
     *   Token identifying which result to start with, which is returned by a
     *   previous list call.
     * @param {string} request.filter
     *   Only list services that conform to the given filter.
     *   The allowed filter strings are `state:ENABLED` and `state:DISABLED`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.api.serviceusage.v1.Service|Service}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/service_usage.list_services.js</caption>
     * region_tag:serviceusage_v1_generated_ServiceUsage_ListServices_async
     */
    listServicesAsync(request?: protos.google.api.serviceusage.v1.IListServicesRequest, options?: CallOptions): AsyncIterable<protos.google.api.serviceusage.v1.IService>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified folderService resource name string.
     *
     * @param {string} folder
     * @param {string} service
     * @returns {string} Resource name string.
     */
    folderServicePath(folder: string, service: string): string;
    /**
     * Parse the folder from FolderService resource.
     *
     * @param {string} folderServiceName
     *   A fully-qualified path representing folder_service resource.
     * @returns {string} A string representing the folder.
     */
    matchFolderFromFolderServiceName(folderServiceName: string): string | number;
    /**
     * Parse the service from FolderService resource.
     *
     * @param {string} folderServiceName
     *   A fully-qualified path representing folder_service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromFolderServiceName(folderServiceName: string): string | number;
    /**
     * Return a fully-qualified organizationService resource name string.
     *
     * @param {string} organization
     * @param {string} service
     * @returns {string} Resource name string.
     */
    organizationServicePath(organization: string, service: string): string;
    /**
     * Parse the organization from OrganizationService resource.
     *
     * @param {string} organizationServiceName
     *   A fully-qualified path representing organization_service resource.
     * @returns {string} A string representing the organization.
     */
    matchOrganizationFromOrganizationServiceName(organizationServiceName: string): string | number;
    /**
     * Parse the service from OrganizationService resource.
     *
     * @param {string} organizationServiceName
     *   A fully-qualified path representing organization_service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromOrganizationServiceName(organizationServiceName: string): string | number;
    /**
     * Return a fully-qualified projectService resource name string.
     *
     * @param {string} project
     * @param {string} service
     * @returns {string} Resource name string.
     */
    projectServicePath(project: string, service: string): string;
    /**
     * Parse the project from ProjectService resource.
     *
     * @param {string} projectServiceName
     *   A fully-qualified path representing project_service resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectServiceName(projectServiceName: string): string | number;
    /**
     * Parse the service from ProjectService resource.
     *
     * @param {string} projectServiceName
     *   A fully-qualified path representing project_service resource.
     * @returns {string} A string representing the service.
     */
    matchServiceFromProjectServiceName(projectServiceName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}

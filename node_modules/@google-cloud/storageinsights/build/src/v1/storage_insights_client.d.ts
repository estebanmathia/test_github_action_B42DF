/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Service describing handlers for resources
 * @class
 * @memberof v1
 */
export declare class StorageInsightsClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    storageInsightsStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of StorageInsightsClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new StorageInsightsClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets details of a single ReportConfig.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the resource
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.storageinsights.v1.ReportConfig|ReportConfig}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/storage_insights.get_report_config.js</caption>
     * region_tag:storageinsights_v1_generated_StorageInsights_GetReportConfig_async
     */
    getReportConfig(request?: protos.google.cloud.storageinsights.v1.IGetReportConfigRequest, options?: CallOptions): Promise<[
        protos.google.cloud.storageinsights.v1.IReportConfig,
        (protos.google.cloud.storageinsights.v1.IGetReportConfigRequest | undefined),
        {} | undefined
    ]>;
    getReportConfig(request: protos.google.cloud.storageinsights.v1.IGetReportConfigRequest, options: CallOptions, callback: Callback<protos.google.cloud.storageinsights.v1.IReportConfig, protos.google.cloud.storageinsights.v1.IGetReportConfigRequest | null | undefined, {} | null | undefined>): void;
    getReportConfig(request: protos.google.cloud.storageinsights.v1.IGetReportConfigRequest, callback: Callback<protos.google.cloud.storageinsights.v1.IReportConfig, protos.google.cloud.storageinsights.v1.IGetReportConfigRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a new ReportConfig in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Value for parent.
     * @param {google.cloud.storageinsights.v1.ReportConfig} request.reportConfig
     *   Required. The resource being created
     * @param {string} [request.requestId]
     *   Optional. An optional request ID to identify requests. Specify a unique
     *   request ID so that if you must retry your request, the server will know to
     *   ignore the request if it has already been completed. The server will
     *   guarantee that for at least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.storageinsights.v1.ReportConfig|ReportConfig}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/storage_insights.create_report_config.js</caption>
     * region_tag:storageinsights_v1_generated_StorageInsights_CreateReportConfig_async
     */
    createReportConfig(request?: protos.google.cloud.storageinsights.v1.ICreateReportConfigRequest, options?: CallOptions): Promise<[
        protos.google.cloud.storageinsights.v1.IReportConfig,
        (protos.google.cloud.storageinsights.v1.ICreateReportConfigRequest | undefined),
        {} | undefined
    ]>;
    createReportConfig(request: protos.google.cloud.storageinsights.v1.ICreateReportConfigRequest, options: CallOptions, callback: Callback<protos.google.cloud.storageinsights.v1.IReportConfig, protos.google.cloud.storageinsights.v1.ICreateReportConfigRequest | null | undefined, {} | null | undefined>): void;
    createReportConfig(request: protos.google.cloud.storageinsights.v1.ICreateReportConfigRequest, callback: Callback<protos.google.cloud.storageinsights.v1.IReportConfig, protos.google.cloud.storageinsights.v1.ICreateReportConfigRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates the parameters of a single ReportConfig.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Field mask is used to specify the fields to be overwritten in the
     *   ReportConfig resource by the update.
     *   The fields specified in the update_mask are relative to the resource, not
     *   the full request. A field will be overwritten if it is in the mask. If the
     *   user does not provide a mask then all fields will be overwritten.
     * @param {google.cloud.storageinsights.v1.ReportConfig} request.reportConfig
     *   Required. The resource being updated
     * @param {string} [request.requestId]
     *   Optional. An optional request ID to identify requests. Specify a unique
     *   request ID so that if you must retry your request, the server will know to
     *   ignore the request if it has already been completed. The server will
     *   guarantee that for at least 60 minutes since the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.storageinsights.v1.ReportConfig|ReportConfig}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/storage_insights.update_report_config.js</caption>
     * region_tag:storageinsights_v1_generated_StorageInsights_UpdateReportConfig_async
     */
    updateReportConfig(request?: protos.google.cloud.storageinsights.v1.IUpdateReportConfigRequest, options?: CallOptions): Promise<[
        protos.google.cloud.storageinsights.v1.IReportConfig,
        (protos.google.cloud.storageinsights.v1.IUpdateReportConfigRequest | undefined),
        {} | undefined
    ]>;
    updateReportConfig(request: protos.google.cloud.storageinsights.v1.IUpdateReportConfigRequest, options: CallOptions, callback: Callback<protos.google.cloud.storageinsights.v1.IReportConfig, protos.google.cloud.storageinsights.v1.IUpdateReportConfigRequest | null | undefined, {} | null | undefined>): void;
    updateReportConfig(request: protos.google.cloud.storageinsights.v1.IUpdateReportConfigRequest, callback: Callback<protos.google.cloud.storageinsights.v1.IReportConfig, protos.google.cloud.storageinsights.v1.IUpdateReportConfigRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes a single ReportConfig.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the resource
     * @param {boolean} [request.force]
     *   Optional. If set, all ReportDetails for this ReportConfig will be deleted.
     * @param {string} [request.requestId]
     *   Optional. An optional request ID to identify requests. Specify a unique
     *   request ID so that if you must retry your request, the server will know to
     *   ignore the request if it has already been completed. The server will
     *   guarantee that for at least 60 minutes after the first request.
     *
     *   For example, consider a situation where you make an initial request and
     *   the request times out. If you make the request again with the same request
     *   ID, the server can check if original operation with the same request ID
     *   was received, and if so, will ignore the second request. This prevents
     *   clients from accidentally creating duplicate commitments.
     *
     *   The request ID must be a valid UUID with the exception that zero UUID is
     *   not supported (00000000-0000-0000-0000-000000000000).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/storage_insights.delete_report_config.js</caption>
     * region_tag:storageinsights_v1_generated_StorageInsights_DeleteReportConfig_async
     */
    deleteReportConfig(request?: protos.google.cloud.storageinsights.v1.IDeleteReportConfigRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        (protos.google.cloud.storageinsights.v1.IDeleteReportConfigRequest | undefined),
        {} | undefined
    ]>;
    deleteReportConfig(request: protos.google.cloud.storageinsights.v1.IDeleteReportConfigRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.storageinsights.v1.IDeleteReportConfigRequest | null | undefined, {} | null | undefined>): void;
    deleteReportConfig(request: protos.google.cloud.storageinsights.v1.IDeleteReportConfigRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.storageinsights.v1.IDeleteReportConfigRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets details of a single ReportDetail.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the resource
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.storageinsights.v1.ReportDetail|ReportDetail}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/storage_insights.get_report_detail.js</caption>
     * region_tag:storageinsights_v1_generated_StorageInsights_GetReportDetail_async
     */
    getReportDetail(request?: protos.google.cloud.storageinsights.v1.IGetReportDetailRequest, options?: CallOptions): Promise<[
        protos.google.cloud.storageinsights.v1.IReportDetail,
        (protos.google.cloud.storageinsights.v1.IGetReportDetailRequest | undefined),
        {} | undefined
    ]>;
    getReportDetail(request: protos.google.cloud.storageinsights.v1.IGetReportDetailRequest, options: CallOptions, callback: Callback<protos.google.cloud.storageinsights.v1.IReportDetail, protos.google.cloud.storageinsights.v1.IGetReportDetailRequest | null | undefined, {} | null | undefined>): void;
    getReportDetail(request: protos.google.cloud.storageinsights.v1.IGetReportDetailRequest, callback: Callback<protos.google.cloud.storageinsights.v1.IReportDetail, protos.google.cloud.storageinsights.v1.IGetReportDetailRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Lists ReportConfigs in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent value for ListReportConfigsRequest
     * @param {number} request.pageSize
     *   Requested page size. Server may return fewer items than requested.
     *   If unspecified, server will pick an appropriate default.
     * @param {string} request.pageToken
     *   A token identifying a page of results the server should return.
     * @param {string} request.filter
     *   Filtering results
     * @param {string} request.orderBy
     *   Hint for how to order the results
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.storageinsights.v1.ReportConfig|ReportConfig}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listReportConfigsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listReportConfigs(request?: protos.google.cloud.storageinsights.v1.IListReportConfigsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.storageinsights.v1.IReportConfig[],
        protos.google.cloud.storageinsights.v1.IListReportConfigsRequest | null,
        protos.google.cloud.storageinsights.v1.IListReportConfigsResponse
    ]>;
    listReportConfigs(request: protos.google.cloud.storageinsights.v1.IListReportConfigsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.storageinsights.v1.IListReportConfigsRequest, protos.google.cloud.storageinsights.v1.IListReportConfigsResponse | null | undefined, protos.google.cloud.storageinsights.v1.IReportConfig>): void;
    listReportConfigs(request: protos.google.cloud.storageinsights.v1.IListReportConfigsRequest, callback: PaginationCallback<protos.google.cloud.storageinsights.v1.IListReportConfigsRequest, protos.google.cloud.storageinsights.v1.IListReportConfigsResponse | null | undefined, protos.google.cloud.storageinsights.v1.IReportConfig>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent value for ListReportConfigsRequest
     * @param {number} request.pageSize
     *   Requested page size. Server may return fewer items than requested.
     *   If unspecified, server will pick an appropriate default.
     * @param {string} request.pageToken
     *   A token identifying a page of results the server should return.
     * @param {string} request.filter
     *   Filtering results
     * @param {string} request.orderBy
     *   Hint for how to order the results
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.storageinsights.v1.ReportConfig|ReportConfig} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listReportConfigsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listReportConfigsStream(request?: protos.google.cloud.storageinsights.v1.IListReportConfigsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listReportConfigs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent value for ListReportConfigsRequest
     * @param {number} request.pageSize
     *   Requested page size. Server may return fewer items than requested.
     *   If unspecified, server will pick an appropriate default.
     * @param {string} request.pageToken
     *   A token identifying a page of results the server should return.
     * @param {string} request.filter
     *   Filtering results
     * @param {string} request.orderBy
     *   Hint for how to order the results
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.storageinsights.v1.ReportConfig|ReportConfig}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/storage_insights.list_report_configs.js</caption>
     * region_tag:storageinsights_v1_generated_StorageInsights_ListReportConfigs_async
     */
    listReportConfigsAsync(request?: protos.google.cloud.storageinsights.v1.IListReportConfigsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.storageinsights.v1.IReportConfig>;
    /**
     * Lists ReportDetails in a given project and location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent value for ListReportDetailsRequest
     * @param {number} request.pageSize
     *   Requested page size. Server may return fewer items than requested.
     *   If unspecified, server will pick an appropriate default.
     * @param {string} request.pageToken
     *   A token identifying a page of results the server should return.
     * @param {string} request.filter
     *   Filtering results
     * @param {string} request.orderBy
     *   Hint for how to order the results
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.storageinsights.v1.ReportDetail|ReportDetail}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listReportDetailsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listReportDetails(request?: protos.google.cloud.storageinsights.v1.IListReportDetailsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.storageinsights.v1.IReportDetail[],
        protos.google.cloud.storageinsights.v1.IListReportDetailsRequest | null,
        protos.google.cloud.storageinsights.v1.IListReportDetailsResponse
    ]>;
    listReportDetails(request: protos.google.cloud.storageinsights.v1.IListReportDetailsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.storageinsights.v1.IListReportDetailsRequest, protos.google.cloud.storageinsights.v1.IListReportDetailsResponse | null | undefined, protos.google.cloud.storageinsights.v1.IReportDetail>): void;
    listReportDetails(request: protos.google.cloud.storageinsights.v1.IListReportDetailsRequest, callback: PaginationCallback<protos.google.cloud.storageinsights.v1.IListReportDetailsRequest, protos.google.cloud.storageinsights.v1.IListReportDetailsResponse | null | undefined, protos.google.cloud.storageinsights.v1.IReportDetail>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent value for ListReportDetailsRequest
     * @param {number} request.pageSize
     *   Requested page size. Server may return fewer items than requested.
     *   If unspecified, server will pick an appropriate default.
     * @param {string} request.pageToken
     *   A token identifying a page of results the server should return.
     * @param {string} request.filter
     *   Filtering results
     * @param {string} request.orderBy
     *   Hint for how to order the results
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.storageinsights.v1.ReportDetail|ReportDetail} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listReportDetailsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listReportDetailsStream(request?: protos.google.cloud.storageinsights.v1.IListReportDetailsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listReportDetails`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent value for ListReportDetailsRequest
     * @param {number} request.pageSize
     *   Requested page size. Server may return fewer items than requested.
     *   If unspecified, server will pick an appropriate default.
     * @param {string} request.pageToken
     *   A token identifying a page of results the server should return.
     * @param {string} request.filter
     *   Filtering results
     * @param {string} request.orderBy
     *   Hint for how to order the results
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.storageinsights.v1.ReportDetail|ReportDetail}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/storage_insights.list_report_details.js</caption>
     * region_tag:storageinsights_v1_generated_StorageInsights_ListReportDetails_async
     */
    listReportDetailsAsync(request?: protos.google.cloud.storageinsights.v1.IListReportDetailsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.storageinsights.v1.IReportDetail>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified reportConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} report_config
     * @returns {string} Resource name string.
     */
    reportConfigPath(project: string, location: string, reportConfig: string): string;
    /**
     * Parse the project from ReportConfig resource.
     *
     * @param {string} reportConfigName
     *   A fully-qualified path representing ReportConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromReportConfigName(reportConfigName: string): string | number;
    /**
     * Parse the location from ReportConfig resource.
     *
     * @param {string} reportConfigName
     *   A fully-qualified path representing ReportConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromReportConfigName(reportConfigName: string): string | number;
    /**
     * Parse the report_config from ReportConfig resource.
     *
     * @param {string} reportConfigName
     *   A fully-qualified path representing ReportConfig resource.
     * @returns {string} A string representing the report_config.
     */
    matchReportConfigFromReportConfigName(reportConfigName: string): string | number;
    /**
     * Return a fully-qualified reportDetail resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} report_config
     * @param {string} report_detail
     * @returns {string} Resource name string.
     */
    reportDetailPath(project: string, location: string, reportConfig: string, reportDetail: string): string;
    /**
     * Parse the project from ReportDetail resource.
     *
     * @param {string} reportDetailName
     *   A fully-qualified path representing ReportDetail resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromReportDetailName(reportDetailName: string): string | number;
    /**
     * Parse the location from ReportDetail resource.
     *
     * @param {string} reportDetailName
     *   A fully-qualified path representing ReportDetail resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromReportDetailName(reportDetailName: string): string | number;
    /**
     * Parse the report_config from ReportDetail resource.
     *
     * @param {string} reportDetailName
     *   A fully-qualified path representing ReportDetail resource.
     * @returns {string} A string representing the report_config.
     */
    matchReportConfigFromReportDetailName(reportDetailName: string): string | number;
    /**
     * Parse the report_detail from ReportDetail resource.
     *
     * @param {string} reportDetailName
     *   A fully-qualified path representing ReportDetail resource.
     * @returns {string} A string representing the report_detail.
     */
    matchReportDetailFromReportDetailName(reportDetailName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}

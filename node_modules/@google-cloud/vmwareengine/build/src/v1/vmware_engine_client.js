"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.VmwareEngineClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/vmware_engine_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./vmware_engine_client_config.json");
const version = require('../../../package.json').version;
/**
 *  VMwareEngine manages VMware's private clusters in the Cloud.
 * @class
 * @memberof v1
 */
class VmwareEngineClient {
    /**
     * Construct an instance of VmwareEngineClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new VmwareEngineClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);
        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            clusterPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/privateClouds/{private_cloud}/clusters/{cluster}'),
            hcxActivationKeyPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/privateClouds/{private_cloud}/hcxActivationKeys/{hcx_activation_key}'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            networkPolicyPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/networkPolicies/{network_policy}'),
            nodeTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/nodeTypes/{node_type}'),
            privateCloudPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/privateClouds/{private_cloud}'),
            privateConnectionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/privateConnections/{private_connection}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
            subnetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/privateClouds/{private_cloud}/subnets/{subnet}'),
            vmwareEngineNetworkPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listPrivateClouds: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'privateClouds'),
            listClusters: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'clusters'),
            listSubnets: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'subnets'),
            listNodeTypes: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'nodeTypes'),
            listHcxActivationKeys: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'hcxActivationKeys'),
            listNetworkPolicies: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'networkPolicies'),
            listVmwareEngineNetworks: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'vmwareEngineNetworks'),
            listPrivateConnections: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'privateConnections'),
            listPrivateConnectionPeeringRoutes: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'peeringRoutes'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback) {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.cloud.location.Locations.GetLocation',
                    get: '/v1/{name=projects/*/locations/*}',
                },
                {
                    selector: 'google.cloud.location.Locations.ListLocations',
                    get: '/v1/{name=projects/*}/locations',
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
                    get: '/v1/{resource=projects/*/locations/*/privateClouds/*}:getIamPolicy',
                    additional_bindings: [
                        {
                            get: '/v1/{resource=projects/*/locations/*/privateClouds/*/clusters/*}:getIamPolicy',
                        },
                        {
                            get: '/v1/{resource=projects/*/locations/*/privateClouds/*/hcxActivationKeys/*}:getIamPolicy',
                        },
                    ],
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
                    post: '/v1/{resource=projects/*/locations/*/privateClouds/*}:setIamPolicy',
                    body: '*',
                    additional_bindings: [
                        {
                            post: '/v1/{resource=projects/*/locations/*/privateClouds/*/clusters/*}:setIamPolicy',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/privateClouds/*/hcxActivationKeys/*}:setIamPolicy',
                            body: '*',
                        },
                    ],
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
                    post: '/v1/{resource=projects/*/locations/*/privateClouds/*}:testIamPermissions',
                    body: '*',
                    additional_bindings: [
                        {
                            post: '/v1/{resource=projects/*/locations/*/privateClouds/*/clusters/*}:testIamPermissions',
                            body: '*',
                        },
                        {
                            post: '/v1/{resource=projects/*/locations/*/privateClouds/*/hcxActivationKeys/*}:testIamPermissions',
                            body: '*',
                        },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.DeleteOperation',
                    delete: '/v1/{name=projects/*/locations/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v1/{name=projects/*/locations/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v1/{name=projects/*/locations/*}/operations',
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        const createPrivateCloudResponse = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.PrivateCloud');
        const createPrivateCloudMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const updatePrivateCloudResponse = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.PrivateCloud');
        const updatePrivateCloudMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const deletePrivateCloudResponse = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.PrivateCloud');
        const deletePrivateCloudMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const undeletePrivateCloudResponse = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.PrivateCloud');
        const undeletePrivateCloudMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const createClusterResponse = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.Cluster');
        const createClusterMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const updateClusterResponse = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.Cluster');
        const updateClusterMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const deleteClusterResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteClusterMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const updateSubnetResponse = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.Subnet');
        const updateSubnetMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const resetNsxCredentialsResponse = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.PrivateCloud');
        const resetNsxCredentialsMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const resetVcenterCredentialsResponse = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.PrivateCloud');
        const resetVcenterCredentialsMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const createHcxActivationKeyResponse = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.HcxActivationKey');
        const createHcxActivationKeyMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const createNetworkPolicyResponse = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.NetworkPolicy');
        const createNetworkPolicyMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const updateNetworkPolicyResponse = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.NetworkPolicy');
        const updateNetworkPolicyMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const deleteNetworkPolicyResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteNetworkPolicyMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const createVmwareEngineNetworkResponse = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.VmwareEngineNetwork');
        const createVmwareEngineNetworkMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const updateVmwareEngineNetworkResponse = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.VmwareEngineNetwork');
        const updateVmwareEngineNetworkMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const deleteVmwareEngineNetworkResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteVmwareEngineNetworkMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const createPrivateConnectionResponse = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.PrivateConnection');
        const createPrivateConnectionMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const updatePrivateConnectionResponse = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.PrivateConnection');
        const updatePrivateConnectionMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        const deletePrivateConnectionResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deletePrivateConnectionMetadata = protoFilesRoot.lookup('.google.cloud.vmwareengine.v1.OperationMetadata');
        this.descriptors.longrunning = {
            createPrivateCloud: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createPrivateCloudResponse.decode.bind(createPrivateCloudResponse), createPrivateCloudMetadata.decode.bind(createPrivateCloudMetadata)),
            updatePrivateCloud: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updatePrivateCloudResponse.decode.bind(updatePrivateCloudResponse), updatePrivateCloudMetadata.decode.bind(updatePrivateCloudMetadata)),
            deletePrivateCloud: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deletePrivateCloudResponse.decode.bind(deletePrivateCloudResponse), deletePrivateCloudMetadata.decode.bind(deletePrivateCloudMetadata)),
            undeletePrivateCloud: new this._gaxModule.LongrunningDescriptor(this.operationsClient, undeletePrivateCloudResponse.decode.bind(undeletePrivateCloudResponse), undeletePrivateCloudMetadata.decode.bind(undeletePrivateCloudMetadata)),
            createCluster: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createClusterResponse.decode.bind(createClusterResponse), createClusterMetadata.decode.bind(createClusterMetadata)),
            updateCluster: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateClusterResponse.decode.bind(updateClusterResponse), updateClusterMetadata.decode.bind(updateClusterMetadata)),
            deleteCluster: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteClusterResponse.decode.bind(deleteClusterResponse), deleteClusterMetadata.decode.bind(deleteClusterMetadata)),
            updateSubnet: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateSubnetResponse.decode.bind(updateSubnetResponse), updateSubnetMetadata.decode.bind(updateSubnetMetadata)),
            resetNsxCredentials: new this._gaxModule.LongrunningDescriptor(this.operationsClient, resetNsxCredentialsResponse.decode.bind(resetNsxCredentialsResponse), resetNsxCredentialsMetadata.decode.bind(resetNsxCredentialsMetadata)),
            resetVcenterCredentials: new this._gaxModule.LongrunningDescriptor(this.operationsClient, resetVcenterCredentialsResponse.decode.bind(resetVcenterCredentialsResponse), resetVcenterCredentialsMetadata.decode.bind(resetVcenterCredentialsMetadata)),
            createHcxActivationKey: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createHcxActivationKeyResponse.decode.bind(createHcxActivationKeyResponse), createHcxActivationKeyMetadata.decode.bind(createHcxActivationKeyMetadata)),
            createNetworkPolicy: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createNetworkPolicyResponse.decode.bind(createNetworkPolicyResponse), createNetworkPolicyMetadata.decode.bind(createNetworkPolicyMetadata)),
            updateNetworkPolicy: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateNetworkPolicyResponse.decode.bind(updateNetworkPolicyResponse), updateNetworkPolicyMetadata.decode.bind(updateNetworkPolicyMetadata)),
            deleteNetworkPolicy: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteNetworkPolicyResponse.decode.bind(deleteNetworkPolicyResponse), deleteNetworkPolicyMetadata.decode.bind(deleteNetworkPolicyMetadata)),
            createVmwareEngineNetwork: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createVmwareEngineNetworkResponse.decode.bind(createVmwareEngineNetworkResponse), createVmwareEngineNetworkMetadata.decode.bind(createVmwareEngineNetworkMetadata)),
            updateVmwareEngineNetwork: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateVmwareEngineNetworkResponse.decode.bind(updateVmwareEngineNetworkResponse), updateVmwareEngineNetworkMetadata.decode.bind(updateVmwareEngineNetworkMetadata)),
            deleteVmwareEngineNetwork: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteVmwareEngineNetworkResponse.decode.bind(deleteVmwareEngineNetworkResponse), deleteVmwareEngineNetworkMetadata.decode.bind(deleteVmwareEngineNetworkMetadata)),
            createPrivateConnection: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createPrivateConnectionResponse.decode.bind(createPrivateConnectionResponse), createPrivateConnectionMetadata.decode.bind(createPrivateConnectionMetadata)),
            updatePrivateConnection: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updatePrivateConnectionResponse.decode.bind(updatePrivateConnectionResponse), updatePrivateConnectionMetadata.decode.bind(updatePrivateConnectionMetadata)),
            deletePrivateConnection: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deletePrivateConnectionResponse.decode.bind(deletePrivateConnectionResponse), deletePrivateConnectionMetadata.decode.bind(deletePrivateConnectionMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.vmwareengine.v1.VmwareEngine', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.vmwareEngineStub) {
            return this.vmwareEngineStub;
        }
        // Put together the "service stub" for
        // google.cloud.vmwareengine.v1.VmwareEngine.
        this.vmwareEngineStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.vmwareengine.v1.VmwareEngine')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.vmwareengine.v1.VmwareEngine, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const vmwareEngineStubMethods = [
            'listPrivateClouds',
            'getPrivateCloud',
            'createPrivateCloud',
            'updatePrivateCloud',
            'deletePrivateCloud',
            'undeletePrivateCloud',
            'listClusters',
            'getCluster',
            'createCluster',
            'updateCluster',
            'deleteCluster',
            'listSubnets',
            'getSubnet',
            'updateSubnet',
            'listNodeTypes',
            'getNodeType',
            'showNsxCredentials',
            'showVcenterCredentials',
            'resetNsxCredentials',
            'resetVcenterCredentials',
            'createHcxActivationKey',
            'listHcxActivationKeys',
            'getHcxActivationKey',
            'getNetworkPolicy',
            'listNetworkPolicies',
            'createNetworkPolicy',
            'updateNetworkPolicy',
            'deleteNetworkPolicy',
            'createVmwareEngineNetwork',
            'updateVmwareEngineNetwork',
            'deleteVmwareEngineNetwork',
            'getVmwareEngineNetwork',
            'listVmwareEngineNetworks',
            'createPrivateConnection',
            'getPrivateConnection',
            'listPrivateConnections',
            'updatePrivateConnection',
            'deletePrivateConnection',
            'listPrivateConnectionPeeringRoutes',
        ];
        for (const methodName of vmwareEngineStubMethods) {
            const callPromise = this.vmwareEngineStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.vmwareEngineStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'vmwareengine.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'vmwareengine.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    getPrivateCloud(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getPrivateCloud(request, options, callback);
    }
    getCluster(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getCluster(request, options, callback);
    }
    getSubnet(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getSubnet(request, options, callback);
    }
    getNodeType(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getNodeType(request, options, callback);
    }
    showNsxCredentials(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                private_cloud: (_a = request.privateCloud) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.showNsxCredentials(request, options, callback);
    }
    showVcenterCredentials(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                private_cloud: (_a = request.privateCloud) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.showVcenterCredentials(request, options, callback);
    }
    getHcxActivationKey(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getHcxActivationKey(request, options, callback);
    }
    getNetworkPolicy(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getNetworkPolicy(request, options, callback);
    }
    getVmwareEngineNetwork(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getVmwareEngineNetwork(request, options, callback);
    }
    getPrivateConnection(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getPrivateConnection(request, options, callback);
    }
    createPrivateCloud(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createPrivateCloud(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createPrivateCloud()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.create_private_cloud.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_CreatePrivateCloud_async
     */
    async checkCreatePrivateCloudProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createPrivateCloud, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updatePrivateCloud(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'private_cloud.name': (_a = request.privateCloud.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updatePrivateCloud(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updatePrivateCloud()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.update_private_cloud.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_UpdatePrivateCloud_async
     */
    async checkUpdatePrivateCloudProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updatePrivateCloud, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deletePrivateCloud(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deletePrivateCloud(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deletePrivateCloud()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.delete_private_cloud.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_DeletePrivateCloud_async
     */
    async checkDeletePrivateCloudProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deletePrivateCloud, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    undeletePrivateCloud(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.undeletePrivateCloud(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `undeletePrivateCloud()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.undelete_private_cloud.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_UndeletePrivateCloud_async
     */
    async checkUndeletePrivateCloudProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.undeletePrivateCloud, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createCluster(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createCluster(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createCluster()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.create_cluster.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_CreateCluster_async
     */
    async checkCreateClusterProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createCluster, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateCluster(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'cluster.name': (_a = request.cluster.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateCluster(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateCluster()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.update_cluster.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_UpdateCluster_async
     */
    async checkUpdateClusterProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateCluster, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteCluster(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteCluster(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteCluster()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.delete_cluster.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_DeleteCluster_async
     */
    async checkDeleteClusterProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteCluster, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateSubnet(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'subnet.name': (_a = request.subnet.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateSubnet(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateSubnet()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.update_subnet.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_UpdateSubnet_async
     */
    async checkUpdateSubnetProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateSubnet, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    resetNsxCredentials(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                private_cloud: (_a = request.privateCloud) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.resetNsxCredentials(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `resetNsxCredentials()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.reset_nsx_credentials.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_ResetNsxCredentials_async
     */
    async checkResetNsxCredentialsProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.resetNsxCredentials, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    resetVcenterCredentials(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                private_cloud: (_a = request.privateCloud) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.resetVcenterCredentials(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `resetVcenterCredentials()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.reset_vcenter_credentials.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_ResetVcenterCredentials_async
     */
    async checkResetVcenterCredentialsProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.resetVcenterCredentials, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createHcxActivationKey(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createHcxActivationKey(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createHcxActivationKey()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.create_hcx_activation_key.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_CreateHcxActivationKey_async
     */
    async checkCreateHcxActivationKeyProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createHcxActivationKey, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createNetworkPolicy(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createNetworkPolicy(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createNetworkPolicy()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.create_network_policy.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_CreateNetworkPolicy_async
     */
    async checkCreateNetworkPolicyProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createNetworkPolicy, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateNetworkPolicy(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'network_policy.name': (_a = request.networkPolicy.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateNetworkPolicy(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateNetworkPolicy()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.update_network_policy.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_UpdateNetworkPolicy_async
     */
    async checkUpdateNetworkPolicyProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateNetworkPolicy, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteNetworkPolicy(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteNetworkPolicy(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteNetworkPolicy()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.delete_network_policy.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_DeleteNetworkPolicy_async
     */
    async checkDeleteNetworkPolicyProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteNetworkPolicy, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createVmwareEngineNetwork(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createVmwareEngineNetwork(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createVmwareEngineNetwork()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.create_vmware_engine_network.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_CreateVmwareEngineNetwork_async
     */
    async checkCreateVmwareEngineNetworkProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createVmwareEngineNetwork, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateVmwareEngineNetwork(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'vmware_engine_network.name': (_a = request.vmwareEngineNetwork.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateVmwareEngineNetwork(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateVmwareEngineNetwork()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.update_vmware_engine_network.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_UpdateVmwareEngineNetwork_async
     */
    async checkUpdateVmwareEngineNetworkProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateVmwareEngineNetwork, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteVmwareEngineNetwork(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteVmwareEngineNetwork(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteVmwareEngineNetwork()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.delete_vmware_engine_network.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_DeleteVmwareEngineNetwork_async
     */
    async checkDeleteVmwareEngineNetworkProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteVmwareEngineNetwork, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createPrivateConnection(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createPrivateConnection(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createPrivateConnection()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.create_private_connection.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_CreatePrivateConnection_async
     */
    async checkCreatePrivateConnectionProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createPrivateConnection, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updatePrivateConnection(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'private_connection.name': (_a = request.privateConnection.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updatePrivateConnection(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updatePrivateConnection()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.update_private_connection.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_UpdatePrivateConnection_async
     */
    async checkUpdatePrivateConnectionProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updatePrivateConnection, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deletePrivateConnection(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deletePrivateConnection(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deletePrivateConnection()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.delete_private_connection.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_DeletePrivateConnection_async
     */
    async checkDeletePrivateConnectionProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deletePrivateConnection, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listPrivateClouds(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listPrivateClouds(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the private cloud to be queried for
     *   clusters. Resource names are schemeless URIs that follow the conventions in
     *   https://cloud.google.com/apis/design/resource_names.
     *   For example:
     *   `projects/my-project/locations/us-central1-a`
     * @param {number} request.pageSize
     *   The maximum number of private clouds to return in one page.
     *   The service may return fewer than this value.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListPrivateClouds` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListPrivateClouds` must
     *   match the call that provided the page token.
     * @param {string} request.filter
     *   A filter expression that matches resources returned in the response.
     *   The expression must specify the field name, a comparison operator, and the
     *   value that you want to use for filtering. The value must be a string, a
     *   number, or a boolean. The comparison operator must be `=`, `!=`, `>`, or
     *   `<`.
     *
     *   For example, if you are filtering a list of private clouds, you can exclude
     *   the ones named `example-pc` by specifying `name != "example-pc"`.
     *
     *   You can also filter nested fields. For example, you could specify
     *   `networkConfig.managementCidr = "192.168.0.0/24"` to include private clouds
     *   only if they have a matching address in their network configuration.
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. For example:
     *   ```
     *   (name = "example-pc")
     *   (createTime > "2021-04-12T08:15:10.40Z")
     *   ```
     *
     *   By default, each expression is an `AND` expression. However, you can
     *   include `AND` and `OR` expressions explicitly. For example:
     *   ```
     *   (name = "private-cloud-1") AND
     *   (createTime > "2021-04-12T08:15:10.40Z") OR
     *   (name = "private-cloud-2")
     *   ```
     * @param {string} request.orderBy
     *   Sorts list results by a certain order. By default, returned results are
     *   ordered by `name` in ascending order. You can also sort results in
     *   descending order based on the `name` value using `orderBy="name desc"`.
     *   Currently, only ordering by `name` is supported.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.vmwareengine.v1.PrivateCloud|PrivateCloud} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listPrivateCloudsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listPrivateCloudsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listPrivateClouds'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPrivateClouds.createStream(this.innerApiCalls.listPrivateClouds, request, callSettings);
    }
    /**
     * Equivalent to `listPrivateClouds`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the private cloud to be queried for
     *   clusters. Resource names are schemeless URIs that follow the conventions in
     *   https://cloud.google.com/apis/design/resource_names.
     *   For example:
     *   `projects/my-project/locations/us-central1-a`
     * @param {number} request.pageSize
     *   The maximum number of private clouds to return in one page.
     *   The service may return fewer than this value.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListPrivateClouds` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListPrivateClouds` must
     *   match the call that provided the page token.
     * @param {string} request.filter
     *   A filter expression that matches resources returned in the response.
     *   The expression must specify the field name, a comparison operator, and the
     *   value that you want to use for filtering. The value must be a string, a
     *   number, or a boolean. The comparison operator must be `=`, `!=`, `>`, or
     *   `<`.
     *
     *   For example, if you are filtering a list of private clouds, you can exclude
     *   the ones named `example-pc` by specifying `name != "example-pc"`.
     *
     *   You can also filter nested fields. For example, you could specify
     *   `networkConfig.managementCidr = "192.168.0.0/24"` to include private clouds
     *   only if they have a matching address in their network configuration.
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. For example:
     *   ```
     *   (name = "example-pc")
     *   (createTime > "2021-04-12T08:15:10.40Z")
     *   ```
     *
     *   By default, each expression is an `AND` expression. However, you can
     *   include `AND` and `OR` expressions explicitly. For example:
     *   ```
     *   (name = "private-cloud-1") AND
     *   (createTime > "2021-04-12T08:15:10.40Z") OR
     *   (name = "private-cloud-2")
     *   ```
     * @param {string} request.orderBy
     *   Sorts list results by a certain order. By default, returned results are
     *   ordered by `name` in ascending order. You can also sort results in
     *   descending order based on the `name` value using `orderBy="name desc"`.
     *   Currently, only ordering by `name` is supported.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.vmwareengine.v1.PrivateCloud|PrivateCloud}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.list_private_clouds.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_ListPrivateClouds_async
     */
    listPrivateCloudsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listPrivateClouds'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPrivateClouds.asyncIterate(this.innerApiCalls['listPrivateClouds'], request, callSettings);
    }
    listClusters(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listClusters(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the private cloud to query for clusters.
     *   Resource names are schemeless URIs that follow the conventions in
     *   https://cloud.google.com/apis/design/resource_names.
     *   For example:
     *   `projects/my-project/locations/us-central1-a/privateClouds/my-cloud`
     * @param {number} request.pageSize
     *   The maximum number of clusters to return in one page.
     *   The service may return fewer than this value.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListClusters` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListClusters`
     *   must match the call that provided the page token.
     * @param {string} request.filter
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. For example:
     *   ```
     *   (name = "example-cluster")
     *   (nodeCount = "3")
     *   ```
     *
     *   By default, each expression is an `AND` expression. However, you can
     *   include `AND` and `OR` expressions explicitly. For example:
     *   ```
     *   (name = "example-cluster-1") AND
     *   (createTime > "2021-04-12T08:15:10.40Z") OR
     *   (name = "example-cluster-2")
     *   ```
     * @param {string} request.orderBy
     *   Sorts list results by a certain order. By default, returned results are
     *   ordered by `name` in ascending order. You can also sort results in
     *   descending order based on the `name` value using `orderBy="name desc"`.
     *   Currently, only ordering by `name` is supported.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.vmwareengine.v1.Cluster|Cluster} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listClustersAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listClustersStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listClusters'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listClusters.createStream(this.innerApiCalls.listClusters, request, callSettings);
    }
    /**
     * Equivalent to `listClusters`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the private cloud to query for clusters.
     *   Resource names are schemeless URIs that follow the conventions in
     *   https://cloud.google.com/apis/design/resource_names.
     *   For example:
     *   `projects/my-project/locations/us-central1-a/privateClouds/my-cloud`
     * @param {number} request.pageSize
     *   The maximum number of clusters to return in one page.
     *   The service may return fewer than this value.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListClusters` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListClusters`
     *   must match the call that provided the page token.
     * @param {string} request.filter
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. For example:
     *   ```
     *   (name = "example-cluster")
     *   (nodeCount = "3")
     *   ```
     *
     *   By default, each expression is an `AND` expression. However, you can
     *   include `AND` and `OR` expressions explicitly. For example:
     *   ```
     *   (name = "example-cluster-1") AND
     *   (createTime > "2021-04-12T08:15:10.40Z") OR
     *   (name = "example-cluster-2")
     *   ```
     * @param {string} request.orderBy
     *   Sorts list results by a certain order. By default, returned results are
     *   ordered by `name` in ascending order. You can also sort results in
     *   descending order based on the `name` value using `orderBy="name desc"`.
     *   Currently, only ordering by `name` is supported.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.vmwareengine.v1.Cluster|Cluster}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.list_clusters.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_ListClusters_async
     */
    listClustersAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listClusters'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listClusters.asyncIterate(this.innerApiCalls['listClusters'], request, callSettings);
    }
    listSubnets(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listSubnets(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the private cloud to be queried for
     *   subnets.
     *   Resource names are schemeless URIs that follow the conventions in
     *   https://cloud.google.com/apis/design/resource_names.
     *   For example:
     *   `projects/my-project/locations/us-central1-a/privateClouds/my-cloud`
     * @param {number} request.pageSize
     *   The maximum number of subnets to return in one page.
     *   The service may return fewer than this value.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListSubnetsRequest` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListSubnetsRequest` must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.vmwareengine.v1.Subnet|Subnet} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listSubnetsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSubnetsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listSubnets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listSubnets.createStream(this.innerApiCalls.listSubnets, request, callSettings);
    }
    /**
     * Equivalent to `listSubnets`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the private cloud to be queried for
     *   subnets.
     *   Resource names are schemeless URIs that follow the conventions in
     *   https://cloud.google.com/apis/design/resource_names.
     *   For example:
     *   `projects/my-project/locations/us-central1-a/privateClouds/my-cloud`
     * @param {number} request.pageSize
     *   The maximum number of subnets to return in one page.
     *   The service may return fewer than this value.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListSubnetsRequest` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListSubnetsRequest` must match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.vmwareengine.v1.Subnet|Subnet}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.list_subnets.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_ListSubnets_async
     */
    listSubnetsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listSubnets'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listSubnets.asyncIterate(this.innerApiCalls['listSubnets'], request, callSettings);
    }
    listNodeTypes(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listNodeTypes(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location to be queried for node types.
     *   Resource names are schemeless URIs that follow the conventions in
     *   https://cloud.google.com/apis/design/resource_names.
     *   For example:
     *   `projects/my-project/locations/us-central1-a`
     * @param {number} request.pageSize
     *   The maximum number of node types to return in one page.
     *   The service may return fewer than this value.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListNodeTypes` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListNodeTypes` must match the call that provided the page token.
     * @param {string} request.filter
     *   A filter expression that matches resources returned in the response.
     *   The expression must specify the field name, a comparison
     *   operator, and the value that you want to use for filtering. The value
     *   must be a string, a number, or a boolean. The comparison operator
     *   must be `=`, `!=`, `>`, or `<`.
     *
     *   For example, if you are filtering a list of node types, you can
     *   exclude the ones named `standard-72` by specifying
     *   `name != "standard-72"`.
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. For example:
     *   ```
     *   (name = "standard-72")
     *   (virtual_cpu_count > 2)
     *   ```
     *
     *   By default, each expression is an `AND` expression. However, you
     *   can include `AND` and `OR` expressions explicitly.
     *   For example:
     *   ```
     *   (name = "standard-96") AND
     *   (virtual_cpu_count > 2) OR
     *   (name = "standard-72")
     *   ```
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.vmwareengine.v1.NodeType|NodeType} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listNodeTypesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listNodeTypesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listNodeTypes'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listNodeTypes.createStream(this.innerApiCalls.listNodeTypes, request, callSettings);
    }
    /**
     * Equivalent to `listNodeTypes`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location to be queried for node types.
     *   Resource names are schemeless URIs that follow the conventions in
     *   https://cloud.google.com/apis/design/resource_names.
     *   For example:
     *   `projects/my-project/locations/us-central1-a`
     * @param {number} request.pageSize
     *   The maximum number of node types to return in one page.
     *   The service may return fewer than this value.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListNodeTypes` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListNodeTypes` must match the call that provided the page token.
     * @param {string} request.filter
     *   A filter expression that matches resources returned in the response.
     *   The expression must specify the field name, a comparison
     *   operator, and the value that you want to use for filtering. The value
     *   must be a string, a number, or a boolean. The comparison operator
     *   must be `=`, `!=`, `>`, or `<`.
     *
     *   For example, if you are filtering a list of node types, you can
     *   exclude the ones named `standard-72` by specifying
     *   `name != "standard-72"`.
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. For example:
     *   ```
     *   (name = "standard-72")
     *   (virtual_cpu_count > 2)
     *   ```
     *
     *   By default, each expression is an `AND` expression. However, you
     *   can include `AND` and `OR` expressions explicitly.
     *   For example:
     *   ```
     *   (name = "standard-96") AND
     *   (virtual_cpu_count > 2) OR
     *   (name = "standard-72")
     *   ```
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.vmwareengine.v1.NodeType|NodeType}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.list_node_types.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_ListNodeTypes_async
     */
    listNodeTypesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listNodeTypes'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listNodeTypes.asyncIterate(this.innerApiCalls['listNodeTypes'], request, callSettings);
    }
    listHcxActivationKeys(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listHcxActivationKeys(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the private cloud
     *   to be queried for HCX activation keys.
     *   Resource names are schemeless URIs that follow the conventions in
     *   https://cloud.google.com/apis/design/resource_names.
     *   For example:
     *   `projects/my-project/locations/us-central1/privateClouds/my-cloud`
     * @param {number} request.pageSize
     *   The maximum number of HCX activation keys to return in one page.
     *   The service may return fewer than this value.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListHcxActivationKeys` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListHcxActivationKeys` must match the call that provided the page
     *   token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.vmwareengine.v1.HcxActivationKey|HcxActivationKey} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listHcxActivationKeysAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listHcxActivationKeysStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listHcxActivationKeys'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listHcxActivationKeys.createStream(this.innerApiCalls.listHcxActivationKeys, request, callSettings);
    }
    /**
     * Equivalent to `listHcxActivationKeys`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the private cloud
     *   to be queried for HCX activation keys.
     *   Resource names are schemeless URIs that follow the conventions in
     *   https://cloud.google.com/apis/design/resource_names.
     *   For example:
     *   `projects/my-project/locations/us-central1/privateClouds/my-cloud`
     * @param {number} request.pageSize
     *   The maximum number of HCX activation keys to return in one page.
     *   The service may return fewer than this value.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListHcxActivationKeys` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListHcxActivationKeys` must match the call that provided the page
     *   token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.vmwareengine.v1.HcxActivationKey|HcxActivationKey}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.list_hcx_activation_keys.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_ListHcxActivationKeys_async
     */
    listHcxActivationKeysAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listHcxActivationKeys'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listHcxActivationKeys.asyncIterate(this.innerApiCalls['listHcxActivationKeys'], request, callSettings);
    }
    listNetworkPolicies(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listNetworkPolicies(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location (region) to query for
     *   network policies. Resource names are schemeless URIs that follow the
     *   conventions in https://cloud.google.com/apis/design/resource_names. For
     *   example: `projects/my-project/locations/us-central1`
     * @param {number} request.pageSize
     *   The maximum number of network policies to return in one page.
     *   The service may return fewer than this value.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListNetworkPolicies` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListNetworkPolicies` must match the call that provided the page
     *   token.
     * @param {string} request.filter
     *   A filter expression that matches resources returned in the response.
     *   The expression must specify the field name, a comparison
     *   operator, and the value that you want to use for filtering. The value
     *   must be a string, a number, or a boolean. The comparison operator
     *   must be `=`, `!=`, `>`, or `<`.
     *
     *   For example, if you are filtering a list of network policies, you can
     *   exclude the ones named `example-policy` by specifying
     *   `name != "example-policy"`.
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. For example:
     *   ```
     *   (name = "example-policy")
     *   (createTime > "2021-04-12T08:15:10.40Z")
     *   ```
     *
     *   By default, each expression is an `AND` expression. However, you
     *   can include `AND` and `OR` expressions explicitly.
     *   For example:
     *   ```
     *   (name = "example-policy-1") AND
     *   (createTime > "2021-04-12T08:15:10.40Z") OR
     *   (name = "example-policy-2")
     *   ```
     * @param {string} request.orderBy
     *   Sorts list results by a certain order. By default, returned results
     *   are ordered by `name` in ascending order.
     *   You can also sort results in descending order based on the `name` value
     *   using `orderBy="name desc"`.
     *   Currently, only ordering by `name` is supported.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.vmwareengine.v1.NetworkPolicy|NetworkPolicy} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listNetworkPoliciesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listNetworkPoliciesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listNetworkPolicies'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listNetworkPolicies.createStream(this.innerApiCalls.listNetworkPolicies, request, callSettings);
    }
    /**
     * Equivalent to `listNetworkPolicies`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location (region) to query for
     *   network policies. Resource names are schemeless URIs that follow the
     *   conventions in https://cloud.google.com/apis/design/resource_names. For
     *   example: `projects/my-project/locations/us-central1`
     * @param {number} request.pageSize
     *   The maximum number of network policies to return in one page.
     *   The service may return fewer than this value.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListNetworkPolicies` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListNetworkPolicies` must match the call that provided the page
     *   token.
     * @param {string} request.filter
     *   A filter expression that matches resources returned in the response.
     *   The expression must specify the field name, a comparison
     *   operator, and the value that you want to use for filtering. The value
     *   must be a string, a number, or a boolean. The comparison operator
     *   must be `=`, `!=`, `>`, or `<`.
     *
     *   For example, if you are filtering a list of network policies, you can
     *   exclude the ones named `example-policy` by specifying
     *   `name != "example-policy"`.
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. For example:
     *   ```
     *   (name = "example-policy")
     *   (createTime > "2021-04-12T08:15:10.40Z")
     *   ```
     *
     *   By default, each expression is an `AND` expression. However, you
     *   can include `AND` and `OR` expressions explicitly.
     *   For example:
     *   ```
     *   (name = "example-policy-1") AND
     *   (createTime > "2021-04-12T08:15:10.40Z") OR
     *   (name = "example-policy-2")
     *   ```
     * @param {string} request.orderBy
     *   Sorts list results by a certain order. By default, returned results
     *   are ordered by `name` in ascending order.
     *   You can also sort results in descending order based on the `name` value
     *   using `orderBy="name desc"`.
     *   Currently, only ordering by `name` is supported.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.vmwareengine.v1.NetworkPolicy|NetworkPolicy}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.list_network_policies.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_ListNetworkPolicies_async
     */
    listNetworkPoliciesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listNetworkPolicies'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listNetworkPolicies.asyncIterate(this.innerApiCalls['listNetworkPolicies'], request, callSettings);
    }
    listVmwareEngineNetworks(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listVmwareEngineNetworks(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location to query for
     *   VMware Engine networks. Resource names are schemeless URIs that follow the
     *   conventions in https://cloud.google.com/apis/design/resource_names. For
     *   example: `projects/my-project/locations/global`
     * @param {number} request.pageSize
     *   The maximum number of results to return in one page.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListVmwareEngineNetworks` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListVmwareEngineNetworks` must match the call that provided the page
     *   token.
     * @param {string} request.filter
     *   A filter expression that matches resources returned in the response.
     *   The expression must specify the field name, a comparison
     *   operator, and the value that you want to use for filtering. The value
     *   must be a string, a number, or a boolean. The comparison operator
     *   must be `=`, `!=`, `>`, or `<`.
     *
     *   For example, if you are filtering a list of network peerings, you can
     *   exclude the ones named `example-network` by specifying
     *   `name != "example-network"`.
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. For example:
     *   ```
     *   (name = "example-network")
     *   (createTime > "2021-04-12T08:15:10.40Z")
     *   ```
     *
     *   By default, each expression is an `AND` expression. However, you
     *   can include `AND` and `OR` expressions explicitly.
     *   For example:
     *   ```
     *   (name = "example-network-1") AND
     *   (createTime > "2021-04-12T08:15:10.40Z") OR
     *   (name = "example-network-2")
     *   ```
     * @param {string} request.orderBy
     *   Sorts list results by a certain order. By default, returned results
     *   are ordered by `name` in ascending order.
     *   You can also sort results in descending order based on the `name` value
     *   using `orderBy="name desc"`.
     *   Currently, only ordering by `name` is supported.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork|VmwareEngineNetwork} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listVmwareEngineNetworksAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listVmwareEngineNetworksStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listVmwareEngineNetworks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listVmwareEngineNetworks.createStream(this.innerApiCalls.listVmwareEngineNetworks, request, callSettings);
    }
    /**
     * Equivalent to `listVmwareEngineNetworks`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location to query for
     *   VMware Engine networks. Resource names are schemeless URIs that follow the
     *   conventions in https://cloud.google.com/apis/design/resource_names. For
     *   example: `projects/my-project/locations/global`
     * @param {number} request.pageSize
     *   The maximum number of results to return in one page.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListVmwareEngineNetworks` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListVmwareEngineNetworks` must match the call that provided the page
     *   token.
     * @param {string} request.filter
     *   A filter expression that matches resources returned in the response.
     *   The expression must specify the field name, a comparison
     *   operator, and the value that you want to use for filtering. The value
     *   must be a string, a number, or a boolean. The comparison operator
     *   must be `=`, `!=`, `>`, or `<`.
     *
     *   For example, if you are filtering a list of network peerings, you can
     *   exclude the ones named `example-network` by specifying
     *   `name != "example-network"`.
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. For example:
     *   ```
     *   (name = "example-network")
     *   (createTime > "2021-04-12T08:15:10.40Z")
     *   ```
     *
     *   By default, each expression is an `AND` expression. However, you
     *   can include `AND` and `OR` expressions explicitly.
     *   For example:
     *   ```
     *   (name = "example-network-1") AND
     *   (createTime > "2021-04-12T08:15:10.40Z") OR
     *   (name = "example-network-2")
     *   ```
     * @param {string} request.orderBy
     *   Sorts list results by a certain order. By default, returned results
     *   are ordered by `name` in ascending order.
     *   You can also sort results in descending order based on the `name` value
     *   using `orderBy="name desc"`.
     *   Currently, only ordering by `name` is supported.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.vmwareengine.v1.VmwareEngineNetwork|VmwareEngineNetwork}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.list_vmware_engine_networks.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_ListVmwareEngineNetworks_async
     */
    listVmwareEngineNetworksAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listVmwareEngineNetworks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listVmwareEngineNetworks.asyncIterate(this.innerApiCalls['listVmwareEngineNetworks'], request, callSettings);
    }
    listPrivateConnections(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listPrivateConnections(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location to query for
     *   private connections. Resource names are schemeless URIs that follow the
     *   conventions in https://cloud.google.com/apis/design/resource_names. For
     *   example: `projects/my-project/locations/us-central1`
     * @param {number} request.pageSize
     *   The maximum number of private connections to return in one page.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListPrivateConnections` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListPrivateConnections` must match the call that provided the page
     *   token.
     * @param {string} request.filter
     *   A filter expression that matches resources returned in the response.
     *   The expression must specify the field name, a comparison
     *   operator, and the value that you want to use for filtering. The value
     *   must be a string, a number, or a boolean. The comparison operator
     *   must be `=`, `!=`, `>`, or `<`.
     *
     *   For example, if you are filtering a list of private connections, you can
     *   exclude the ones named `example-connection` by specifying
     *   `name != "example-connection"`.
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. For example:
     *   ```
     *   (name = "example-connection")
     *   (createTime > "2022-09-22T08:15:10.40Z")
     *   ```
     *
     *   By default, each expression is an `AND` expression. However, you
     *   can include `AND` and `OR` expressions explicitly.
     *   For example:
     *   ```
     *   (name = "example-connection-1") AND
     *   (createTime > "2021-04-12T08:15:10.40Z") OR
     *   (name = "example-connection-2")
     *   ```
     * @param {string} request.orderBy
     *   Sorts list results by a certain order. By default, returned results
     *   are ordered by `name` in ascending order.
     *   You can also sort results in descending order based on the `name` value
     *   using `orderBy="name desc"`.
     *   Currently, only ordering by `name` is supported.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.vmwareengine.v1.PrivateConnection|PrivateConnection} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listPrivateConnectionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listPrivateConnectionsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listPrivateConnections'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPrivateConnections.createStream(this.innerApiCalls.listPrivateConnections, request, callSettings);
    }
    /**
     * Equivalent to `listPrivateConnections`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the location to query for
     *   private connections. Resource names are schemeless URIs that follow the
     *   conventions in https://cloud.google.com/apis/design/resource_names. For
     *   example: `projects/my-project/locations/us-central1`
     * @param {number} request.pageSize
     *   The maximum number of private connections to return in one page.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListPrivateConnections` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to
     *   `ListPrivateConnections` must match the call that provided the page
     *   token.
     * @param {string} request.filter
     *   A filter expression that matches resources returned in the response.
     *   The expression must specify the field name, a comparison
     *   operator, and the value that you want to use for filtering. The value
     *   must be a string, a number, or a boolean. The comparison operator
     *   must be `=`, `!=`, `>`, or `<`.
     *
     *   For example, if you are filtering a list of private connections, you can
     *   exclude the ones named `example-connection` by specifying
     *   `name != "example-connection"`.
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. For example:
     *   ```
     *   (name = "example-connection")
     *   (createTime > "2022-09-22T08:15:10.40Z")
     *   ```
     *
     *   By default, each expression is an `AND` expression. However, you
     *   can include `AND` and `OR` expressions explicitly.
     *   For example:
     *   ```
     *   (name = "example-connection-1") AND
     *   (createTime > "2021-04-12T08:15:10.40Z") OR
     *   (name = "example-connection-2")
     *   ```
     * @param {string} request.orderBy
     *   Sorts list results by a certain order. By default, returned results
     *   are ordered by `name` in ascending order.
     *   You can also sort results in descending order based on the `name` value
     *   using `orderBy="name desc"`.
     *   Currently, only ordering by `name` is supported.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.vmwareengine.v1.PrivateConnection|PrivateConnection}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.list_private_connections.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_ListPrivateConnections_async
     */
    listPrivateConnectionsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listPrivateConnections'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPrivateConnections.asyncIterate(this.innerApiCalls['listPrivateConnections'], request, callSettings);
    }
    listPrivateConnectionPeeringRoutes(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listPrivateConnectionPeeringRoutes(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the private connection to retrieve peering
     *   routes from. Resource names are schemeless URIs that follow the conventions
     *   in https://cloud.google.com/apis/design/resource_names. For example:
     *   `projects/my-project/locations/us-west1/privateConnections/my-connection`
     * @param {number} request.pageSize
     *   The maximum number of peering routes to return in one page.
     *   The service may return fewer than this value.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListPrivateConnectionPeeringRoutes`
     *   call. Provide this to retrieve the subsequent page. When paginating, all
     *   other parameters provided to `ListPrivateConnectionPeeringRoutes` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.vmwareengine.v1.PeeringRoute|PeeringRoute} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listPrivateConnectionPeeringRoutesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listPrivateConnectionPeeringRoutesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listPrivateConnectionPeeringRoutes'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPrivateConnectionPeeringRoutes.createStream(this.innerApiCalls.listPrivateConnectionPeeringRoutes, request, callSettings);
    }
    /**
     * Equivalent to `listPrivateConnectionPeeringRoutes`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the private connection to retrieve peering
     *   routes from. Resource names are schemeless URIs that follow the conventions
     *   in https://cloud.google.com/apis/design/resource_names. For example:
     *   `projects/my-project/locations/us-west1/privateConnections/my-connection`
     * @param {number} request.pageSize
     *   The maximum number of peering routes to return in one page.
     *   The service may return fewer than this value.
     *   The maximum value is coerced to 1000.
     *   The default value of this field is 500.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListPrivateConnectionPeeringRoutes`
     *   call. Provide this to retrieve the subsequent page. When paginating, all
     *   other parameters provided to `ListPrivateConnectionPeeringRoutes` must
     *   match the call that provided the page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.vmwareengine.v1.PeeringRoute|PeeringRoute}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/vmware_engine.list_private_connection_peering_routes.js</caption>
     * region_tag:vmwareengine_v1_generated_VmwareEngine_ListPrivateConnectionPeeringRoutes_async
     */
    listPrivateConnectionPeeringRoutesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listPrivateConnectionPeeringRoutes'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listPrivateConnectionPeeringRoutes.asyncIterate(this.innerApiCalls['listPrivateConnectionPeeringRoutes'], request, callSettings);
    }
    /**
     * Gets the access control policy for a resource. Returns an empty policy
     * if the resource exists and does not have a policy set.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {Object} [request.options]
     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
     *   `GetIamPolicy`. This field is only used by Cloud IAM.
     *
     *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    getIamPolicy(request, options, callback) {
        return this.iamClient.getIamPolicy(request, options, callback);
    }
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    setIamPolicy(request, options, callback) {
        return this.iamClient.setIamPolicy(request, options, callback);
    }
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     */
    testIamPermissions(request, options, callback) {
        return this.iamClient.testIamPermissions(request, options, callback);
    }
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request, options, callback) {
        return this.locationsClient.getLocation(request, options, callback);
    }
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request, options) {
        return this.locationsClient.listLocationsAsync(request, options);
    }
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request, options, callback) {
        return this.operationsClient.getOperation(request, options, callback);
    }
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request, options) {
        return this.operationsClient.listOperationsAsync(request, options);
    }
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request, options, callback) {
        return this.operationsClient.cancelOperation(request, options, callback);
    }
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request, options, callback) {
        return this.operationsClient.deleteOperation(request, options, callback);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified cluster resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} private_cloud
     * @param {string} cluster
     * @returns {string} Resource name string.
     */
    clusterPath(project, location, privateCloud, cluster) {
        return this.pathTemplates.clusterPathTemplate.render({
            project: project,
            location: location,
            private_cloud: privateCloud,
            cluster: cluster,
        });
    }
    /**
     * Parse the project from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromClusterName(clusterName) {
        return this.pathTemplates.clusterPathTemplate.match(clusterName).project;
    }
    /**
     * Parse the location from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromClusterName(clusterName) {
        return this.pathTemplates.clusterPathTemplate.match(clusterName).location;
    }
    /**
     * Parse the private_cloud from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the private_cloud.
     */
    matchPrivateCloudFromClusterName(clusterName) {
        return this.pathTemplates.clusterPathTemplate.match(clusterName)
            .private_cloud;
    }
    /**
     * Parse the cluster from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromClusterName(clusterName) {
        return this.pathTemplates.clusterPathTemplate.match(clusterName).cluster;
    }
    /**
     * Return a fully-qualified hcxActivationKey resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} private_cloud
     * @param {string} hcx_activation_key
     * @returns {string} Resource name string.
     */
    hcxActivationKeyPath(project, location, privateCloud, hcxActivationKey) {
        return this.pathTemplates.hcxActivationKeyPathTemplate.render({
            project: project,
            location: location,
            private_cloud: privateCloud,
            hcx_activation_key: hcxActivationKey,
        });
    }
    /**
     * Parse the project from HcxActivationKey resource.
     *
     * @param {string} hcxActivationKeyName
     *   A fully-qualified path representing HcxActivationKey resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromHcxActivationKeyName(hcxActivationKeyName) {
        return this.pathTemplates.hcxActivationKeyPathTemplate.match(hcxActivationKeyName).project;
    }
    /**
     * Parse the location from HcxActivationKey resource.
     *
     * @param {string} hcxActivationKeyName
     *   A fully-qualified path representing HcxActivationKey resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromHcxActivationKeyName(hcxActivationKeyName) {
        return this.pathTemplates.hcxActivationKeyPathTemplate.match(hcxActivationKeyName).location;
    }
    /**
     * Parse the private_cloud from HcxActivationKey resource.
     *
     * @param {string} hcxActivationKeyName
     *   A fully-qualified path representing HcxActivationKey resource.
     * @returns {string} A string representing the private_cloud.
     */
    matchPrivateCloudFromHcxActivationKeyName(hcxActivationKeyName) {
        return this.pathTemplates.hcxActivationKeyPathTemplate.match(hcxActivationKeyName).private_cloud;
    }
    /**
     * Parse the hcx_activation_key from HcxActivationKey resource.
     *
     * @param {string} hcxActivationKeyName
     *   A fully-qualified path representing HcxActivationKey resource.
     * @returns {string} A string representing the hcx_activation_key.
     */
    matchHcxActivationKeyFromHcxActivationKeyName(hcxActivationKeyName) {
        return this.pathTemplates.hcxActivationKeyPathTemplate.match(hcxActivationKeyName).hcx_activation_key;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified networkPolicy resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} network_policy
     * @returns {string} Resource name string.
     */
    networkPolicyPath(project, location, networkPolicy) {
        return this.pathTemplates.networkPolicyPathTemplate.render({
            project: project,
            location: location,
            network_policy: networkPolicy,
        });
    }
    /**
     * Parse the project from NetworkPolicy resource.
     *
     * @param {string} networkPolicyName
     *   A fully-qualified path representing NetworkPolicy resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromNetworkPolicyName(networkPolicyName) {
        return this.pathTemplates.networkPolicyPathTemplate.match(networkPolicyName)
            .project;
    }
    /**
     * Parse the location from NetworkPolicy resource.
     *
     * @param {string} networkPolicyName
     *   A fully-qualified path representing NetworkPolicy resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromNetworkPolicyName(networkPolicyName) {
        return this.pathTemplates.networkPolicyPathTemplate.match(networkPolicyName)
            .location;
    }
    /**
     * Parse the network_policy from NetworkPolicy resource.
     *
     * @param {string} networkPolicyName
     *   A fully-qualified path representing NetworkPolicy resource.
     * @returns {string} A string representing the network_policy.
     */
    matchNetworkPolicyFromNetworkPolicyName(networkPolicyName) {
        return this.pathTemplates.networkPolicyPathTemplate.match(networkPolicyName)
            .network_policy;
    }
    /**
     * Return a fully-qualified nodeType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} node_type
     * @returns {string} Resource name string.
     */
    nodeTypePath(project, location, nodeType) {
        return this.pathTemplates.nodeTypePathTemplate.render({
            project: project,
            location: location,
            node_type: nodeType,
        });
    }
    /**
     * Parse the project from NodeType resource.
     *
     * @param {string} nodeTypeName
     *   A fully-qualified path representing NodeType resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromNodeTypeName(nodeTypeName) {
        return this.pathTemplates.nodeTypePathTemplate.match(nodeTypeName).project;
    }
    /**
     * Parse the location from NodeType resource.
     *
     * @param {string} nodeTypeName
     *   A fully-qualified path representing NodeType resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromNodeTypeName(nodeTypeName) {
        return this.pathTemplates.nodeTypePathTemplate.match(nodeTypeName).location;
    }
    /**
     * Parse the node_type from NodeType resource.
     *
     * @param {string} nodeTypeName
     *   A fully-qualified path representing NodeType resource.
     * @returns {string} A string representing the node_type.
     */
    matchNodeTypeFromNodeTypeName(nodeTypeName) {
        return this.pathTemplates.nodeTypePathTemplate.match(nodeTypeName)
            .node_type;
    }
    /**
     * Return a fully-qualified privateCloud resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} private_cloud
     * @returns {string} Resource name string.
     */
    privateCloudPath(project, location, privateCloud) {
        return this.pathTemplates.privateCloudPathTemplate.render({
            project: project,
            location: location,
            private_cloud: privateCloud,
        });
    }
    /**
     * Parse the project from PrivateCloud resource.
     *
     * @param {string} privateCloudName
     *   A fully-qualified path representing PrivateCloud resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPrivateCloudName(privateCloudName) {
        return this.pathTemplates.privateCloudPathTemplate.match(privateCloudName)
            .project;
    }
    /**
     * Parse the location from PrivateCloud resource.
     *
     * @param {string} privateCloudName
     *   A fully-qualified path representing PrivateCloud resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPrivateCloudName(privateCloudName) {
        return this.pathTemplates.privateCloudPathTemplate.match(privateCloudName)
            .location;
    }
    /**
     * Parse the private_cloud from PrivateCloud resource.
     *
     * @param {string} privateCloudName
     *   A fully-qualified path representing PrivateCloud resource.
     * @returns {string} A string representing the private_cloud.
     */
    matchPrivateCloudFromPrivateCloudName(privateCloudName) {
        return this.pathTemplates.privateCloudPathTemplate.match(privateCloudName)
            .private_cloud;
    }
    /**
     * Return a fully-qualified privateConnection resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} private_connection
     * @returns {string} Resource name string.
     */
    privateConnectionPath(project, location, privateConnection) {
        return this.pathTemplates.privateConnectionPathTemplate.render({
            project: project,
            location: location,
            private_connection: privateConnection,
        });
    }
    /**
     * Parse the project from PrivateConnection resource.
     *
     * @param {string} privateConnectionName
     *   A fully-qualified path representing PrivateConnection resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPrivateConnectionName(privateConnectionName) {
        return this.pathTemplates.privateConnectionPathTemplate.match(privateConnectionName).project;
    }
    /**
     * Parse the location from PrivateConnection resource.
     *
     * @param {string} privateConnectionName
     *   A fully-qualified path representing PrivateConnection resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPrivateConnectionName(privateConnectionName) {
        return this.pathTemplates.privateConnectionPathTemplate.match(privateConnectionName).location;
    }
    /**
     * Parse the private_connection from PrivateConnection resource.
     *
     * @param {string} privateConnectionName
     *   A fully-qualified path representing PrivateConnection resource.
     * @returns {string} A string representing the private_connection.
     */
    matchPrivateConnectionFromPrivateConnectionName(privateConnectionName) {
        return this.pathTemplates.privateConnectionPathTemplate.match(privateConnectionName).private_connection;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Return a fully-qualified subnet resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} private_cloud
     * @param {string} subnet
     * @returns {string} Resource name string.
     */
    subnetPath(project, location, privateCloud, subnet) {
        return this.pathTemplates.subnetPathTemplate.render({
            project: project,
            location: location,
            private_cloud: privateCloud,
            subnet: subnet,
        });
    }
    /**
     * Parse the project from Subnet resource.
     *
     * @param {string} subnetName
     *   A fully-qualified path representing Subnet resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSubnetName(subnetName) {
        return this.pathTemplates.subnetPathTemplate.match(subnetName).project;
    }
    /**
     * Parse the location from Subnet resource.
     *
     * @param {string} subnetName
     *   A fully-qualified path representing Subnet resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSubnetName(subnetName) {
        return this.pathTemplates.subnetPathTemplate.match(subnetName).location;
    }
    /**
     * Parse the private_cloud from Subnet resource.
     *
     * @param {string} subnetName
     *   A fully-qualified path representing Subnet resource.
     * @returns {string} A string representing the private_cloud.
     */
    matchPrivateCloudFromSubnetName(subnetName) {
        return this.pathTemplates.subnetPathTemplate.match(subnetName)
            .private_cloud;
    }
    /**
     * Parse the subnet from Subnet resource.
     *
     * @param {string} subnetName
     *   A fully-qualified path representing Subnet resource.
     * @returns {string} A string representing the subnet.
     */
    matchSubnetFromSubnetName(subnetName) {
        return this.pathTemplates.subnetPathTemplate.match(subnetName).subnet;
    }
    /**
     * Return a fully-qualified vmwareEngineNetwork resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} vmware_engine_network
     * @returns {string} Resource name string.
     */
    vmwareEngineNetworkPath(project, location, vmwareEngineNetwork) {
        return this.pathTemplates.vmwareEngineNetworkPathTemplate.render({
            project: project,
            location: location,
            vmware_engine_network: vmwareEngineNetwork,
        });
    }
    /**
     * Parse the project from VmwareEngineNetwork resource.
     *
     * @param {string} vmwareEngineNetworkName
     *   A fully-qualified path representing VmwareEngineNetwork resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromVmwareEngineNetworkName(vmwareEngineNetworkName) {
        return this.pathTemplates.vmwareEngineNetworkPathTemplate.match(vmwareEngineNetworkName).project;
    }
    /**
     * Parse the location from VmwareEngineNetwork resource.
     *
     * @param {string} vmwareEngineNetworkName
     *   A fully-qualified path representing VmwareEngineNetwork resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromVmwareEngineNetworkName(vmwareEngineNetworkName) {
        return this.pathTemplates.vmwareEngineNetworkPathTemplate.match(vmwareEngineNetworkName).location;
    }
    /**
     * Parse the vmware_engine_network from VmwareEngineNetwork resource.
     *
     * @param {string} vmwareEngineNetworkName
     *   A fully-qualified path representing VmwareEngineNetwork resource.
     * @returns {string} A string representing the vmware_engine_network.
     */
    matchVmwareEngineNetworkFromVmwareEngineNetworkName(vmwareEngineNetworkName) {
        return this.pathTemplates.vmwareEngineNetworkPathTemplate.match(vmwareEngineNetworkName).vmware_engine_network;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.vmwareEngineStub && !this._terminated) {
            return this.vmwareEngineStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.iamClient.close();
                this.locationsClient.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.VmwareEngineClient = VmwareEngineClient;
//# sourceMappingURL=vmware_engine_client.js.map
/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Workflows is used to deploy and execute workflow programs.
 *  Workflows makes sure the program executes reliably, despite hardware and
 *  networking interruptions.
 * @class
 * @memberof v1beta
 */
export declare class WorkflowsClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    workflowsStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of WorkflowsClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new WorkflowsClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Gets details of a single Workflow.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the workflow which information should be retrieved.
     *   Format: projects/{project}/locations/{location}/workflows/{workflow}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.workflows.v1beta.Workflow|Workflow}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workflows.get_workflow.js</caption>
     * region_tag:workflows_v1beta_generated_Workflows_GetWorkflow_async
     */
    getWorkflow(request?: protos.google.cloud.workflows.v1beta.IGetWorkflowRequest, options?: CallOptions): Promise<[
        protos.google.cloud.workflows.v1beta.IWorkflow,
        protos.google.cloud.workflows.v1beta.IGetWorkflowRequest | undefined,
        {} | undefined
    ]>;
    getWorkflow(request: protos.google.cloud.workflows.v1beta.IGetWorkflowRequest, options: CallOptions, callback: Callback<protos.google.cloud.workflows.v1beta.IWorkflow, protos.google.cloud.workflows.v1beta.IGetWorkflowRequest | null | undefined, {} | null | undefined>): void;
    getWorkflow(request: protos.google.cloud.workflows.v1beta.IGetWorkflowRequest, callback: Callback<protos.google.cloud.workflows.v1beta.IWorkflow, protos.google.cloud.workflows.v1beta.IGetWorkflowRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a new workflow. If a workflow with the specified name already
     * exists in the specified project and location, the long running operation
     * will return {@link protos.google.rpc.Code.ALREADY_EXISTS|ALREADY_EXISTS} error.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Project and location in which the workflow should be created.
     *   Format:  projects/{project}/locations/{location}
     * @param {google.cloud.workflows.v1beta.Workflow} request.workflow
     *   Required. Workflow to be created.
     * @param {string} request.workflowId
     *   Required. The ID of the workflow to be created. It has to fulfill the
     *   following requirements:
     *
     *   * Must contain only letters, numbers, underscores and hyphens.
     *   * Must start with a letter.
     *   * Must be between 1-64 characters.
     *   * Must end with a number or a letter.
     *   * Must be unique within the customer project and location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workflows.create_workflow.js</caption>
     * region_tag:workflows_v1beta_generated_Workflows_CreateWorkflow_async
     */
    createWorkflow(request?: protos.google.cloud.workflows.v1beta.ICreateWorkflowRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.workflows.v1beta.IWorkflow, protos.google.cloud.workflows.v1beta.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createWorkflow(request: protos.google.cloud.workflows.v1beta.ICreateWorkflowRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.workflows.v1beta.IWorkflow, protos.google.cloud.workflows.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createWorkflow(request: protos.google.cloud.workflows.v1beta.ICreateWorkflowRequest, callback: Callback<LROperation<protos.google.cloud.workflows.v1beta.IWorkflow, protos.google.cloud.workflows.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createWorkflow()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workflows.create_workflow.js</caption>
     * region_tag:workflows_v1beta_generated_Workflows_CreateWorkflow_async
     */
    checkCreateWorkflowProgress(name: string): Promise<LROperation<protos.google.cloud.workflows.v1beta.Workflow, protos.google.cloud.workflows.v1beta.OperationMetadata>>;
    /**
     * Deletes a workflow with the specified name.
     * This method also cancels and deletes all running executions of the
     * workflow.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the workflow to be deleted.
     *   Format: projects/{project}/locations/{location}/workflows/{workflow}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workflows.delete_workflow.js</caption>
     * region_tag:workflows_v1beta_generated_Workflows_DeleteWorkflow_async
     */
    deleteWorkflow(request?: protos.google.cloud.workflows.v1beta.IDeleteWorkflowRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.workflows.v1beta.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteWorkflow(request: protos.google.cloud.workflows.v1beta.IDeleteWorkflowRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.workflows.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteWorkflow(request: protos.google.cloud.workflows.v1beta.IDeleteWorkflowRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.workflows.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteWorkflow()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workflows.delete_workflow.js</caption>
     * region_tag:workflows_v1beta_generated_Workflows_DeleteWorkflow_async
     */
    checkDeleteWorkflowProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.workflows.v1beta.OperationMetadata>>;
    /**
     * Updates an existing workflow.
     * Running this method has no impact on already running executions of the
     * workflow. A new revision of the workflow may be created as a result of a
     * successful update operation. In that case, such revision will be used
     * in new workflow executions.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.workflows.v1beta.Workflow} request.workflow
     *   Required. Workflow to be updated.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   List of fields to be updated. If not present, the entire workflow
     *   will be updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workflows.update_workflow.js</caption>
     * region_tag:workflows_v1beta_generated_Workflows_UpdateWorkflow_async
     */
    updateWorkflow(request?: protos.google.cloud.workflows.v1beta.IUpdateWorkflowRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.workflows.v1beta.IWorkflow, protos.google.cloud.workflows.v1beta.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateWorkflow(request: protos.google.cloud.workflows.v1beta.IUpdateWorkflowRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.workflows.v1beta.IWorkflow, protos.google.cloud.workflows.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateWorkflow(request: protos.google.cloud.workflows.v1beta.IUpdateWorkflowRequest, callback: Callback<LROperation<protos.google.cloud.workflows.v1beta.IWorkflow, protos.google.cloud.workflows.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateWorkflow()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workflows.update_workflow.js</caption>
     * region_tag:workflows_v1beta_generated_Workflows_UpdateWorkflow_async
     */
    checkUpdateWorkflowProgress(name: string): Promise<LROperation<protos.google.cloud.workflows.v1beta.Workflow, protos.google.cloud.workflows.v1beta.OperationMetadata>>;
    /**
     * Lists Workflows in a given project and location.
     * The default order is not specified.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Project and location from which the workflows should be listed.
     *   Format: projects/{project}/locations/{location}
     * @param {number} request.pageSize
     *   Maximum number of workflows to return per call. The service may return
     *   fewer than this value. If the value is not specified, a default value of
     *   500 will be used. The maximum permitted value is 1000 and values greater
     *   than 1000 will be coerced down to 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListWorkflows` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListWorkflows` must
     *   match the call that provided the page token.
     * @param {string} request.filter
     *   Filter to restrict results to specific workflows.
     * @param {string} request.orderBy
     *   Comma-separated list of fields that that specify the order of the results.
     *   Default sorting order for a field is ascending. To specify descending order
     *   for a field, append a " desc" suffix.
     *   If not specified, the results will be returned in an unspecified order.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.workflows.v1beta.Workflow|Workflow}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listWorkflowsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listWorkflows(request?: protos.google.cloud.workflows.v1beta.IListWorkflowsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.workflows.v1beta.IWorkflow[],
        protos.google.cloud.workflows.v1beta.IListWorkflowsRequest | null,
        protos.google.cloud.workflows.v1beta.IListWorkflowsResponse
    ]>;
    listWorkflows(request: protos.google.cloud.workflows.v1beta.IListWorkflowsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.workflows.v1beta.IListWorkflowsRequest, protos.google.cloud.workflows.v1beta.IListWorkflowsResponse | null | undefined, protos.google.cloud.workflows.v1beta.IWorkflow>): void;
    listWorkflows(request: protos.google.cloud.workflows.v1beta.IListWorkflowsRequest, callback: PaginationCallback<protos.google.cloud.workflows.v1beta.IListWorkflowsRequest, protos.google.cloud.workflows.v1beta.IListWorkflowsResponse | null | undefined, protos.google.cloud.workflows.v1beta.IWorkflow>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Project and location from which the workflows should be listed.
     *   Format: projects/{project}/locations/{location}
     * @param {number} request.pageSize
     *   Maximum number of workflows to return per call. The service may return
     *   fewer than this value. If the value is not specified, a default value of
     *   500 will be used. The maximum permitted value is 1000 and values greater
     *   than 1000 will be coerced down to 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListWorkflows` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListWorkflows` must
     *   match the call that provided the page token.
     * @param {string} request.filter
     *   Filter to restrict results to specific workflows.
     * @param {string} request.orderBy
     *   Comma-separated list of fields that that specify the order of the results.
     *   Default sorting order for a field is ascending. To specify descending order
     *   for a field, append a " desc" suffix.
     *   If not specified, the results will be returned in an unspecified order.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.workflows.v1beta.Workflow|Workflow} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listWorkflowsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listWorkflowsStream(request?: protos.google.cloud.workflows.v1beta.IListWorkflowsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listWorkflows`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Project and location from which the workflows should be listed.
     *   Format: projects/{project}/locations/{location}
     * @param {number} request.pageSize
     *   Maximum number of workflows to return per call. The service may return
     *   fewer than this value. If the value is not specified, a default value of
     *   500 will be used. The maximum permitted value is 1000 and values greater
     *   than 1000 will be coerced down to 1000.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListWorkflows` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListWorkflows` must
     *   match the call that provided the page token.
     * @param {string} request.filter
     *   Filter to restrict results to specific workflows.
     * @param {string} request.orderBy
     *   Comma-separated list of fields that that specify the order of the results.
     *   Default sorting order for a field is ascending. To specify descending order
     *   for a field, append a " desc" suffix.
     *   If not specified, the results will be returned in an unspecified order.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.workflows.v1beta.Workflow|Workflow}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workflows.list_workflows.js</caption>
     * region_tag:workflows_v1beta_generated_Workflows_ListWorkflows_async
     */
    listWorkflowsAsync(request?: protos.google.cloud.workflows.v1beta.IListWorkflowsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.workflows.v1beta.IWorkflow>;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified workflow resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} workflow
     * @returns {string} Resource name string.
     */
    workflowPath(project: string, location: string, workflow: string): string;
    /**
     * Parse the project from Workflow resource.
     *
     * @param {string} workflowName
     *   A fully-qualified path representing Workflow resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWorkflowName(workflowName: string): string | number;
    /**
     * Parse the location from Workflow resource.
     *
     * @param {string} workflowName
     *   A fully-qualified path representing Workflow resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWorkflowName(workflowName: string): string | number;
    /**
     * Parse the workflow from Workflow resource.
     *
     * @param {string} workflowName
     *   A fully-qualified path representing Workflow resource.
     * @returns {string} A string representing the workflow.
     */
    matchWorkflowFromWorkflowName(workflowName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}

"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkstationsClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/workstations_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./workstations_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Service for interacting with Cloud Workstations.
 * @class
 * @memberof v1
 */
class WorkstationsClient {
    /**
     * Construct an instance of WorkstationsClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new WorkstationsClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        this.iamClient = new this._gaxModule.IamClient(this._gaxGrpc, opts);
        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
            workstationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/workstationClusters/{workstation_cluster}/workstationConfigs/{workstation_config}/workstations/{workstation}'),
            workstationClusterPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/workstationClusters/{workstation_cluster}'),
            workstationConfigPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/workstationClusters/{workstation_cluster}/workstationConfigs/{workstation_config}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listWorkstationClusters: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'workstationClusters'),
            listWorkstationConfigs: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'workstationConfigs'),
            listUsableWorkstationConfigs: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'workstationConfigs'),
            listWorkstations: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'workstations'),
            listUsableWorkstations: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'workstations'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback) {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.iam.v1.IAMPolicy.GetIamPolicy',
                    get: '/v1/{resource=projects/*/locations/*/workstationClusters/*/workstationConfigs/*}:getIamPolicy',
                    additional_bindings: [
                        {
                            get: '/v1/{resource=projects/*/locations/*/workstationClusters/*/workstationConfigs/*/workstations/*}:getIamPolicy',
                        },
                    ],
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.SetIamPolicy',
                    post: '/v1/{resource=projects/*/locations/*/workstationClusters/*/workstationConfigs/*}:setIamPolicy',
                    body: '*',
                    additional_bindings: [
                        {
                            post: '/v1/{resource=projects/*/locations/*/workstationClusters/*/workstationConfigs/*/workstations/*}:setIamPolicy',
                            body: '*',
                        },
                    ],
                },
                {
                    selector: 'google.iam.v1.IAMPolicy.TestIamPermissions',
                    post: '/v1/{resource=projects/*/locations/*/workstationClusters/*/workstationConfigs/*}:testIamPermissions',
                    body: '*',
                    additional_bindings: [
                        {
                            post: '/v1/{resource=projects/*/locations/*/workstationClusters/*/workstationConfigs/*/workstations/*}:testIamPermissions',
                            body: '*',
                        },
                    ],
                },
                {
                    selector: 'google.longrunning.Operations.CancelOperation',
                    post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
                    body: '*',
                },
                {
                    selector: 'google.longrunning.Operations.DeleteOperation',
                    delete: '/v1/{name=projects/*/locations/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v1/{name=projects/*/locations/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v1/{name=projects/*/locations/*}/operations',
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        const createWorkstationClusterResponse = protoFilesRoot.lookup('.google.cloud.workstations.v1.WorkstationCluster');
        const createWorkstationClusterMetadata = protoFilesRoot.lookup('.google.cloud.workstations.v1.OperationMetadata');
        const updateWorkstationClusterResponse = protoFilesRoot.lookup('.google.cloud.workstations.v1.WorkstationCluster');
        const updateWorkstationClusterMetadata = protoFilesRoot.lookup('.google.cloud.workstations.v1.OperationMetadata');
        const deleteWorkstationClusterResponse = protoFilesRoot.lookup('.google.cloud.workstations.v1.WorkstationCluster');
        const deleteWorkstationClusterMetadata = protoFilesRoot.lookup('.google.cloud.workstations.v1.OperationMetadata');
        const createWorkstationConfigResponse = protoFilesRoot.lookup('.google.cloud.workstations.v1.WorkstationConfig');
        const createWorkstationConfigMetadata = protoFilesRoot.lookup('.google.cloud.workstations.v1.OperationMetadata');
        const updateWorkstationConfigResponse = protoFilesRoot.lookup('.google.cloud.workstations.v1.WorkstationConfig');
        const updateWorkstationConfigMetadata = protoFilesRoot.lookup('.google.cloud.workstations.v1.OperationMetadata');
        const deleteWorkstationConfigResponse = protoFilesRoot.lookup('.google.cloud.workstations.v1.WorkstationConfig');
        const deleteWorkstationConfigMetadata = protoFilesRoot.lookup('.google.cloud.workstations.v1.OperationMetadata');
        const createWorkstationResponse = protoFilesRoot.lookup('.google.cloud.workstations.v1.Workstation');
        const createWorkstationMetadata = protoFilesRoot.lookup('.google.cloud.workstations.v1.OperationMetadata');
        const updateWorkstationResponse = protoFilesRoot.lookup('.google.cloud.workstations.v1.Workstation');
        const updateWorkstationMetadata = protoFilesRoot.lookup('.google.cloud.workstations.v1.OperationMetadata');
        const deleteWorkstationResponse = protoFilesRoot.lookup('.google.cloud.workstations.v1.Workstation');
        const deleteWorkstationMetadata = protoFilesRoot.lookup('.google.cloud.workstations.v1.OperationMetadata');
        const startWorkstationResponse = protoFilesRoot.lookup('.google.cloud.workstations.v1.Workstation');
        const startWorkstationMetadata = protoFilesRoot.lookup('.google.cloud.workstations.v1.OperationMetadata');
        const stopWorkstationResponse = protoFilesRoot.lookup('.google.cloud.workstations.v1.Workstation');
        const stopWorkstationMetadata = protoFilesRoot.lookup('.google.cloud.workstations.v1.OperationMetadata');
        this.descriptors.longrunning = {
            createWorkstationCluster: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createWorkstationClusterResponse.decode.bind(createWorkstationClusterResponse), createWorkstationClusterMetadata.decode.bind(createWorkstationClusterMetadata)),
            updateWorkstationCluster: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateWorkstationClusterResponse.decode.bind(updateWorkstationClusterResponse), updateWorkstationClusterMetadata.decode.bind(updateWorkstationClusterMetadata)),
            deleteWorkstationCluster: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteWorkstationClusterResponse.decode.bind(deleteWorkstationClusterResponse), deleteWorkstationClusterMetadata.decode.bind(deleteWorkstationClusterMetadata)),
            createWorkstationConfig: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createWorkstationConfigResponse.decode.bind(createWorkstationConfigResponse), createWorkstationConfigMetadata.decode.bind(createWorkstationConfigMetadata)),
            updateWorkstationConfig: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateWorkstationConfigResponse.decode.bind(updateWorkstationConfigResponse), updateWorkstationConfigMetadata.decode.bind(updateWorkstationConfigMetadata)),
            deleteWorkstationConfig: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteWorkstationConfigResponse.decode.bind(deleteWorkstationConfigResponse), deleteWorkstationConfigMetadata.decode.bind(deleteWorkstationConfigMetadata)),
            createWorkstation: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createWorkstationResponse.decode.bind(createWorkstationResponse), createWorkstationMetadata.decode.bind(createWorkstationMetadata)),
            updateWorkstation: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateWorkstationResponse.decode.bind(updateWorkstationResponse), updateWorkstationMetadata.decode.bind(updateWorkstationMetadata)),
            deleteWorkstation: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteWorkstationResponse.decode.bind(deleteWorkstationResponse), deleteWorkstationMetadata.decode.bind(deleteWorkstationMetadata)),
            startWorkstation: new this._gaxModule.LongrunningDescriptor(this.operationsClient, startWorkstationResponse.decode.bind(startWorkstationResponse), startWorkstationMetadata.decode.bind(startWorkstationMetadata)),
            stopWorkstation: new this._gaxModule.LongrunningDescriptor(this.operationsClient, stopWorkstationResponse.decode.bind(stopWorkstationResponse), stopWorkstationMetadata.decode.bind(stopWorkstationMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.workstations.v1.Workstations', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.workstationsStub) {
            return this.workstationsStub;
        }
        // Put together the "service stub" for
        // google.cloud.workstations.v1.Workstations.
        this.workstationsStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.workstations.v1.Workstations')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.workstations.v1.Workstations, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const workstationsStubMethods = [
            'getWorkstationCluster',
            'listWorkstationClusters',
            'createWorkstationCluster',
            'updateWorkstationCluster',
            'deleteWorkstationCluster',
            'getWorkstationConfig',
            'listWorkstationConfigs',
            'listUsableWorkstationConfigs',
            'createWorkstationConfig',
            'updateWorkstationConfig',
            'deleteWorkstationConfig',
            'getWorkstation',
            'listWorkstations',
            'listUsableWorkstations',
            'createWorkstation',
            'updateWorkstation',
            'deleteWorkstation',
            'startWorkstation',
            'stopWorkstation',
            'generateAccessToken',
        ];
        for (const methodName of workstationsStubMethods) {
            const callPromise = this.workstationsStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.workstationsStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'workstations.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'workstations.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    getWorkstationCluster(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getWorkstationCluster(request, options, callback);
    }
    getWorkstationConfig(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getWorkstationConfig(request, options, callback);
    }
    getWorkstation(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getWorkstation(request, options, callback);
    }
    generateAccessToken(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                workstation: (_a = request.workstation) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.generateAccessToken(request, options, callback);
    }
    createWorkstationCluster(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createWorkstationCluster(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createWorkstationCluster()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/workstations.create_workstation_cluster.js</caption>
     * region_tag:workstations_v1_generated_Workstations_CreateWorkstationCluster_async
     */
    async checkCreateWorkstationClusterProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createWorkstationCluster, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateWorkstationCluster(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'workstation_cluster.name': (_a = request.workstationCluster.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateWorkstationCluster(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateWorkstationCluster()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/workstations.update_workstation_cluster.js</caption>
     * region_tag:workstations_v1_generated_Workstations_UpdateWorkstationCluster_async
     */
    async checkUpdateWorkstationClusterProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateWorkstationCluster, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteWorkstationCluster(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteWorkstationCluster(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteWorkstationCluster()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/workstations.delete_workstation_cluster.js</caption>
     * region_tag:workstations_v1_generated_Workstations_DeleteWorkstationCluster_async
     */
    async checkDeleteWorkstationClusterProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteWorkstationCluster, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createWorkstationConfig(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createWorkstationConfig(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createWorkstationConfig()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/workstations.create_workstation_config.js</caption>
     * region_tag:workstations_v1_generated_Workstations_CreateWorkstationConfig_async
     */
    async checkCreateWorkstationConfigProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createWorkstationConfig, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateWorkstationConfig(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'workstation_config.name': (_a = request.workstationConfig.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateWorkstationConfig(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateWorkstationConfig()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/workstations.update_workstation_config.js</caption>
     * region_tag:workstations_v1_generated_Workstations_UpdateWorkstationConfig_async
     */
    async checkUpdateWorkstationConfigProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateWorkstationConfig, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteWorkstationConfig(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteWorkstationConfig(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteWorkstationConfig()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/workstations.delete_workstation_config.js</caption>
     * region_tag:workstations_v1_generated_Workstations_DeleteWorkstationConfig_async
     */
    async checkDeleteWorkstationConfigProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteWorkstationConfig, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createWorkstation(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createWorkstation(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createWorkstation()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/workstations.create_workstation.js</caption>
     * region_tag:workstations_v1_generated_Workstations_CreateWorkstation_async
     */
    async checkCreateWorkstationProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createWorkstation, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateWorkstation(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'workstation.name': (_a = request.workstation.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateWorkstation(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateWorkstation()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/workstations.update_workstation.js</caption>
     * region_tag:workstations_v1_generated_Workstations_UpdateWorkstation_async
     */
    async checkUpdateWorkstationProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateWorkstation, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    deleteWorkstation(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteWorkstation(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteWorkstation()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/workstations.delete_workstation.js</caption>
     * region_tag:workstations_v1_generated_Workstations_DeleteWorkstation_async
     */
    async checkDeleteWorkstationProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteWorkstation, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    startWorkstation(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.startWorkstation(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `startWorkstation()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/workstations.start_workstation.js</caption>
     * region_tag:workstations_v1_generated_Workstations_StartWorkstation_async
     */
    async checkStartWorkstationProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.startWorkstation, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    stopWorkstation(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.stopWorkstation(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `stopWorkstation()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/workstations.stop_workstation.js</caption>
     * region_tag:workstations_v1_generated_Workstations_StopWorkstation_async
     */
    async checkStopWorkstationProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.stopWorkstation, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listWorkstationClusters(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listWorkstationClusters(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.workstations.v1.WorkstationCluster|WorkstationCluster} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listWorkstationClustersAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listWorkstationClustersStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listWorkstationClusters'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listWorkstationClusters.createStream(this.innerApiCalls.listWorkstationClusters, request, callSettings);
    }
    /**
     * Equivalent to `listWorkstationClusters`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.workstations.v1.WorkstationCluster|WorkstationCluster}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/workstations.list_workstation_clusters.js</caption>
     * region_tag:workstations_v1_generated_Workstations_ListWorkstationClusters_async
     */
    listWorkstationClustersAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listWorkstationClusters'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listWorkstationClusters.asyncIterate(this.innerApiCalls['listWorkstationClusters'], request, callSettings);
    }
    listWorkstationConfigs(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listWorkstationConfigs(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.workstations.v1.WorkstationConfig|WorkstationConfig} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listWorkstationConfigsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listWorkstationConfigsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listWorkstationConfigs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listWorkstationConfigs.createStream(this.innerApiCalls.listWorkstationConfigs, request, callSettings);
    }
    /**
     * Equivalent to `listWorkstationConfigs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.workstations.v1.WorkstationConfig|WorkstationConfig}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/workstations.list_workstation_configs.js</caption>
     * region_tag:workstations_v1_generated_Workstations_ListWorkstationConfigs_async
     */
    listWorkstationConfigsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listWorkstationConfigs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listWorkstationConfigs.asyncIterate(this.innerApiCalls['listWorkstationConfigs'], request, callSettings);
    }
    listUsableWorkstationConfigs(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listUsableWorkstationConfigs(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.workstations.v1.WorkstationConfig|WorkstationConfig} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listUsableWorkstationConfigsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listUsableWorkstationConfigsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listUsableWorkstationConfigs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listUsableWorkstationConfigs.createStream(this.innerApiCalls.listUsableWorkstationConfigs, request, callSettings);
    }
    /**
     * Equivalent to `listUsableWorkstationConfigs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.workstations.v1.WorkstationConfig|WorkstationConfig}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/workstations.list_usable_workstation_configs.js</caption>
     * region_tag:workstations_v1_generated_Workstations_ListUsableWorkstationConfigs_async
     */
    listUsableWorkstationConfigsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listUsableWorkstationConfigs'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listUsableWorkstationConfigs.asyncIterate(this.innerApiCalls['listUsableWorkstationConfigs'], request, callSettings);
    }
    listWorkstations(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listWorkstations(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.workstations.v1.Workstation|Workstation} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listWorkstationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listWorkstationsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listWorkstations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listWorkstations.createStream(this.innerApiCalls.listWorkstations, request, callSettings);
    }
    /**
     * Equivalent to `listWorkstations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.workstations.v1.Workstation|Workstation}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/workstations.list_workstations.js</caption>
     * region_tag:workstations_v1_generated_Workstations_ListWorkstations_async
     */
    listWorkstationsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listWorkstations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listWorkstations.asyncIterate(this.innerApiCalls['listWorkstations'], request, callSettings);
    }
    listUsableWorkstations(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listUsableWorkstations(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.workstations.v1.Workstation|Workstation} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listUsableWorkstationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listUsableWorkstationsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listUsableWorkstations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listUsableWorkstations.createStream(this.innerApiCalls.listUsableWorkstations, request, callSettings);
    }
    /**
     * Equivalent to `listUsableWorkstations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.workstations.v1.Workstation|Workstation}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/workstations.list_usable_workstations.js</caption>
     * region_tag:workstations_v1_generated_Workstations_ListUsableWorkstations_async
     */
    listUsableWorkstationsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listUsableWorkstations'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listUsableWorkstations.asyncIterate(this.innerApiCalls['listUsableWorkstations'], request, callSettings);
    }
    /**
     * Gets the access control policy for a resource. Returns an empty policy
     * if the resource exists and does not have a policy set.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {Object} [request.options]
     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
     *   `GetIamPolicy`. This field is only used by Cloud IAM.
     *
     *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    getIamPolicy(request, options, callback) {
        return this.iamClient.getIamPolicy(request, options, callback);
    }
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    setIamPolicy(request, options, callback) {
        return this.iamClient.setIamPolicy(request, options, callback);
    }
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     */
    testIamPermissions(request, options, callback) {
        return this.iamClient.testIamPermissions(request, options, callback);
    }
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request, options, callback) {
        return this.locationsClient.getLocation(request, options, callback);
    }
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request, options) {
        return this.locationsClient.listLocationsAsync(request, options);
    }
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request, options, callback) {
        return this.operationsClient.getOperation(request, options, callback);
    }
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request, options) {
        return this.operationsClient.listOperationsAsync(request, options);
    }
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request, options, callback) {
        return this.operationsClient.cancelOperation(request, options, callback);
    }
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request, options, callback) {
        return this.operationsClient.deleteOperation(request, options, callback);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Return a fully-qualified workstation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} workstation_cluster
     * @param {string} workstation_config
     * @param {string} workstation
     * @returns {string} Resource name string.
     */
    workstationPath(project, location, workstationCluster, workstationConfig, workstation) {
        return this.pathTemplates.workstationPathTemplate.render({
            project: project,
            location: location,
            workstation_cluster: workstationCluster,
            workstation_config: workstationConfig,
            workstation: workstation,
        });
    }
    /**
     * Parse the project from Workstation resource.
     *
     * @param {string} workstationName
     *   A fully-qualified path representing Workstation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWorkstationName(workstationName) {
        return this.pathTemplates.workstationPathTemplate.match(workstationName)
            .project;
    }
    /**
     * Parse the location from Workstation resource.
     *
     * @param {string} workstationName
     *   A fully-qualified path representing Workstation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWorkstationName(workstationName) {
        return this.pathTemplates.workstationPathTemplate.match(workstationName)
            .location;
    }
    /**
     * Parse the workstation_cluster from Workstation resource.
     *
     * @param {string} workstationName
     *   A fully-qualified path representing Workstation resource.
     * @returns {string} A string representing the workstation_cluster.
     */
    matchWorkstationClusterFromWorkstationName(workstationName) {
        return this.pathTemplates.workstationPathTemplate.match(workstationName)
            .workstation_cluster;
    }
    /**
     * Parse the workstation_config from Workstation resource.
     *
     * @param {string} workstationName
     *   A fully-qualified path representing Workstation resource.
     * @returns {string} A string representing the workstation_config.
     */
    matchWorkstationConfigFromWorkstationName(workstationName) {
        return this.pathTemplates.workstationPathTemplate.match(workstationName)
            .workstation_config;
    }
    /**
     * Parse the workstation from Workstation resource.
     *
     * @param {string} workstationName
     *   A fully-qualified path representing Workstation resource.
     * @returns {string} A string representing the workstation.
     */
    matchWorkstationFromWorkstationName(workstationName) {
        return this.pathTemplates.workstationPathTemplate.match(workstationName)
            .workstation;
    }
    /**
     * Return a fully-qualified workstationCluster resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} workstation_cluster
     * @returns {string} Resource name string.
     */
    workstationClusterPath(project, location, workstationCluster) {
        return this.pathTemplates.workstationClusterPathTemplate.render({
            project: project,
            location: location,
            workstation_cluster: workstationCluster,
        });
    }
    /**
     * Parse the project from WorkstationCluster resource.
     *
     * @param {string} workstationClusterName
     *   A fully-qualified path representing WorkstationCluster resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWorkstationClusterName(workstationClusterName) {
        return this.pathTemplates.workstationClusterPathTemplate.match(workstationClusterName).project;
    }
    /**
     * Parse the location from WorkstationCluster resource.
     *
     * @param {string} workstationClusterName
     *   A fully-qualified path representing WorkstationCluster resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWorkstationClusterName(workstationClusterName) {
        return this.pathTemplates.workstationClusterPathTemplate.match(workstationClusterName).location;
    }
    /**
     * Parse the workstation_cluster from WorkstationCluster resource.
     *
     * @param {string} workstationClusterName
     *   A fully-qualified path representing WorkstationCluster resource.
     * @returns {string} A string representing the workstation_cluster.
     */
    matchWorkstationClusterFromWorkstationClusterName(workstationClusterName) {
        return this.pathTemplates.workstationClusterPathTemplate.match(workstationClusterName).workstation_cluster;
    }
    /**
     * Return a fully-qualified workstationConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} workstation_cluster
     * @param {string} workstation_config
     * @returns {string} Resource name string.
     */
    workstationConfigPath(project, location, workstationCluster, workstationConfig) {
        return this.pathTemplates.workstationConfigPathTemplate.render({
            project: project,
            location: location,
            workstation_cluster: workstationCluster,
            workstation_config: workstationConfig,
        });
    }
    /**
     * Parse the project from WorkstationConfig resource.
     *
     * @param {string} workstationConfigName
     *   A fully-qualified path representing WorkstationConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWorkstationConfigName(workstationConfigName) {
        return this.pathTemplates.workstationConfigPathTemplate.match(workstationConfigName).project;
    }
    /**
     * Parse the location from WorkstationConfig resource.
     *
     * @param {string} workstationConfigName
     *   A fully-qualified path representing WorkstationConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWorkstationConfigName(workstationConfigName) {
        return this.pathTemplates.workstationConfigPathTemplate.match(workstationConfigName).location;
    }
    /**
     * Parse the workstation_cluster from WorkstationConfig resource.
     *
     * @param {string} workstationConfigName
     *   A fully-qualified path representing WorkstationConfig resource.
     * @returns {string} A string representing the workstation_cluster.
     */
    matchWorkstationClusterFromWorkstationConfigName(workstationConfigName) {
        return this.pathTemplates.workstationConfigPathTemplate.match(workstationConfigName).workstation_cluster;
    }
    /**
     * Parse the workstation_config from WorkstationConfig resource.
     *
     * @param {string} workstationConfigName
     *   A fully-qualified path representing WorkstationConfig resource.
     * @returns {string} A string representing the workstation_config.
     */
    matchWorkstationConfigFromWorkstationConfigName(workstationConfigName) {
        return this.pathTemplates.workstationConfigPathTemplate.match(workstationConfigName).workstation_config;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.workstationsStub && !this._terminated) {
            return this.workstationsStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.iamClient.close();
                this.locationsClient.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.WorkstationsClient = WorkstationsClient;
//# sourceMappingURL=workstations_client.js.map
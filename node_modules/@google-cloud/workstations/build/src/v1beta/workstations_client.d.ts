/// <reference types="node" />
import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, IamClient, IamProtos, LocationsClient, LocationProtos } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Service for interacting with Cloud Workstations.
 * @class
 * @memberof v1beta
 */
export declare class WorkstationsClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    iamClient: IamClient;
    locationsClient: LocationsClient;
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    workstationsStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of WorkstationsClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new WorkstationsClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Returns the requested workstation cluster.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the requested resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.workstations.v1beta.WorkstationCluster|WorkstationCluster}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.get_workstation_cluster.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_GetWorkstationCluster_async
     */
    getWorkstationCluster(request?: protos.google.cloud.workstations.v1beta.IGetWorkstationClusterRequest, options?: CallOptions): Promise<[
        protos.google.cloud.workstations.v1beta.IWorkstationCluster,
        (protos.google.cloud.workstations.v1beta.IGetWorkstationClusterRequest | undefined),
        {} | undefined
    ]>;
    getWorkstationCluster(request: protos.google.cloud.workstations.v1beta.IGetWorkstationClusterRequest, options: CallOptions, callback: Callback<protos.google.cloud.workstations.v1beta.IWorkstationCluster, protos.google.cloud.workstations.v1beta.IGetWorkstationClusterRequest | null | undefined, {} | null | undefined>): void;
    getWorkstationCluster(request: protos.google.cloud.workstations.v1beta.IGetWorkstationClusterRequest, callback: Callback<protos.google.cloud.workstations.v1beta.IWorkstationCluster, protos.google.cloud.workstations.v1beta.IGetWorkstationClusterRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns the requested workstation configuration.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the requested resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.workstations.v1beta.WorkstationConfig|WorkstationConfig}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.get_workstation_config.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_GetWorkstationConfig_async
     */
    getWorkstationConfig(request?: protos.google.cloud.workstations.v1beta.IGetWorkstationConfigRequest, options?: CallOptions): Promise<[
        protos.google.cloud.workstations.v1beta.IWorkstationConfig,
        (protos.google.cloud.workstations.v1beta.IGetWorkstationConfigRequest | undefined),
        {} | undefined
    ]>;
    getWorkstationConfig(request: protos.google.cloud.workstations.v1beta.IGetWorkstationConfigRequest, options: CallOptions, callback: Callback<protos.google.cloud.workstations.v1beta.IWorkstationConfig, protos.google.cloud.workstations.v1beta.IGetWorkstationConfigRequest | null | undefined, {} | null | undefined>): void;
    getWorkstationConfig(request: protos.google.cloud.workstations.v1beta.IGetWorkstationConfigRequest, callback: Callback<protos.google.cloud.workstations.v1beta.IWorkstationConfig, protos.google.cloud.workstations.v1beta.IGetWorkstationConfigRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns the requested workstation.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the requested resource.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.workstations.v1beta.Workstation|Workstation}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.get_workstation.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_GetWorkstation_async
     */
    getWorkstation(request?: protos.google.cloud.workstations.v1beta.IGetWorkstationRequest, options?: CallOptions): Promise<[
        protos.google.cloud.workstations.v1beta.IWorkstation,
        (protos.google.cloud.workstations.v1beta.IGetWorkstationRequest | undefined),
        {} | undefined
    ]>;
    getWorkstation(request: protos.google.cloud.workstations.v1beta.IGetWorkstationRequest, options: CallOptions, callback: Callback<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IGetWorkstationRequest | null | undefined, {} | null | undefined>): void;
    getWorkstation(request: protos.google.cloud.workstations.v1beta.IGetWorkstationRequest, callback: Callback<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IGetWorkstationRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Returns a short-lived credential that can be used to send authenticated and
     * authorized traffic to a workstation.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.protobuf.Timestamp} request.expireTime
     *   Desired expiration time of the access token. This value must
     *   be at most 24 hours in the future. If a value is not specified, the
     *   token's expiration time will be set to a default value of 1 hour in the
     *   future.
     * @param {google.protobuf.Duration} request.ttl
     *   Desired lifetime duration of the access token. This value must
     *   be at most 24 hours. If a value is not specified, the token's lifetime
     *   will be set to a default value of 1 hour.
     * @param {string} request.workstation
     *   Required. Name of the workstation for which the access token should be
     *   generated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.workstations.v1beta.GenerateAccessTokenResponse|GenerateAccessTokenResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.generate_access_token.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_GenerateAccessToken_async
     */
    generateAccessToken(request?: protos.google.cloud.workstations.v1beta.IGenerateAccessTokenRequest, options?: CallOptions): Promise<[
        protos.google.cloud.workstations.v1beta.IGenerateAccessTokenResponse,
        (protos.google.cloud.workstations.v1beta.IGenerateAccessTokenRequest | undefined),
        {} | undefined
    ]>;
    generateAccessToken(request: protos.google.cloud.workstations.v1beta.IGenerateAccessTokenRequest, options: CallOptions, callback: Callback<protos.google.cloud.workstations.v1beta.IGenerateAccessTokenResponse, protos.google.cloud.workstations.v1beta.IGenerateAccessTokenRequest | null | undefined, {} | null | undefined>): void;
    generateAccessToken(request: protos.google.cloud.workstations.v1beta.IGenerateAccessTokenRequest, callback: Callback<protos.google.cloud.workstations.v1beta.IGenerateAccessTokenResponse, protos.google.cloud.workstations.v1beta.IGenerateAccessTokenRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Creates a new workstation cluster.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {string} request.workstationClusterId
     *   Required. ID to use for the workstation cluster.
     * @param {google.cloud.workstations.v1beta.WorkstationCluster} request.workstationCluster
     *   Required. Workstation cluster to create.
     * @param {boolean} [request.validateOnly]
     *   Optional. If set, validate the request and preview the review, but do not
     *   actually apply it.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.create_workstation_cluster.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_CreateWorkstationCluster_async
     */
    createWorkstationCluster(request?: protos.google.cloud.workstations.v1beta.ICreateWorkstationClusterRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.workstations.v1beta.IWorkstationCluster, protos.google.cloud.workstations.v1beta.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createWorkstationCluster(request: protos.google.cloud.workstations.v1beta.ICreateWorkstationClusterRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstationCluster, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createWorkstationCluster(request: protos.google.cloud.workstations.v1beta.ICreateWorkstationClusterRequest, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstationCluster, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createWorkstationCluster()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.create_workstation_cluster.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_CreateWorkstationCluster_async
     */
    checkCreateWorkstationClusterProgress(name: string): Promise<LROperation<protos.google.cloud.workstations.v1beta.WorkstationCluster, protos.google.cloud.workstations.v1beta.OperationMetadata>>;
    /**
     * Updates an existing workstation cluster.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.workstations.v1beta.WorkstationCluster} request.workstationCluster
     *   Required. Workstation cluster to update.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask that specifies which fields in the workstation cluster
     *   should be updated.
     * @param {boolean} [request.validateOnly]
     *   Optional. If set, validate the request and preview the review, but do not
     *   actually apply it.
     * @param {boolean} [request.allowMissing]
     *   Optional. If set, and the workstation cluster is not found, a new
     *   workstation cluster will be created. In this situation, update_mask is
     *   ignored.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.update_workstation_cluster.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_UpdateWorkstationCluster_async
     */
    updateWorkstationCluster(request?: protos.google.cloud.workstations.v1beta.IUpdateWorkstationClusterRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.workstations.v1beta.IWorkstationCluster, protos.google.cloud.workstations.v1beta.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateWorkstationCluster(request: protos.google.cloud.workstations.v1beta.IUpdateWorkstationClusterRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstationCluster, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateWorkstationCluster(request: protos.google.cloud.workstations.v1beta.IUpdateWorkstationClusterRequest, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstationCluster, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateWorkstationCluster()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.update_workstation_cluster.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_UpdateWorkstationCluster_async
     */
    checkUpdateWorkstationClusterProgress(name: string): Promise<LROperation<protos.google.cloud.workstations.v1beta.WorkstationCluster, protos.google.cloud.workstations.v1beta.OperationMetadata>>;
    /**
     * Deletes the specified workstation cluster.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the workstation cluster to delete.
     * @param {boolean} [request.validateOnly]
     *   Optional. If set, validate the request and preview the review, but do not
     *   apply it.
     * @param {string} [request.etag]
     *   Optional. If set, the request will be rejected if the latest version of the
     *   workstation cluster on the server does not have this ETag.
     * @param {boolean} [request.force]
     *   Optional. If set, any workstation configurations and workstations in the
     *   workstation cluster are also deleted. Otherwise, the request only
     *   works if the workstation cluster has no configurations or workstations.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.delete_workstation_cluster.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_DeleteWorkstationCluster_async
     */
    deleteWorkstationCluster(request?: protos.google.cloud.workstations.v1beta.IDeleteWorkstationClusterRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.workstations.v1beta.IWorkstationCluster, protos.google.cloud.workstations.v1beta.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteWorkstationCluster(request: protos.google.cloud.workstations.v1beta.IDeleteWorkstationClusterRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstationCluster, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteWorkstationCluster(request: protos.google.cloud.workstations.v1beta.IDeleteWorkstationClusterRequest, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstationCluster, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteWorkstationCluster()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.delete_workstation_cluster.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_DeleteWorkstationCluster_async
     */
    checkDeleteWorkstationClusterProgress(name: string): Promise<LROperation<protos.google.cloud.workstations.v1beta.WorkstationCluster, protos.google.cloud.workstations.v1beta.OperationMetadata>>;
    /**
     * Creates a new workstation configuration.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {string} request.workstationConfigId
     *   Required. ID to use for the workstation configuration.
     * @param {google.cloud.workstations.v1beta.WorkstationConfig} request.workstationConfig
     *   Required. Config to create.
     * @param {boolean} [request.validateOnly]
     *   Optional. If set, validate the request and preview the review, but do not
     *   actually apply it.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.create_workstation_config.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_CreateWorkstationConfig_async
     */
    createWorkstationConfig(request?: protos.google.cloud.workstations.v1beta.ICreateWorkstationConfigRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.workstations.v1beta.IWorkstationConfig, protos.google.cloud.workstations.v1beta.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createWorkstationConfig(request: protos.google.cloud.workstations.v1beta.ICreateWorkstationConfigRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstationConfig, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createWorkstationConfig(request: protos.google.cloud.workstations.v1beta.ICreateWorkstationConfigRequest, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstationConfig, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createWorkstationConfig()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.create_workstation_config.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_CreateWorkstationConfig_async
     */
    checkCreateWorkstationConfigProgress(name: string): Promise<LROperation<protos.google.cloud.workstations.v1beta.WorkstationConfig, protos.google.cloud.workstations.v1beta.OperationMetadata>>;
    /**
     * Updates an existing workstation configuration.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.workstations.v1beta.WorkstationConfig} request.workstationConfig
     *   Required. Config to update.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask specifying which fields in the workstation configuration
     *   should be updated.
     * @param {boolean} [request.validateOnly]
     *   Optional. If set, validate the request and preview the review, but do not
     *   actually apply it.
     * @param {boolean} [request.allowMissing]
     *   Optional. If set and the workstation configuration is not found, a new
     *   workstation configuration will be created. In this situation,
     *   update_mask is ignored.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.update_workstation_config.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_UpdateWorkstationConfig_async
     */
    updateWorkstationConfig(request?: protos.google.cloud.workstations.v1beta.IUpdateWorkstationConfigRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.workstations.v1beta.IWorkstationConfig, protos.google.cloud.workstations.v1beta.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateWorkstationConfig(request: protos.google.cloud.workstations.v1beta.IUpdateWorkstationConfigRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstationConfig, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateWorkstationConfig(request: protos.google.cloud.workstations.v1beta.IUpdateWorkstationConfigRequest, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstationConfig, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateWorkstationConfig()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.update_workstation_config.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_UpdateWorkstationConfig_async
     */
    checkUpdateWorkstationConfigProgress(name: string): Promise<LROperation<protos.google.cloud.workstations.v1beta.WorkstationConfig, protos.google.cloud.workstations.v1beta.OperationMetadata>>;
    /**
     * Deletes the specified workstation configuration.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the workstation configuration to delete.
     * @param {boolean} [request.validateOnly]
     *   Optional. If set, validate the request and preview the review, but do not
     *   actually apply it.
     * @param {string} [request.etag]
     *   Optional. If set, the request is rejected if the latest version of the
     *   workstation configuration on the server does not have this ETag.
     * @param {boolean} [request.force]
     *   Optional. If set, any workstations in the workstation configuration are
     *   also deleted. Otherwise, the request works only if the workstation
     *   configuration has no workstations.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.delete_workstation_config.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_DeleteWorkstationConfig_async
     */
    deleteWorkstationConfig(request?: protos.google.cloud.workstations.v1beta.IDeleteWorkstationConfigRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.workstations.v1beta.IWorkstationConfig, protos.google.cloud.workstations.v1beta.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteWorkstationConfig(request: protos.google.cloud.workstations.v1beta.IDeleteWorkstationConfigRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstationConfig, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteWorkstationConfig(request: protos.google.cloud.workstations.v1beta.IDeleteWorkstationConfigRequest, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstationConfig, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteWorkstationConfig()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.delete_workstation_config.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_DeleteWorkstationConfig_async
     */
    checkDeleteWorkstationConfigProgress(name: string): Promise<LROperation<protos.google.cloud.workstations.v1beta.WorkstationConfig, protos.google.cloud.workstations.v1beta.OperationMetadata>>;
    /**
     * Creates a new workstation.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {string} request.workstationId
     *   Required. ID to use for the workstation.
     * @param {google.cloud.workstations.v1beta.Workstation} request.workstation
     *   Required. Workstation to create.
     * @param {boolean} [request.validateOnly]
     *   Optional. If set, validate the request and preview the review, but do not
     *   actually apply it.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.create_workstation.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_CreateWorkstation_async
     */
    createWorkstation(request?: protos.google.cloud.workstations.v1beta.ICreateWorkstationRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    createWorkstation(request: protos.google.cloud.workstations.v1beta.ICreateWorkstationRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createWorkstation(request: protos.google.cloud.workstations.v1beta.ICreateWorkstationRequest, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `createWorkstation()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.create_workstation.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_CreateWorkstation_async
     */
    checkCreateWorkstationProgress(name: string): Promise<LROperation<protos.google.cloud.workstations.v1beta.Workstation, protos.google.cloud.workstations.v1beta.OperationMetadata>>;
    /**
     * Updates an existing workstation.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.workstations.v1beta.Workstation} request.workstation
     *   Required. Workstation to update.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. Mask specifying which fields in the workstation configuration
     *   should be updated.
     * @param {boolean} [request.validateOnly]
     *   Optional. If set, validate the request and preview the review, but do not
     *   actually apply it.
     * @param {boolean} [request.allowMissing]
     *   Optional. If set and the workstation configuration is not found, a new
     *   workstation configuration is created. In this situation, update_mask
     *   is ignored.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.update_workstation.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_UpdateWorkstation_async
     */
    updateWorkstation(request?: protos.google.cloud.workstations.v1beta.IUpdateWorkstationRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    updateWorkstation(request: protos.google.cloud.workstations.v1beta.IUpdateWorkstationRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateWorkstation(request: protos.google.cloud.workstations.v1beta.IUpdateWorkstationRequest, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `updateWorkstation()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.update_workstation.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_UpdateWorkstation_async
     */
    checkUpdateWorkstationProgress(name: string): Promise<LROperation<protos.google.cloud.workstations.v1beta.Workstation, protos.google.cloud.workstations.v1beta.OperationMetadata>>;
    /**
     * Deletes the specified workstation.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the workstation to delete.
     * @param {boolean} [request.validateOnly]
     *   Optional. If set, validate the request and preview the review, but do not
     *   actually apply it.
     * @param {string} [request.etag]
     *   Optional. If set, the request will be rejected if the latest version of the
     *   workstation on the server does not have this ETag.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.delete_workstation.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_DeleteWorkstation_async
     */
    deleteWorkstation(request?: protos.google.cloud.workstations.v1beta.IDeleteWorkstationRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteWorkstation(request: protos.google.cloud.workstations.v1beta.IDeleteWorkstationRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteWorkstation(request: protos.google.cloud.workstations.v1beta.IDeleteWorkstationRequest, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteWorkstation()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.delete_workstation.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_DeleteWorkstation_async
     */
    checkDeleteWorkstationProgress(name: string): Promise<LROperation<protos.google.cloud.workstations.v1beta.Workstation, protos.google.cloud.workstations.v1beta.OperationMetadata>>;
    /**
     * Starts running a workstation so that users can connect to it.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the workstation to start.
     * @param {boolean} [request.validateOnly]
     *   Optional. If set, validate the request and preview the review, but do not
     *   actually apply it.
     * @param {string} [request.etag]
     *   Optional. If set, the request will be rejected if the latest version of the
     *   workstation on the server does not have this ETag.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.start_workstation.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_StartWorkstation_async
     */
    startWorkstation(request?: protos.google.cloud.workstations.v1beta.IStartWorkstationRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    startWorkstation(request: protos.google.cloud.workstations.v1beta.IStartWorkstationRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    startWorkstation(request: protos.google.cloud.workstations.v1beta.IStartWorkstationRequest, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `startWorkstation()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.start_workstation.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_StartWorkstation_async
     */
    checkStartWorkstationProgress(name: string): Promise<LROperation<protos.google.cloud.workstations.v1beta.Workstation, protos.google.cloud.workstations.v1beta.OperationMetadata>>;
    /**
     * Stops running a workstation, reducing costs.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. Name of the workstation to stop.
     * @param {boolean} [request.validateOnly]
     *   Optional. If set, validate the request and preview the review, but do not
     *   actually apply it.
     * @param {string} [request.etag]
     *   Optional. If set, the request will be rejected if the latest version of the
     *   workstation on the server does not have this ETag.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.stop_workstation.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_StopWorkstation_async
     */
    stopWorkstation(request?: protos.google.cloud.workstations.v1beta.IStopWorkstationRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    stopWorkstation(request: protos.google.cloud.workstations.v1beta.IStopWorkstationRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    stopWorkstation(request: protos.google.cloud.workstations.v1beta.IStopWorkstationRequest, callback: Callback<LROperation<protos.google.cloud.workstations.v1beta.IWorkstation, protos.google.cloud.workstations.v1beta.IOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `stopWorkstation()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.stop_workstation.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_StopWorkstation_async
     */
    checkStopWorkstationProgress(name: string): Promise<LROperation<protos.google.cloud.workstations.v1beta.Workstation, protos.google.cloud.workstations.v1beta.OperationMetadata>>;
    /**
     * Returns all workstation clusters in the specified location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.workstations.v1beta.WorkstationCluster|WorkstationCluster}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listWorkstationClustersAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listWorkstationClusters(request?: protos.google.cloud.workstations.v1beta.IListWorkstationClustersRequest, options?: CallOptions): Promise<[
        protos.google.cloud.workstations.v1beta.IWorkstationCluster[],
        protos.google.cloud.workstations.v1beta.IListWorkstationClustersRequest | null,
        protos.google.cloud.workstations.v1beta.IListWorkstationClustersResponse
    ]>;
    listWorkstationClusters(request: protos.google.cloud.workstations.v1beta.IListWorkstationClustersRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.workstations.v1beta.IListWorkstationClustersRequest, protos.google.cloud.workstations.v1beta.IListWorkstationClustersResponse | null | undefined, protos.google.cloud.workstations.v1beta.IWorkstationCluster>): void;
    listWorkstationClusters(request: protos.google.cloud.workstations.v1beta.IListWorkstationClustersRequest, callback: PaginationCallback<protos.google.cloud.workstations.v1beta.IListWorkstationClustersRequest, protos.google.cloud.workstations.v1beta.IListWorkstationClustersResponse | null | undefined, protos.google.cloud.workstations.v1beta.IWorkstationCluster>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.workstations.v1beta.WorkstationCluster|WorkstationCluster} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listWorkstationClustersAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listWorkstationClustersStream(request?: protos.google.cloud.workstations.v1beta.IListWorkstationClustersRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listWorkstationClusters`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.workstations.v1beta.WorkstationCluster|WorkstationCluster}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.list_workstation_clusters.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_ListWorkstationClusters_async
     */
    listWorkstationClustersAsync(request?: protos.google.cloud.workstations.v1beta.IListWorkstationClustersRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.workstations.v1beta.IWorkstationCluster>;
    /**
     * Returns all workstation configurations in the specified cluster.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.workstations.v1beta.WorkstationConfig|WorkstationConfig}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listWorkstationConfigsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listWorkstationConfigs(request?: protos.google.cloud.workstations.v1beta.IListWorkstationConfigsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.workstations.v1beta.IWorkstationConfig[],
        protos.google.cloud.workstations.v1beta.IListWorkstationConfigsRequest | null,
        protos.google.cloud.workstations.v1beta.IListWorkstationConfigsResponse
    ]>;
    listWorkstationConfigs(request: protos.google.cloud.workstations.v1beta.IListWorkstationConfigsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.workstations.v1beta.IListWorkstationConfigsRequest, protos.google.cloud.workstations.v1beta.IListWorkstationConfigsResponse | null | undefined, protos.google.cloud.workstations.v1beta.IWorkstationConfig>): void;
    listWorkstationConfigs(request: protos.google.cloud.workstations.v1beta.IListWorkstationConfigsRequest, callback: PaginationCallback<protos.google.cloud.workstations.v1beta.IListWorkstationConfigsRequest, protos.google.cloud.workstations.v1beta.IListWorkstationConfigsResponse | null | undefined, protos.google.cloud.workstations.v1beta.IWorkstationConfig>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.workstations.v1beta.WorkstationConfig|WorkstationConfig} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listWorkstationConfigsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listWorkstationConfigsStream(request?: protos.google.cloud.workstations.v1beta.IListWorkstationConfigsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listWorkstationConfigs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.workstations.v1beta.WorkstationConfig|WorkstationConfig}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.list_workstation_configs.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_ListWorkstationConfigs_async
     */
    listWorkstationConfigsAsync(request?: protos.google.cloud.workstations.v1beta.IListWorkstationConfigsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.workstations.v1beta.IWorkstationConfig>;
    /**
     * Returns all workstation configurations in the specified cluster on which
     * the caller has the "workstations.workstation.create" permission.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.workstations.v1beta.WorkstationConfig|WorkstationConfig}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listUsableWorkstationConfigsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listUsableWorkstationConfigs(request?: protos.google.cloud.workstations.v1beta.IListUsableWorkstationConfigsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.workstations.v1beta.IWorkstationConfig[],
        protos.google.cloud.workstations.v1beta.IListUsableWorkstationConfigsRequest | null,
        protos.google.cloud.workstations.v1beta.IListUsableWorkstationConfigsResponse
    ]>;
    listUsableWorkstationConfigs(request: protos.google.cloud.workstations.v1beta.IListUsableWorkstationConfigsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.workstations.v1beta.IListUsableWorkstationConfigsRequest, protos.google.cloud.workstations.v1beta.IListUsableWorkstationConfigsResponse | null | undefined, protos.google.cloud.workstations.v1beta.IWorkstationConfig>): void;
    listUsableWorkstationConfigs(request: protos.google.cloud.workstations.v1beta.IListUsableWorkstationConfigsRequest, callback: PaginationCallback<protos.google.cloud.workstations.v1beta.IListUsableWorkstationConfigsRequest, protos.google.cloud.workstations.v1beta.IListUsableWorkstationConfigsResponse | null | undefined, protos.google.cloud.workstations.v1beta.IWorkstationConfig>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.workstations.v1beta.WorkstationConfig|WorkstationConfig} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listUsableWorkstationConfigsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listUsableWorkstationConfigsStream(request?: protos.google.cloud.workstations.v1beta.IListUsableWorkstationConfigsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listUsableWorkstationConfigs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.workstations.v1beta.WorkstationConfig|WorkstationConfig}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.list_usable_workstation_configs.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_ListUsableWorkstationConfigs_async
     */
    listUsableWorkstationConfigsAsync(request?: protos.google.cloud.workstations.v1beta.IListUsableWorkstationConfigsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.workstations.v1beta.IWorkstationConfig>;
    /**
     * Returns all Workstations using the specified workstation configuration.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.workstations.v1beta.Workstation|Workstation}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listWorkstationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listWorkstations(request?: protos.google.cloud.workstations.v1beta.IListWorkstationsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.workstations.v1beta.IWorkstation[],
        protos.google.cloud.workstations.v1beta.IListWorkstationsRequest | null,
        protos.google.cloud.workstations.v1beta.IListWorkstationsResponse
    ]>;
    listWorkstations(request: protos.google.cloud.workstations.v1beta.IListWorkstationsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.workstations.v1beta.IListWorkstationsRequest, protos.google.cloud.workstations.v1beta.IListWorkstationsResponse | null | undefined, protos.google.cloud.workstations.v1beta.IWorkstation>): void;
    listWorkstations(request: protos.google.cloud.workstations.v1beta.IListWorkstationsRequest, callback: PaginationCallback<protos.google.cloud.workstations.v1beta.IListWorkstationsRequest, protos.google.cloud.workstations.v1beta.IListWorkstationsResponse | null | undefined, protos.google.cloud.workstations.v1beta.IWorkstation>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.workstations.v1beta.Workstation|Workstation} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listWorkstationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listWorkstationsStream(request?: protos.google.cloud.workstations.v1beta.IListWorkstationsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listWorkstations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.workstations.v1beta.Workstation|Workstation}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.list_workstations.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_ListWorkstations_async
     */
    listWorkstationsAsync(request?: protos.google.cloud.workstations.v1beta.IListWorkstationsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.workstations.v1beta.IWorkstation>;
    /**
     * Returns all workstations using the specified workstation configuration
     * on which the caller has the "workstations.workstations.use" permission.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of {@link protos.google.cloud.workstations.v1beta.Workstation|Workstation}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listUsableWorkstationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listUsableWorkstations(request?: protos.google.cloud.workstations.v1beta.IListUsableWorkstationsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.workstations.v1beta.IWorkstation[],
        protos.google.cloud.workstations.v1beta.IListUsableWorkstationsRequest | null,
        protos.google.cloud.workstations.v1beta.IListUsableWorkstationsResponse
    ]>;
    listUsableWorkstations(request: protos.google.cloud.workstations.v1beta.IListUsableWorkstationsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.workstations.v1beta.IListUsableWorkstationsRequest, protos.google.cloud.workstations.v1beta.IListUsableWorkstationsResponse | null | undefined, protos.google.cloud.workstations.v1beta.IWorkstation>): void;
    listUsableWorkstations(request: protos.google.cloud.workstations.v1beta.IListUsableWorkstationsRequest, callback: PaginationCallback<protos.google.cloud.workstations.v1beta.IListUsableWorkstationsRequest, protos.google.cloud.workstations.v1beta.IListUsableWorkstationsResponse | null | undefined, protos.google.cloud.workstations.v1beta.IWorkstation>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.cloud.workstations.v1beta.Workstation|Workstation} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listUsableWorkstationsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listUsableWorkstationsStream(request?: protos.google.cloud.workstations.v1beta.IListUsableWorkstationsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listUsableWorkstations`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Parent resource name.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of items to return.
     * @param {string} [request.pageToken]
     *   Optional. next_page_token value returned from a previous List request, if
     *   any.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.cloud.workstations.v1beta.Workstation|Workstation}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1beta/workstations.list_usable_workstations.js</caption>
     * region_tag:workstations_v1beta_generated_Workstations_ListUsableWorkstations_async
     */
    listUsableWorkstationsAsync(request?: protos.google.cloud.workstations.v1beta.IListUsableWorkstationsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.workstations.v1beta.IWorkstation>;
    /**
     * Gets the access control policy for a resource. Returns an empty policy
     * if the resource exists and does not have a policy set.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {Object} [request.options]
     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
     *   `GetIamPolicy`. This field is only used by Cloud IAM.
     *
     *   This object should have the same structure as {@link google.iam.v1.GetPolicyOptions | GetPolicyOptions}.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.Policy | Policy}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.Policy | Policy}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    getIamPolicy(request: IamProtos.google.iam.v1.GetIamPolicyRequest, options?: gax.CallOptions | Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined, {} | null | undefined>, callback?: Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.GetIamPolicyRequest | null | undefined, {} | null | undefined>): Promise<[IamProtos.google.iam.v1.Policy]>;
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    setIamPolicy(request: IamProtos.google.iam.v1.SetIamPolicyRequest, options?: gax.CallOptions | Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined, {} | null | undefined>, callback?: Callback<IamProtos.google.iam.v1.Policy, IamProtos.google.iam.v1.SetIamPolicyRequest | null | undefined, {} | null | undefined>): Promise<[IamProtos.google.iam.v1.Policy]>;
    /**
     * Returns permissions that a caller has on the specified resource. If the
     * resource does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * Note: This operation is designed to be used for building
     * permission-aware UIs and command-line tools, not for authorization
     * checking. This operation may "fail open" without warning.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see {@link https://cloud.google.com/iam/docs/overview#permissions | IAM Overview }.
     * @param {Object} [options]
     *   Optional parameters. You can override the default settings for this call, e.g, timeout,
     *   retries, paginations, etc. See {@link https://googleapis.github.io/gax-nodejs/interfaces/CallOptions.html | gax.CallOptions} for the details.
     * @param {function(?Error, ?Object)} [callback]
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.iam.v1.TestIamPermissionsResponse | TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     *
     */
    testIamPermissions(request: IamProtos.google.iam.v1.TestIamPermissionsRequest, options?: gax.CallOptions | Callback<IamProtos.google.iam.v1.TestIamPermissionsResponse, IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined, {} | null | undefined>, callback?: Callback<IamProtos.google.iam.v1.TestIamPermissionsResponse, IamProtos.google.iam.v1.TestIamPermissionsRequest | null | undefined, {} | null | undefined>): Promise<[IamProtos.google.iam.v1.TestIamPermissionsResponse]>;
    /**
     * Gets information about a location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Resource name for the location.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request: LocationProtos.google.cloud.location.IGetLocationRequest, options?: gax.CallOptions | Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>, callback?: Callback<LocationProtos.google.cloud.location.ILocation, LocationProtos.google.cloud.location.IGetLocationRequest | null | undefined, {} | null | undefined>): Promise<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param {string} request.filter
     *   The standard list filter.
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request: LocationProtos.google.cloud.location.IListLocationsRequest, options?: CallOptions): AsyncIterable<LocationProtos.google.cloud.location.ILocation>;
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request: protos.google.longrunning.GetOperationRequest, options?: gax.CallOptions | Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.longrunning.Operation, protos.google.longrunning.GetOperationRequest, {} | null | undefined>): Promise<[protos.google.longrunning.Operation]>;
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request: protos.google.longrunning.ListOperationsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.longrunning.ListOperationsResponse>;
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request: protos.google.longrunning.CancelOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.CancelOperationRequest, {} | undefined | null>, callback?: Callback<protos.google.longrunning.CancelOperationRequest, protos.google.protobuf.Empty, {} | undefined | null>): Promise<protos.google.protobuf.Empty>;
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request: protos.google.longrunning.DeleteOperationRequest, options?: gax.CallOptions | Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>, callback?: Callback<protos.google.protobuf.Empty, protos.google.longrunning.DeleteOperationRequest, {} | null | undefined>): Promise<protos.google.protobuf.Empty>;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified workstation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} workstation_cluster
     * @param {string} workstation_config
     * @param {string} workstation
     * @returns {string} Resource name string.
     */
    workstationPath(project: string, location: string, workstationCluster: string, workstationConfig: string, workstation: string): string;
    /**
     * Parse the project from Workstation resource.
     *
     * @param {string} workstationName
     *   A fully-qualified path representing Workstation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWorkstationName(workstationName: string): string | number;
    /**
     * Parse the location from Workstation resource.
     *
     * @param {string} workstationName
     *   A fully-qualified path representing Workstation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWorkstationName(workstationName: string): string | number;
    /**
     * Parse the workstation_cluster from Workstation resource.
     *
     * @param {string} workstationName
     *   A fully-qualified path representing Workstation resource.
     * @returns {string} A string representing the workstation_cluster.
     */
    matchWorkstationClusterFromWorkstationName(workstationName: string): string | number;
    /**
     * Parse the workstation_config from Workstation resource.
     *
     * @param {string} workstationName
     *   A fully-qualified path representing Workstation resource.
     * @returns {string} A string representing the workstation_config.
     */
    matchWorkstationConfigFromWorkstationName(workstationName: string): string | number;
    /**
     * Parse the workstation from Workstation resource.
     *
     * @param {string} workstationName
     *   A fully-qualified path representing Workstation resource.
     * @returns {string} A string representing the workstation.
     */
    matchWorkstationFromWorkstationName(workstationName: string): string | number;
    /**
     * Return a fully-qualified workstationCluster resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} workstation_cluster
     * @returns {string} Resource name string.
     */
    workstationClusterPath(project: string, location: string, workstationCluster: string): string;
    /**
     * Parse the project from WorkstationCluster resource.
     *
     * @param {string} workstationClusterName
     *   A fully-qualified path representing WorkstationCluster resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWorkstationClusterName(workstationClusterName: string): string | number;
    /**
     * Parse the location from WorkstationCluster resource.
     *
     * @param {string} workstationClusterName
     *   A fully-qualified path representing WorkstationCluster resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWorkstationClusterName(workstationClusterName: string): string | number;
    /**
     * Parse the workstation_cluster from WorkstationCluster resource.
     *
     * @param {string} workstationClusterName
     *   A fully-qualified path representing WorkstationCluster resource.
     * @returns {string} A string representing the workstation_cluster.
     */
    matchWorkstationClusterFromWorkstationClusterName(workstationClusterName: string): string | number;
    /**
     * Return a fully-qualified workstationConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} workstation_cluster
     * @param {string} workstation_config
     * @returns {string} Resource name string.
     */
    workstationConfigPath(project: string, location: string, workstationCluster: string, workstationConfig: string): string;
    /**
     * Parse the project from WorkstationConfig resource.
     *
     * @param {string} workstationConfigName
     *   A fully-qualified path representing WorkstationConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWorkstationConfigName(workstationConfigName: string): string | number;
    /**
     * Parse the location from WorkstationConfig resource.
     *
     * @param {string} workstationConfigName
     *   A fully-qualified path representing WorkstationConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWorkstationConfigName(workstationConfigName: string): string | number;
    /**
     * Parse the workstation_cluster from WorkstationConfig resource.
     *
     * @param {string} workstationConfigName
     *   A fully-qualified path representing WorkstationConfig resource.
     * @returns {string} A string representing the workstation_cluster.
     */
    matchWorkstationClusterFromWorkstationConfigName(workstationConfigName: string): string | number;
    /**
     * Parse the workstation_config from WorkstationConfig resource.
     *
     * @param {string} workstationConfigName
     *   A fully-qualified path representing WorkstationConfig resource.
     * @returns {string} A string representing the workstation_config.
     */
    matchWorkstationConfigFromWorkstationConfigName(workstationConfigName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}

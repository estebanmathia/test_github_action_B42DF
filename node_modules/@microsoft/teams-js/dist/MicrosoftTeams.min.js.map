{"version":3,"file":"MicrosoftTeams.min.js","mappings":"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","sources":["webpack://microsoftTeams/webpack/universalModuleDefinition","webpack://microsoftTeams/../../node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/browser.js","webpack://microsoftTeams/../../node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js","webpack://microsoftTeams/../../node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js","webpack://microsoftTeams/webpack/bootstrap","webpack://microsoftTeams/webpack/runtime/define property getters","webpack://microsoftTeams/webpack/runtime/hasOwnProperty shorthand","webpack://microsoftTeams/webpack/runtime/make namespace object","webpack://microsoftTeams/./src/internal/constants.ts","webpack://microsoftTeams/./src/internal/globalVars.ts","webpack://microsoftTeams/./src/internal/telemetry.ts","webpack://microsoftTeams/../../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/native.js","webpack://microsoftTeams/../../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/rng.js","webpack://microsoftTeams/../../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/stringify.js","webpack://microsoftTeams/../../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v4.js","webpack://microsoftTeams/./src/public/interfaces.ts","webpack://microsoftTeams/./src/public/constants.ts","webpack://microsoftTeams/./src/internal/utils.ts","webpack://microsoftTeams/./src/public/runtime.ts","webpack://microsoftTeams/./src/public/authentication.ts","webpack://microsoftTeams/./src/public/dialog.ts","webpack://microsoftTeams/./src/public/menus.ts","webpack://microsoftTeams/./src/public/teamsAPIs.ts","webpack://microsoftTeams/./src/public/app.ts","webpack://microsoftTeams/./src/public/pages.ts","webpack://microsoftTeams/./src/public/version.ts","webpack://microsoftTeams/./src/internal/internalAPIs.ts","webpack://microsoftTeams/./src/internal/handlers.ts","webpack://microsoftTeams/./src/internal/communication.ts","webpack://microsoftTeams/./src/private/logs.ts","webpack://microsoftTeams/./src/private/interfaces.ts","webpack://microsoftTeams/./src/private/conversations.ts","webpack://microsoftTeams/./src/private/privateAPIs.ts","webpack://microsoftTeams/./src/internal/deepLinkConstants.ts","webpack://microsoftTeams/./src/public/appInstallDialog.ts","webpack://microsoftTeams/./src/internal/deepLinkUtilities.ts","webpack://microsoftTeams/./src/public/media.ts","webpack://microsoftTeams/./src/public/barCode.ts","webpack://microsoftTeams/./src/public/chat.ts","webpack://microsoftTeams/./src/internal/mediaUtil.ts","webpack://microsoftTeams/./src/public/clipboard.ts","webpack://microsoftTeams/./src/public/geoLocation.ts","webpack://microsoftTeams/./src/public/adaptiveCards.ts","webpack://microsoftTeams/./src/public/appWindow.ts","webpack://microsoftTeams/./src/public/secondaryBrowser.ts","webpack://microsoftTeams/./src/public/location.ts","webpack://microsoftTeams/./src/public/meeting.ts","webpack://microsoftTeams/./src/public/monetization.ts","webpack://microsoftTeams/./src/public/calendar.ts","webpack://microsoftTeams/./src/public/mail.ts","webpack://microsoftTeams/./src/public/people.ts","webpack://microsoftTeams/./src/public/profile.ts","webpack://microsoftTeams/./src/internal/profileUtil.ts","webpack://microsoftTeams/./src/internal/videoFrameTick.ts","webpack://microsoftTeams/./src/internal/videoUtils.ts","webpack://microsoftTeams/./src/internal/videoPerformanceStatistics.ts","webpack://microsoftTeams/./src/internal/videoPerformanceMonitor.ts","webpack://microsoftTeams/./src/public/video.ts","webpack://microsoftTeams/./src/public/search.ts","webpack://microsoftTeams/./src/public/sharing.ts","webpack://microsoftTeams/./src/public/stageView.ts","webpack://microsoftTeams/./src/public/webStorage.ts","webpack://microsoftTeams/./src/public/call.ts","webpack://microsoftTeams/./src/public/appInitialization.ts","webpack://microsoftTeams/./src/public/settings.ts","webpack://microsoftTeams/./src/public/publicAPIs.ts","webpack://microsoftTeams/./src/public/navigation.ts","webpack://microsoftTeams/./src/public/tasks.ts","webpack://microsoftTeams/./src/public/liveShareHost.ts","webpack://microsoftTeams/../../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/regex.js","webpack://microsoftTeams/../../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/validate.js","webpack://microsoftTeams/./src/internal/marketplaceUtils.ts","webpack://microsoftTeams/./src/public/marketplace.ts","webpack://microsoftTeams/./src/private/files.ts","webpack://microsoftTeams/./src/private/meetingRoom.ts","webpack://microsoftTeams/./src/private/notifications.ts","webpack://microsoftTeams/./src/private/remoteCamera.ts","webpack://microsoftTeams/./src/private/appEntity.ts","webpack://microsoftTeams/./src/private/teams.ts","webpack://microsoftTeams/./src/private/videoEx.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"microsoftTeams\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"microsoftTeams\"] = factory();\n\telse\n\t\troot[\"microsoftTeams\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @hidden\n * The client version when all SDK APIs started to check platform compatibility for the APIs was 1.6.0.\n * Modified to 2.0.1 which is hightest till now so that if any client doesn't pass version in initialize function, it will be set to highest.\n * Mobile clients are passing versions, hence will be applicable to web and desktop clients only.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const defaultSDKVersionForCompatCheck = '2.0.1';\n\n/**\n * @hidden\n * This is the client version when selectMedia API - VideoAndImage is supported on mobile.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const videoAndImageMediaAPISupportVersion = '2.0.2';\n\n/**\n * @hidden\n * This is the client version when selectMedia API - Video with non-full screen mode is supported on mobile.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const nonFullScreenVideoModeAPISupportVersion = '2.0.3';\n\n/**\n * @hidden\n * This is the client version when selectMedia API - ImageOutputFormats is supported on mobile.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const imageOutputFormatsAPISupportVersion = '2.0.4';\n\n/**\n * @hidden\n * Minimum required client supported version for {@link getUserJoinedTeams} to be supported on {@link HostClientType.android}\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const getUserJoinedTeamsSupportedAndroidClientVersion = '2.0.1';\n\n/**\n * @hidden\n * This is the client version when location APIs (getLocation and showLocation) are supported.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const locationAPIsRequiredVersion = '1.9.0';\n\n/**\n * @hidden\n * This is the client version when permisisons are supported\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const permissionsAPIsRequiredVersion = '2.0.1';\n\n/**\n * @hidden\n * This is the client version when people picker API is supported on mobile.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const peoplePickerRequiredVersion = '2.0.0';\n\n/**\n * @hidden\n * This is the client version when captureImage API is supported on mobile.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const captureImageMobileSupportVersion = '1.7.0';\n\n/**\n * @hidden\n * This is the client version when media APIs are supported on all three platforms ios, android and web.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const mediaAPISupportVersion = '1.8.0';\n\n/**\n * @hidden\n * This is the client version when getMedia API is supported via Callbacks on all three platforms ios, android and web.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const getMediaCallbackSupportVersion = '2.0.0';\n\n/**\n * @hidden\n * This is the client version when scanBarCode API is supported on mobile.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const scanBarCodeAPIMobileSupportVersion = '1.9.0';\n\n/**\n * @hidden\n * List of supported Host origins\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const validOrigins = [\n  'teams.microsoft.com',\n  'teams.microsoft.us',\n  'gov.teams.microsoft.us',\n  'dod.teams.microsoft.us',\n  'int.teams.microsoft.com',\n  'teams.live.com',\n  'devspaces.skype.com',\n  'ssauth.skype.com',\n  'local.teams.live.com', // local development\n  'local.teams.live.com:8080', // local development\n  'local.teams.office.com', // local development\n  'local.teams.office.com:8080', // local development\n  'outlook.office.com',\n  'outlook-sdf.office.com',\n  'outlook.office365.com',\n  'outlook-sdf.office365.com',\n  'outlook.live.com',\n  'outlook-sdf.live.com',\n  '*.teams.microsoft.com',\n  '*.www.office.com',\n  'www.office.com',\n  'word.office.com',\n  'excel.office.com',\n  'powerpoint.office.com',\n  'www.officeppe.com',\n  '*.www.microsoft365.com',\n  'www.microsoft365.com',\n];\n\n/**\n * @hidden\n * USer specified message origins should satisfy this test\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const userOriginUrlValidationRegExp = /^https:\\/\\//;\n\n/**\n * @hidden\n * The protocol used for deep links into Teams\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const teamsDeepLinkProtocol = 'https';\n\n/**\n * @hidden\n * The host used for deep links into Teams\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const teamsDeepLinkHost = 'teams.microsoft.com';\n\n/** @hidden */\nexport const errorLibraryNotInitialized = 'The library has not yet been initialized';\n\n/** @hidden */\nexport const errorRuntimeNotInitialized = 'The runtime has not yet been initialized';\n\n/** @hidden */\nexport const errorRuntimeNotSupported = 'The runtime version is not supported';\n\n/** @hidden */\nexport const errorCallNotStarted = 'The call was not properly started';\n","import { FrameContexts } from '../public';\nexport class GlobalVars {\n  public static initializeCalled = false;\n  public static initializeCompleted = false;\n  public static additionalValidOrigins: string[] = [];\n  public static initializePromise: Promise<void>;\n  public static isFramelessWindow = false;\n  public static frameContext: FrameContexts;\n  public static hostClientType: string;\n  public static clientSupportedSDKVersion: string;\n  public static printCapabilityEnabled = false;\n}\n","import { debug as registerLogger, Debugger } from 'debug';\n\nconst topLevelLogger = registerLogger('teamsJs');\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n *\n * Returns a logger for a given namespace, within the pre-defined top-level teamsJs namespace\n */\nexport function getLogger(namespace: string): Debugger {\n  return topLevelLogger.extend(namespace);\n}\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","/* eslint-disable @typescript-eslint/no-explicit-any*/\n\nimport { ChannelType, DialogDimension, HostClientType, HostName, TeamType, UserTeamRole } from './constants';\nimport { FrameContexts } from './constants';\n\n/**\n * Represents information about tabs for an app\n */\nexport interface TabInformation {\n  /** Represents the tabs associated with a Microsoft Teams app */\n  teamTabs: TabInstance[];\n}\n\n/**\n * Represents information about a tab instance\n */\nexport interface TabInstance {\n  /**\n   * The name of the tab\n   */\n  tabName: string;\n\n  /**\n   * @internal\n   * Limited to Microsoft-internal use\n   * @protected\n   */\n  internalTabInstanceId?: string;\n\n  /**\n   * Last viewed time of this tab. null means unknown\n   */\n  lastViewUnixEpochTime?: string;\n\n  /**\n   * The developer-defined unique ID for the entity this content points to.\n   */\n  entityId?: string;\n\n  /**\n   * The Microsoft Teams ID for the channel with which the content is associated.\n   */\n  channelId?: string;\n\n  /**\n   * The name for the channel with which the content is associated.\n   */\n  channelName?: string;\n\n  /**\n   * Is this tab in a favorite channel?\n   */\n  channelIsFavorite?: boolean;\n\n  /**\n   * The Microsoft Teams ID for the team with which the content is associated.\n   */\n  teamId?: string;\n\n  /**\n   * The name for the team with which the content is associated.\n   */\n  teamName?: string;\n\n  /**\n   * Is this tab in a favorite team?\n   */\n  teamIsFavorite?: boolean;\n\n  /**\n   * The Office 365 group ID for the team with which the content is associated.\n   * This field is available only when the identity permission is requested in the manifest.\n   */\n  groupId?: string;\n\n  /**\n   * Content URL of this tab\n   */\n  url?: string;\n\n  /**\n   * Website URL of this tab\n   */\n  websiteUrl?: string;\n}\n\n/**\n * Indicates information about the tab instance for filtering purposes.\n */\nexport interface TabInstanceParameters {\n  /**\n   * Flag allowing to select favorite channels only\n   */\n  favoriteChannelsOnly?: boolean;\n\n  /**\n   * Flag allowing to select favorite teams only\n   */\n  favoriteTeamsOnly?: boolean;\n}\n\n/**\n * Represents Team Information\n */\nexport interface TeamInformation {\n  /**\n   * Id of the team\n   */\n  teamId: string;\n\n  /**\n   * Team display name\n   */\n  teamName: string;\n\n  /**\n   * Team description\n   */\n  teamDescription?: string;\n\n  /**\n   * Thumbnail Uri\n   */\n  thumbnailUri?: string;\n\n  /**\n   * The Office 365 group ID for the team with which the content is associated.\n   * This field is available only when the identity permission is requested in the manifest.\n   */\n  groupId?: string;\n\n  /**\n   * Role of current user in the team\n   */\n  userTeamRole?: UserTeamRole;\n\n  /**\n   * The type of the team.\n   */\n  teamType?: TeamType;\n\n  /**\n   * The locked status of the team\n   */\n  isTeamLocked?: boolean;\n\n  /**\n   * The archived status of the team\n   */\n  isTeamArchived?: boolean;\n}\n\n/**\n * Represents OS locale info used for formatting date and time data\n */\nexport interface LocaleInfo {\n  /** Represents the user's platform on which the app is running. */\n  platform: HostClientType.android | HostClientType.ios | HostClientType.macos | 'windows';\n  /**\n   * Represents the regional format used by the user's locale.\n   * @example `en-us`.\n   */\n  regionalFormat: string;\n  /**\n   * Displays date values, as specified by the short date format MM/DD/YYYY in user's regional settings.\n   * @example 4/21/2023 or 4-21-2023\n   */\n  shortDate: string;\n  /**\n   * Displays only date values, as specified by the Long Date format in user's regional settings.\n   * @example Friday, April 21, 2023\n   */\n  longDate: string;\n  /**\n   * A string representing the short time format used by the user's locale.\n   * @example 10:10\n   */\n  shortTime: string;\n  /**\n   * A string representing the long time format used by the user's locale.\n   * @example 10:10:42 AM\n   */\n  longTime: string;\n}\n\n/**\n * Allowed user file open preferences\n */\nexport enum FileOpenPreference {\n  /** Indicates that the user should be prompted to open the file in inline. */\n  Inline = 'inline',\n  /** Indicates that the user should be prompted to open the file in the native desktop application associated with the file type. */\n  Desktop = 'desktop',\n  /** Indicates that the user should be prompted to open the file in a web browser. */\n  Web = 'web',\n}\n\n/**\n * Possible Action Types\n *\n * @beta\n */\nexport enum ActionObjectType {\n  /** Represents content within a Microsoft 365 application. */\n  M365Content = 'm365content',\n}\n\n/**\n * Data pertaining to object(s) the action is being performed on\n *\n * @param T The type of action being implemented\n *\n * @beta\n */\nexport interface BaseActionObject<T extends ActionObjectType> {\n  /** Represents action type. */\n  type: T;\n}\n\n/**\n * Stores information needed to represent M365 Content stored\n * in OneDrive or Sharepoint\n *\n * @beta\n */\nexport interface M365ContentAction extends BaseActionObject<ActionObjectType.M365Content> {\n  /**\n   * Only office content IDs are passed to the app. Apps should use these ids\n   * to query the Microsoft graph for more details.\n   */\n  itemId: string;\n  /** Represents an optional secondary identifier for an action in a Microsoft 365 content item. */\n  secondaryId?: SecondaryId;\n}\n\n/**\n * Contains information on what Graph item is being queried\n *\n * @beta\n */\nexport interface SecondaryId {\n  /** Name of the secondary id that should be used. */\n  name: SecondaryM365ContentIdName;\n  /** The secondary id value that can be used to retrieve M365 content. */\n  value: string;\n}\n\n/**\n * These correspond with field names in the MSGraph.\n * See (commonly accessed resources)[https://learn.microsoft.com/en-us/graph/api/resources/onedrive?view=graph-rest-1.0#commonly-accessed-resources].\n * @beta\n */\nexport enum SecondaryM365ContentIdName {\n  /** OneDrive ID */\n  DriveId = 'driveId',\n  /** Teams Group ID */\n  GroupId = 'groupId',\n  /** SharePoint ID */\n  SiteId = 'siteId',\n  /** User ID */\n  UserId = 'userId',\n}\n\n/**\n * Information common to all actions\n *\n * @beta\n */\nexport interface ActionInfo {\n  /**\n   * Maps to the action id supplied inside the manifest\n   */\n  actionId: string;\n  /**\n   * Array of corresponding action objects\n   */\n  actionObjects: BaseActionObject<ActionObjectType>[];\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use the {@link app.Context} interface and its updated properties instead.\n *\n * @remarks\n * For more details about the updated {@link app.Context} interface, visit the\n * [Teams JavaScript client SDK](https://learn.microsoft.com/microsoftteams/platform/tabs/how-to/using-teams-client-sdk#updates-to-the-context-interface)\n * overview article.\n *\n * Represents the structure of the received context message.\n */\nexport interface Context {\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link ActionInfo | app.Context.actionInfo} instead\n   *\n   * Common information applicable to all content actions\n   */\n  actionInfo?: ActionInfo;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.TeamInfo.groupId | app.Context.team.groupId} instead\n   *\n   * The Office 365 group ID for the team with which the content is associated.\n   * This field is available only when the identity permission is requested in the manifest.\n   */\n  groupId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.TeamInfo.internalId | app.Context.team.internalId} instead\n   *\n   * The Microsoft Teams ID for the team with which the content is associated.\n   */\n  teamId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.TeamInfo.displayName | app.Context.team.displayName} instead\n   *\n   * The name for the team with which the content is associated.\n   */\n  teamName?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.ChannelInfo.id | app.Context.channel.id} instead\n   *\n   * The Microsoft Teams ID for the channel with which the content is associated.\n   */\n  channelId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.ChannelInfo.displayName | app.Context.channel.displayName} instead\n   *\n   * The name for the channel with which the content is associated.\n   */\n  channelName?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.ChannelInfo.membershipType | app.Context.channel.membershipType} instead\n   *\n   * The type of the channel with which the content is associated.\n   */\n  channelType?: ChannelType;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.PageInfo.id | app.Context.page.id} instead\n   *\n   * The developer-defined unique ID for the entity this content points to.\n   */\n  entityId: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.PageInfo.subPageId | app.Context.page.subPageId} instead\n   *\n   * The developer-defined unique ID for the sub-entity this content points to.\n   * This field should be used to restore to a specific state within an entity,\n   * such as scrolling to or activating a specific piece of content.\n   */\n  subEntityId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.AppInfo.locale | app.Context.app.locale} instead\n   *\n   * The current locale that the user has configured for the app formatted as\n   * languageId-countryId (for example, en-us).\n   */\n  locale: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.AppInfo.osLocaleInfo | app.Context.app.osLocaleInfo} instead\n   *\n   * More detailed locale info from the user's OS if available. Can be used together with\n   * the @microsoft/globe NPM package to ensure your app respects the user's OS date and\n   * time format configuration\n   */\n  osLocaleInfo?: LocaleInfo;\n\n  /**\n   * @deprecated\n   *\n   * As of 2.0.0, please use {@link app.UserInfo.loginHint | app.Context.user.loginHint} or\n   * {@link app.UserInfo.userPrincipalName | app.Context.user.userPrincipalName} instead.\n   * The UPN of the current user.\n   * Because a malicious party can run your content in a browser, this value should\n   * be used only as a hint as to who the user is and never as proof of identity.\n   * This field is available only when the identity permission is requested in the manifest.\n   */\n  upn?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.TenantInfo.id | app.Context.user.tenant.id} instead\n   *\n   * The Microsoft Entra tenant ID of the current user.\n   * Because a malicious party can run your content in a browser, this value should\n   * be used only as a hint as to who the user is and never as proof of identity.\n   * This field is available only when the identity permission is requested in the manifest.\n   */\n  tid?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.AppInfo.theme | app.Context.app.theme} instead\n   *\n   * The current UI theme.\n   */\n  theme?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.PageInfo.isFullScreen | app.Context.page.isFullScreen} instead\n   *\n   * Indication whether the tab is in full-screen mode.\n   */\n  isFullScreen?: boolean;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.TeamInfo.type | app.Context.team.type} instead\n   *\n   * The type of the team.\n   */\n  teamType?: TeamType;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.SharePointSiteInfo.teamSiteUrl | app.Context.sharePointSite.teamSiteUrl} instead\n   *\n   * The root SharePoint site associated with the team.\n   */\n  teamSiteUrl?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.SharePointSiteInfo.teamSiteDomain | app.Context.sharePointSite.teamSiteDomain} instead\n   *\n   * The domain of the root SharePoint site associated with the team.\n   */\n  teamSiteDomain?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.SharePointSiteInfo.teamSitePath | app.Context.sharePointSite.teamSitePath} instead\n   *\n   * The relative path to the SharePoint site associated with the team.\n   */\n  teamSitePath?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.ChannelInfo.ownerTenantId | app.Context.channel.ownerTenantId} instead\n   *\n   * The tenant ID of the host team.\n   */\n  hostTeamTenantId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.ChannelInfo.ownerGroupId | app.Context.channel.ownerGroupId} instead\n   *\n   * The Microsoft Entra group ID of the host team.\n   */\n  hostTeamGroupId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.ChannelInfo.relativeUrl | app.Context.channel.relativeUrl} instead\n   *\n   * The relative path to the SharePoint folder associated with the channel.\n   */\n  channelRelativeUrl?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.AppHostInfo.sessionId | app.Context.app.host.sessionId} instead\n   *\n   * Unique ID for the current Teams session for use in correlating telemetry data.\n   */\n  sessionId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.TeamInfo.userRole | app.Context.team.userRole} instead\n   *\n   * The user's role in the team.\n   * Because a malicious party can run your content in a browser, this value should\n   * be used only as a hint as to the user's role, and never as proof of her role.\n   */\n  userTeamRole?: UserTeamRole;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.ChatInfo.id | app.Context.chat.id} instead\n   *\n   * The Microsoft Teams ID for the chat with which the content is associated.\n   */\n  chatId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.UserInfo.loginHint | app.Context.user.loginHint} instead\n   *\n   * A value suitable for use as a login_hint when authenticating with Microsoft Entra ID.\n   * Because a malicious party can run your content in a browser, this value should\n   * be used only as a hint as to who the user is and never as proof of identity.\n   * This field is available only when the identity permission is requested in the manifest.\n   */\n  loginHint?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.UserInfo.userPrincipalName | app.Context.user.userPrincipalName} instead\n   *\n   * The UPN of the current user. This may be an externally-authenticated UPN (e.g., guest users).\n   * Because a malicious party run your content in a browser, this value should\n   * be used only as a hint as to who the user is and never as proof of identity.\n   * This field is available only when the identity permission is requested in the manifest.\n   */\n  userPrincipalName?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.UserInfo.id | app.Context.user.id} instead\n   *\n   * The Microsoft Entra object ID of the current user.\n   * Because a malicious party run your content in a browser, this value should\n   * be used only as a hint as to who the user is and never as proof of identity.\n   * This field is available only when the identity permission is requested in the manifest.\n   */\n  userObjectId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.TeamInfo.isArchived | app.Context.team.isArchived} instead\n   *\n   * Indicates whether team is archived.\n   * Apps should use this as a signal to prevent any changes to content associated with archived teams.\n   */\n  isTeamArchived?: boolean;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.AppHostInfo.name | app.Context.app.host.name} instead\n   *\n   * The name of the host client. Possible values are: Office, Orange, Outlook, Teams\n   */\n  hostName?: HostName;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.AppHostInfo.clientType | app.Context.app.host.clientType} instead\n   *\n   * The type of the host client. Possible values are : android, ios, web, desktop, rigel(deprecated, use teamsRoomsWindows instead),\n   * surfaceHub, teamsRoomsWindows, teamsRoomsAndroid, teamsPhones, teamsDisplays\n   */\n  hostClientType?: HostClientType;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.PageInfo.frameContext | app.Context.page.frameContext} instead\n   *\n   * The context where tab url is loaded (content, task, setting, remove, sidePanel)\n   */\n  frameContext?: FrameContexts;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.Context | app.Context.sharepoint} instead\n   *\n   * SharePoint context. This is only available when hosted in SharePoint.\n   */\n  sharepoint?: any;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.TenantInfo.teamsSku | app.Context.tenant.teamsSku} instead\n   *\n   * The type of license for the current users tenant.\n   */\n  tenantSKU?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.UserInfo.licenseType | app.Context.user.licenseType} instead\n   *\n   * The license type for the current user.\n   */\n  userLicenseType?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.AppInfo.parentMessageId | app.Context.app.parentMessageId} instead\n   *\n   * The ID of the parent message from which this task module was launched.\n   * This is only available in task modules launched from bot cards.\n   */\n  parentMessageId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.AppHostInfo.ringId | app.Context.app.host.ringId} instead\n   *\n   * Current ring ID\n   */\n  ringId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.AppInfo.sessionId | app.Context.app.sessionId} instead\n   *\n   * Unique ID for the current session for use in correlating telemetry data.\n   */\n  appSessionId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.AppInfo.appLaunchId | app.Context.app.appLaunchId} instead\n   *\n   * ID for the current visible app which is different for across cached sessions. Used for correlating telemetry data``\n   */\n  appLaunchId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.UserInfo.isCallingAllowed | app.Context.user.isCallingAllowed} instead\n   *\n   * Represents whether calling is allowed for the current logged in User\n   */\n  isCallingAllowed?: boolean;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.UserInfo.isPSTNCallingAllowed | app.Context.user.isPSTNCallingAllowed} instead\n   *\n   * Represents whether PSTN calling is allowed for the current logged in User\n   */\n  isPSTNCallingAllowed?: boolean;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.MeetingInfo.id | app.Context.meeting.id} instead\n   *\n   * Meeting Id used by tab when running in meeting context\n   */\n  meetingId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.ChannelInfo.defaultOneNoteSectionId | app.Context.channel.defaultOneNoteSectionId} instead\n   *\n   * The OneNote section ID that is linked to the channel.\n   */\n  defaultOneNoteSectionId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.PageInfo.isMultiWindow | app.Context.page.isMultiWindow} instead\n   *\n   * Indication whether the tab is in a pop out window\n   */\n  isMultiWindow?: boolean;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.AppInfo.iconPositionVertical | app.Context.app.iconPositionVertical} instead\n   *\n   * Personal app icon y coordinate position\n   */\n  appIconPosition?: number;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.PageInfo.sourceOrigin | app.Context.page.sourceOrigin} instead\n   *\n   * Source origin from where the tab is opened\n   */\n  sourceOrigin?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.AppInfo.userClickTime | app.Context.app.userClickTime} instead\n   *\n   * Time when the user clicked on the tab\n   */\n  userClickTime?: number;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.TeamInfo.templateId | app.Context.team.templateId} instead\n   *\n   * Team Template ID if there was a Team Template associated with the creation of the team.\n   */\n  teamTemplateId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.AppInfo.userFileOpenPreference | app.Context.app.userFileOpenPreference} instead\n   *\n   * Where the user prefers the file to be opened from by default during file open\n   */\n  userFileOpenPreference?: FileOpenPreference;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.UserInfo.displayName | app.Context.user.displayName} instead\n   *\n   * The address book name of the current user.\n   */\n  userDisplayName?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.SharePointSiteInfo.teamSiteId | app.Context.sharePointSite.teamSiteId} instead\n   *\n   * Teamsite ID, aka sharepoint site id.\n   */\n  teamSiteId?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.SharePointSiteInfo.mySiteDomain | app.Context.sharePointSite.mySiteDomain} instead\n   *\n   * The SharePoint my site domain associated with the user.\n   */\n  mySiteDomain?: string;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.SharePointSiteInfo.mySitePath | app.Context.sharePointSite.mySitePath} instead\n   *\n   * The SharePoint relative path to the current users mysite\n   */\n  mySitePath?: string;\n}\n\n/** Represents the parameters used to share a deep link. */\nexport interface ShareDeepLinkParameters {\n  /**\n   * The developer-defined unique ID for the sub-page to which this deep link points in the current page.\n   * This field should be used to restore to a specific state within a page, such as scrolling to or activating a specific piece of content.\n   */\n  subPageId: string;\n\n  /**\n   * The label for the sub-page that should be displayed when the deep link is rendered in a client.\n   */\n  subPageLabel: string;\n\n  /**\n   * The fallback URL to which to navigate the user if the client cannot render the page.\n   * This URL should lead directly to the sub-entity.\n   */\n  subPageWebUrl?: string;\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link ShareDeepLinkParameters} instead.\n */\nexport interface DeepLinkParameters {\n  /**\n   * The developer-defined unique ID for the sub-entity to which this deep link points in the current entity.\n   * This field should be used to restore to a specific state within an entity, such as scrolling to or activating a specific piece of content.\n   */\n  subEntityId: string;\n\n  /**\n   * The label for the sub-entity that should be displayed when the deep link is rendered in a client.\n   */\n  subEntityLabel: string;\n\n  /**\n   * The fallback URL to which to navigate the user if the client cannot render the page.\n   * This URL should lead directly to the sub-entity.\n   */\n  subEntityWebUrl?: string;\n}\n\n/**\n * @hidden\n * Shared Dialog Properties\n */\nexport interface BaseDialogInfo {\n  /**\n   * The requested size of the dialog\n   */\n  size: DialogSize;\n\n  /**\n   * Title of the dialog module.\n   */\n  title?: string;\n}\n\n/**\n * Data structure to describe dialog information needed to open an Adaptive Card-based dialog.\n */\nexport interface AdaptiveCardDialogInfo extends BaseDialogInfo {\n  /**\n   * JSON defining an Adaptive Card.\n   */\n  card: string;\n}\n\n/**\n * Data structure to describe dialog information needed to open a bot-based Adaptive Card-based dialog.\n */\nexport interface BotAdaptiveCardDialogInfo extends AdaptiveCardDialogInfo {\n  /**\n   * Specifies a bot ID to send the result of the user's interaction with the dialog module.\n   * The bot will receive a task/complete invoke event with a JSON object\n   * in the event payload.\n   */\n  completionBotId: string;\n}\n\n/**\n * Data structure to represent the size of a dialog\n */\nexport interface DialogSize {\n  /**\n   * The requested height of the webview/iframe.\n   */\n  height: DialogDimension | number;\n\n  /**\n   * The requested width of the webview/iframe.\n   */\n  width: DialogDimension | number;\n}\n\n/**\n * Data structure to describe dialog information needed to open a url-based dialog.\n */\nexport interface UrlDialogInfo extends BaseDialogInfo {\n  /**\n   * The url to be rendered in the webview/iframe.\n   *\n   * @remarks\n   * The domain of the url must match at least one of the\n   * valid domains specified in the [validDomains block](https://learn.microsoft.com/microsoftteams/platform/resources/schema/manifest-schema#validdomains) of the app manifest\n   */\n  url: string;\n\n  /**\n   * If client doesnt support the URL, the URL that needs to be opened in the browser.\n   */\n  fallbackUrl?: string;\n}\n\n/**\n * Data structure to describe dialog information needed to open a bot based dialog.\n */\nexport interface BotUrlDialogInfo extends UrlDialogInfo {\n  /**\n   * Specifies a bot ID to send the result of the user's interaction with the task module.\n   * The bot will receive a task/complete invoke event with a JSON object\n   * in the event payload.\n   */\n  completionBotId: string;\n}\n\n/**\n * Data structure to describe dialog information\n */\nexport interface DialogInfo {\n  /**\n   * The url to be rendered in the webview/iframe.\n   *\n   * @remarks\n   * The domain of the url must match at least one of the\n   * valid domains specified in the validDomains block of the manifest\n   */\n  url?: string;\n\n  /**\n   * JSON defining an adaptive card.\n   */\n  card?: string;\n\n  /**\n   * The requested height of the webview/iframe.\n   */\n  height?: DialogDimension | number;\n\n  /**\n   * The requested width of the webview/iframe.\n   */\n  width?: DialogDimension | number;\n\n  /**\n   * Title of the task module.\n   */\n  title?: string;\n\n  /**\n   * If client doesnt support the URL, the URL that needs to be opened in the browser.\n   */\n  fallbackUrl?: string;\n\n  /**\n   * Specifies a bot ID to send the result of the user's interaction with the task module.\n   * If specified, the bot will receive a task/complete invoke event with a JSON object\n   * in the event payload.\n   */\n  completionBotId?: string;\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link DialogInfo} instead.\n */\nexport type TaskInfo = DialogInfo;\n\n/**\n * @beta\n * Data structure to be used with the {@link teamsCore.registerOnLoadHandler teamsCore.registerOnLoadHandler(handler: (context: LoadContext) => void): void} to pass the context to the app.\n */\nexport interface LoadContext {\n  /**\n   * The entity that is requested to be loaded\n   */\n  entityId: string;\n\n  /**\n   * The content URL that is requested to be loaded\n   */\n  contentUrl: string;\n}\n\n/** Represents information about a frame within a tab or dialog module. */\nexport interface FrameInfo {\n  /**\n   * The current URL that needs to be used in the iframe if the tab is reloaded\n   */\n  contentUrl: string;\n\n  /**\n   * The current URL that needs to be used for opening the website when the user clicks on 'Go to website'\n   */\n  websiteUrl: string;\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link FrameInfo} instead.\n */\nexport type FrameContext = FrameInfo;\n\n/** Represents an error that occurs during the execution of an app or integration. */\nexport interface SdkError {\n  /**\n  error code\n  */\n  errorCode: ErrorCode;\n  /**\n  Optional description for the error. This may contain useful information for web-app developers.\n  This string will not be localized and is not for end-user consumption. \n  App should not depend on the string content. The exact value may change. This is only for debugging purposes.\n  */\n  message?: string;\n}\n\n/** Error codes used to identify different types of errors that can occur while developing apps. */\nexport enum ErrorCode {\n  /**\n   * API not supported in the current platform.\n   */\n  NOT_SUPPORTED_ON_PLATFORM = 100,\n  /**\n   * Internal error encountered while performing the required operation.\n   */\n  INTERNAL_ERROR = 500,\n  /**\n   * API is not supported in the current context\n   */\n  NOT_SUPPORTED_IN_CURRENT_CONTEXT = 501,\n  /**\n  Permissions denied by user\n  */\n  PERMISSION_DENIED = 1000,\n  /**\n   * Network issue\n   */\n  NETWORK_ERROR = 2000,\n  /**\n   * Underlying hardware doesn't support the capability\n   */\n  NO_HW_SUPPORT = 3000,\n  /**\n   * One or more arguments are invalid\n   */\n  INVALID_ARGUMENTS = 4000,\n  /**\n   * User is not authorized for this operation\n   */\n  UNAUTHORIZED_USER_OPERATION = 5000,\n  /**\n   * Could not complete the operation due to insufficient resources\n   */\n  INSUFFICIENT_RESOURCES = 6000,\n  /**\n   * Platform throttled the request because of API was invoked too frequently\n   */\n  THROTTLE = 7000,\n  /**\n   * User aborted the operation\n   */\n  USER_ABORT = 8000,\n  /**\n   * Could not complete the operation in the given time interval\n   */\n  OPERATION_TIMED_OUT = 8001,\n  /**\n   * Platform code is old and doesn't implement this API\n   */\n  OLD_PLATFORM = 9000,\n  /**\n   * The file specified was not found on the given location\n   */\n  FILE_NOT_FOUND = 404,\n  /**\n   * The return value is too big and has exceeded our size boundries\n   */\n  SIZE_EXCEEDED = 10000,\n}\n\n/** @hidden */\nexport enum DevicePermission {\n  GeoLocation = 'geolocation',\n  Media = 'media',\n}\n\n/** @hidden */\nexport interface HostVersionsInfo {\n  adaptiveCardSchemaVersion?: AdaptiveCardVersion;\n}\n\n/**\n * Represents the major and minor versions of the Adaptive Card schema in the current host\n */\nexport interface AdaptiveCardVersion {\n  /** Represents the major version number. */\n  majorVersion: number;\n  /** Represents the minor version number. */\n  minorVersion: number;\n}\n\n/**\n * Currently supported Mime type\n */\nexport enum ClipboardSupportedMimeType {\n  TextPlain = 'text/plain',\n  TextHtml = 'text/html',\n  ImagePNG = 'image/png',\n  ImageJPEG = 'image/jpeg',\n}\n\n/**\n * Clipboard write parameters\n */\nexport interface ClipboardParams {\n  /** Mime Type of data to be copied to Clipboard */\n  mimeType: ClipboardSupportedMimeType;\n  /** Blob content in Base64 string format */\n  content: string;\n}\n","/** HostClientType represents the different client platforms on which host can be run. */\nexport enum HostClientType {\n  /** Represents the desktop client of host, which is installed on a user's computer and runs as a standalone application. */\n  desktop = 'desktop',\n  /** Represents the web-based client of host, which runs in a web browser. */\n  web = 'web',\n  /** Represents the Android mobile client of host, which runs on Android devices such as smartphones and tablets. */\n  android = 'android',\n  /** Represents the iOS mobile client of host, which runs on iOS devices such as iPhones. */\n  ios = 'ios',\n  /** Represents the iPadOS client of host, which runs on iOS devices such as iPads. */\n  ipados = 'ipados',\n  /** The host is running on a macOS client, which runs on devices such as MacBooks. */\n  macos = 'macos',\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link teamsRoomsWindows} instead.\n   */\n  rigel = 'rigel',\n  /** Represents the client of host, which runs on surface hub devices. */\n  surfaceHub = 'surfaceHub',\n  /** Represents the client of host, which runs on Teams Rooms on Windows devices. More information on Microsoft Teams Rooms on Windows can be found [Microsoft Teams Rooms (Windows)](https://support.microsoft.com/office/microsoft-teams-rooms-windows-help-e667f40e-5aab-40c1-bd68-611fe0002ba2)*/\n  teamsRoomsWindows = 'teamsRoomsWindows',\n  /** Represents the client of host, which runs on Teams Rooms on Android devices. More information on Microsoft Teams Rooms on Android can be found [Microsoft Teams Rooms (Android)].(https://support.microsoft.com/office/get-started-with-teams-rooms-on-android-68517298-d513-46be-8d6d-d41db5e6b4b2)*/\n  teamsRoomsAndroid = 'teamsRoomsAndroid',\n  /** Represents the client of host, which runs on Teams phones. More information can be found [Microsoft Teams Phones](https://support.microsoft.com/office/get-started-with-teams-phones-694ca17d-3ecf-40ca-b45e-d21b2c442412) */\n  teamsPhones = 'teamsPhones',\n  /** Represents the client of host, which runs on Teams displays devices. More information can be found [Microsoft Teams Displays](https://support.microsoft.com/office/get-started-with-teams-displays-ff299825-7f13-4528-96c2-1d3437e6d4e6) */\n  teamsDisplays = 'teamsDisplays',\n}\n\n/** HostName indicates the possible hosts for your application. */\nexport enum HostName {\n  /**\n   * Office.com and Office Windows App\n   */\n  office = 'Office',\n\n  /**\n   * For \"desktop\" specifically, this refers to the new, pre-release version of Outlook for Windows.\n   * Also used on other platforms that map to a single Outlook client.\n   */\n  outlook = 'Outlook',\n\n  /**\n   * Outlook for Windows: the classic, native, desktop client\n   */\n  outlookWin32 = 'OutlookWin32',\n\n  /**\n   * Microsoft-internal test Host\n   */\n  orange = 'Orange',\n\n  /**\n   * Teams\n   */\n  teams = 'Teams',\n\n  /**\n   * Modern Teams\n   */\n  teamsModern = 'TeamsModern',\n}\n\n/**\n * FrameContexts provides information about the context in which the app is running within the host.\n * Developers can use FrameContexts to determine how their app should behave in different contexts,\n * and can use the information provided by the context to adapt the app to the user's needs.\n *\n * @example\n * If your app is running in the \"settings\" context, you should be displaying your apps configuration page.\n * If the app is running in the content context, the developer may want to display information relevant to\n * the content the user is currently viewing.\n */\nexport enum FrameContexts {\n  /**\n   * App's frame context from where settings page can be accessed.\n   * See [how to create a configuration page.]( https://learn.microsoft.com/microsoftteams/platform/tabs/how-to/create-tab-pages/configuration-page?tabs=teamsjs-v2)\n   */\n  settings = 'settings',\n  /** The default context for the app where all the content of the app is displayed. */\n  content = 'content',\n  /** Frame context used when app is running in the authentication window launched by calling {@link authentication.authenticate} */\n  authentication = 'authentication',\n  /** The page shown when the user uninstalls the app. */\n  remove = 'remove',\n  /** A task module is a pop-up window that can be used to display a form, a dialog, or other interactive content within the host. */\n  task = 'task',\n  /** The side panel is a persistent panel that is displayed on the right side of the host and can be used to display content or UI that is relevant to the current page or tab. */\n  sidePanel = 'sidePanel',\n  /** The stage is a large area that is displayed at the center of the host and can be used to display content or UI that requires a lot of space, such as a video player or a document editor. */\n  stage = 'stage',\n  /** App's frame context from where meetingStage can be accessed in a meeting session, which is the primary area where video and presentation content is displayed during a meeting. */\n  meetingStage = 'meetingStage',\n}\n\n/**\n * Indicates the team type, currently used to distinguish between different team\n * types in Office 365 for Education (team types 1, 2, 3, and 4).\n */\nexport enum TeamType {\n  /** Represents a standard or classic team in host that is designed for ongoing collaboration and communication among a group of people. */\n  Standard = 0,\n  /**  Represents an educational team in host that is designed for classroom collaboration and communication among students and teachers. */\n  Edu = 1,\n  /** Represents a class team in host that is designed for classroom collaboration and communication among students and teachers in a structured environment. */\n  Class = 2,\n  /** Represents a professional learning community (PLC) team in host that is designed for educators to collaborate and share resources and best practices. */\n  Plc = 3,\n  /** Represents a staff team in host that is designed for staff collaboration and communication among staff members.*/\n  Staff = 4,\n}\n\n/**\n * Indicates the various types of roles of a user in a team.\n */\nexport enum UserTeamRole {\n  /** Represents that the user is an owner or administrator of the team. */\n  Admin = 0,\n  /** Represents that the user is a standard member of the team. */\n  User = 1,\n  /** Represents that the user does not have any role in the team. */\n  Guest = 2,\n}\n\n/**\n * Dialog module dimension enum\n */\nexport enum DialogDimension {\n  /** Represents a large-sized dialog box, which is typically used for displaying large amounts of content or complex workflows that require more space. */\n  Large = 'large',\n  /** Represents a medium-sized dialog box, which is typically used for displaying moderate amounts of content or workflows that require less space. */\n  Medium = 'medium',\n  /** Represents a small-sized dialog box, which is typically used for displaying simple messages or workflows that require minimal space.*/\n  Small = 'small',\n}\n\nimport { AdaptiveCardVersion, ErrorCode, SdkError } from './interfaces';\n/**\n * @deprecated\n * As of 2.0.0, please use {@link DialogDimension} instead.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport import TaskModuleDimension = DialogDimension;\nimport { HostVersionsInfo } from './interfaces';\n\n/**\n * The type of the channel with which the content is associated.\n */\nexport enum ChannelType {\n  /** The default channel type. Type of channel is used for general collaboration and communication within a team. */\n  Regular = 'Regular',\n  /** Type of channel is used for sensitive or confidential communication within a team and is only accessible to members of the channel. */\n  Private = 'Private',\n  /** Type of channel is used for collaboration between multiple teams or groups and is accessible to members of all the teams or groups. */\n  Shared = 'Shared',\n}\n\n/** An error object indicating that the requested operation or feature is not supported on the current platform or device.\n * @typedef {Object} SdkError\n */\nexport const errorNotSupportedOnPlatform: SdkError = { errorCode: ErrorCode.NOT_SUPPORTED_ON_PLATFORM };\n\n/**\n * @hidden\n *\n * Minimum Adaptive Card version supported by the host.\n */\nexport const minAdaptiveCardVersion: AdaptiveCardVersion = { majorVersion: 1, minorVersion: 5 };\n\n/**\n * @hidden\n *\n * Adaptive Card version supported by the Teams v1 client.\n */\nexport const teamsMinAdaptiveCardVersion: HostVersionsInfo = {\n  adaptiveCardSchemaVersion: { majorVersion: 1, minorVersion: 5 },\n};\n","/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as uuid from 'uuid';\n\nimport { GlobalVars } from '../internal/globalVars';\nimport { minAdaptiveCardVersion } from '../public/constants';\nimport { AdaptiveCardVersion, SdkError } from '../public/interfaces';\nimport { pages } from '../public/pages';\nimport { validOrigins } from './constants';\nimport { getLogger } from './telemetry';\n\n/**\n * @param pattern - reference pattern\n * @param host - candidate string\n * @returns returns true if host matches pre-know valid pattern\n *\n * @example\n *    validateHostAgainstPattern('*.teams.microsoft.com', 'subdomain.teams.microsoft.com') returns true\n *    validateHostAgainstPattern('teams.microsoft.com', 'team.microsoft.com') returns false\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction validateHostAgainstPattern(pattern: string, host: string): boolean {\n  if (pattern.substring(0, 2) === '*.') {\n    const suffix = pattern.substring(1);\n    if (\n      host.length > suffix.length &&\n      host.split('.').length === suffix.split('.').length &&\n      host.substring(host.length - suffix.length) === suffix\n    ) {\n      return true;\n    }\n  } else if (pattern === host) {\n    return true;\n  }\n  return false;\n}\n\nconst validateOriginLogger = getLogger('validateOrigin');\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function validateOrigin(messageOrigin: URL): boolean {\n  // Check whether the url is in the pre-known allowlist or supplied by user\n  if (!isValidHttpsURL(messageOrigin)) {\n    validateOriginLogger(\n      'Origin %s is invalid because it is not using https protocol. Protocol being used: %s',\n      messageOrigin,\n      messageOrigin.protocol,\n    );\n    return false;\n  }\n  const messageOriginHost = messageOrigin.host;\n\n  if (validOrigins.some((pattern) => validateHostAgainstPattern(pattern, messageOriginHost))) {\n    return true;\n  }\n\n  for (const domainOrPattern of GlobalVars.additionalValidOrigins) {\n    const pattern = domainOrPattern.substring(0, 8) === 'https://' ? domainOrPattern.substring(8) : domainOrPattern;\n    if (validateHostAgainstPattern(pattern, messageOriginHost)) {\n      return true;\n    }\n  }\n\n  validateOriginLogger(\n    'Origin %s is invalid because it is not an origin approved by this library or included in the call to app.initialize.\\nOrigins approved by this library: %o\\nOrigins included in app.initialize: %o',\n    messageOrigin,\n    validOrigins,\n    GlobalVars.additionalValidOrigins,\n  );\n  return false;\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function getGenericOnCompleteHandler(errorMessage?: string): (success: boolean, reason?: string) => void {\n  return (success: boolean, reason: string): void => {\n    if (!success) {\n      throw new Error(errorMessage ? errorMessage : reason);\n    }\n  };\n}\n\n/**\n * @hidden\n * Compares SDK versions.\n *\n * @param v1 - first version\n * @param v2 - second version\n * @returns NaN in case inputs are not in right format\n *         -1 if v1 < v2\n *          1 if v1 > v2\n *          0 otherwise\n * @example\n *    compareSDKVersions('1.2', '1.2.0') returns 0\n *    compareSDKVersions('1.2a', '1.2b') returns NaN\n *    compareSDKVersions('1.2', '1.3') returns -1\n *    compareSDKVersions('2.0', '1.3.2') returns 1\n *    compareSDKVersions('2.0', 2.0) returns NaN\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function compareSDKVersions(v1: string, v2: string): number {\n  if (typeof v1 !== 'string' || typeof v2 !== 'string') {\n    return NaN;\n  }\n\n  const v1parts = v1.split('.');\n  const v2parts = v2.split('.');\n\n  function isValidPart(x: string): boolean {\n    // input has to have one or more digits\n    // For ex - returns true for '11', false for '1a1', false for 'a', false for '2b'\n    return /^\\d+$/.test(x);\n  }\n\n  if (!v1parts.every(isValidPart) || !v2parts.every(isValidPart)) {\n    return NaN;\n  }\n\n  // Make length of both parts equal\n  while (v1parts.length < v2parts.length) {\n    v1parts.push('0');\n  }\n  while (v2parts.length < v1parts.length) {\n    v2parts.push('0');\n  }\n\n  for (let i = 0; i < v1parts.length; ++i) {\n    if (Number(v1parts[i]) == Number(v2parts[i])) {\n      continue;\n    } else if (Number(v1parts[i]) > Number(v2parts[i])) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * @hidden\n * Generates a GUID\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function generateGUID(): string {\n  return uuid.v4();\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function deepFreeze<T extends object>(obj: T): T {\n  Object.keys(obj).forEach((prop) => {\n    if (typeof obj[prop] === 'object') {\n      deepFreeze(obj[prop]);\n    }\n  });\n  return Object.freeze(obj);\n}\n\n/**\n * @hidden\n * The following type definitions will be used in the\n * utility functions below, which help in transforming the\n * promises to support callbacks for backward compatibility\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport type ErrorResultCallback<T> = (err?: SdkError, result?: T) => void;\nexport type ErrorResultNullCallback<T> = (err: SdkError | null, result: T | null) => void;\nexport type ErrorBooleanResultCallback = (err?: SdkError, result?: boolean) => void;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type InputFunction<T> = (...args: any[]) => Promise<T>;\nexport type ResultCallback<T> = (result?: T) => void;\nexport type SdkErrorCallback = ResultCallback<SdkError | null>;\n\n/**\n * This utility function is used when the result of the promise is same as the result in the callback.\n * @param funcHelper\n * @param callback\n * @param args\n * @returns\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function callCallbackWithErrorOrResultFromPromiseAndReturnPromise<T>(\n  funcHelper: InputFunction<T>,\n  callback?: ErrorResultCallback<T>,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ...args: any[]\n): Promise<T> {\n  const p = funcHelper(...args);\n  p.then((result: T) => {\n    if (callback) {\n      callback(undefined, result);\n    }\n  }).catch((e: SdkError) => {\n    if (callback) {\n      callback(e);\n    }\n  });\n  return p;\n}\n\n/**\n * This utility function is used when the return type of the promise is usually void and\n * the result in the callback is a boolean type (true for success and false for error)\n * @param funcHelper\n * @param callback\n * @param args\n * @returns\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function callCallbackWithErrorOrBooleanFromPromiseAndReturnPromise<T>(\n  funcHelper: InputFunction<T>,\n  callback?: ErrorBooleanResultCallback,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ...args: any[]\n): Promise<T> {\n  const p = funcHelper(...args);\n  p.then(() => {\n    if (callback) {\n      callback(undefined, true);\n    }\n  }).catch((e: SdkError) => {\n    if (callback) {\n      callback(e, false);\n    }\n  });\n  return p;\n}\n\n/**\n * This utility function is called when the callback has only Error/SdkError as the primary argument.\n * @param funcHelper\n * @param callback\n * @param args\n * @returns\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function callCallbackWithSdkErrorFromPromiseAndReturnPromise<T>(\n  funcHelper: InputFunction<T>,\n  callback?: SdkErrorCallback,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ...args: any[]\n): Promise<T> {\n  const p = funcHelper(...args);\n  p.then(() => {\n    if (callback) {\n      callback(null);\n    }\n  }).catch((e: SdkError) => {\n    if (callback) {\n      callback(e);\n    }\n  });\n  return p;\n}\n\n/**\n * This utility function is used when the result of the promise is same as the result in the callback.\n * @param funcHelper\n * @param callback\n * @param args\n * @returns\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function callCallbackWithErrorOrResultOrNullFromPromiseAndReturnPromise<T>(\n  funcHelper: InputFunction<T>,\n  callback?: ErrorResultNullCallback<T>,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ...args: any[]\n): Promise<T> {\n  const p = funcHelper(...args);\n  p.then((result: T) => {\n    if (callback) {\n      callback(null, result);\n    }\n  }).catch((e: SdkError) => {\n    if (callback) {\n      callback(e, null);\n    }\n  });\n  return p;\n}\n\n/**\n * A helper function to add a timeout to an asynchronous operation.\n *\n * @param action Action to wrap the timeout around\n * @param timeoutInMs Timeout period in milliseconds\n * @param timeoutError Error to reject the promise with if timeout elapses before the action completed\n * @returns A promise which resolves to the result of provided action or rejects with a provided timeout error\n * if the initial action didn't complete within provided timeout.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function runWithTimeout<TResult, TError>(\n  action: () => Promise<TResult>,\n  timeoutInMs: number,\n  timeoutError: TError,\n): Promise<TResult> {\n  return new Promise((resolve, reject) => {\n    const timeoutHandle = setTimeout(reject, timeoutInMs, timeoutError);\n    action()\n      .then((result) => {\n        clearTimeout(timeoutHandle);\n        resolve(result);\n      })\n      .catch((error) => {\n        clearTimeout(timeoutHandle);\n        reject(error);\n      });\n  });\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function createTeamsAppLink(params: pages.NavigateToAppParams): string {\n  const url = new URL(\n    'https://teams.microsoft.com/l/entity/' +\n      encodeURIComponent(params.appId) +\n      '/' +\n      encodeURIComponent(params.pageId),\n  );\n\n  if (params.webUrl) {\n    url.searchParams.append('webUrl', params.webUrl);\n  }\n  if (params.channelId || params.subPageId) {\n    url.searchParams.append('context', JSON.stringify({ channelId: params.channelId, subEntityId: params.subPageId }));\n  }\n  return url.toString();\n}\n\n/**\n * @hidden\n * Checks if the Adaptive Card schema version is supported by the host.\n * @param hostAdaptiveCardSchemaVersion Host's supported Adaptive Card version in the runtime.\n *\n * @returns true if the Adaptive Card Version is not supported and false if it is supported.\n */\nexport function isHostAdaptiveCardSchemaVersionUnsupported(\n  hostAdaptiveCardSchemaVersion: AdaptiveCardVersion,\n): boolean {\n  const versionCheck = compareSDKVersions(\n    `${hostAdaptiveCardSchemaVersion.majorVersion}.${hostAdaptiveCardSchemaVersion.minorVersion}`,\n    `${minAdaptiveCardVersion.majorVersion}.${minAdaptiveCardVersion.minorVersion}`,\n  );\n  if (versionCheck >= 0) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\n/**\n * @hidden\n * Checks if a URL is a HTTPS protocol based URL.\n * @param url URL to be validated.\n *\n * @returns true if the URL is an https URL.\n */\nexport function isValidHttpsURL(url: URL): boolean {\n  return url.protocol === 'https:';\n}\n\n/**\n * Convert base64 string to blob\n * @param base64Data string respresenting the content\n * @param contentType Mimetype\n * @returns Promise\n */\nexport function base64ToBlob(mimeType: string, base64String: string): Promise<Blob> {\n  return new Promise<Blob>((resolve, reject) => {\n    if (!mimeType) {\n      reject('MimeType cannot be null or empty.');\n    }\n    if (!base64String) {\n      reject('Base64 string cannot be null or empty.');\n    }\n    const byteCharacters = atob(base64String);\n    /**\n     * For images we need to convert binary data to image to achieve that:\n     *   1. A new Uint8Array is created with a length equal to the length of byteCharacters.\n     *      The byteCharacters is a string representing the base64 data decoded using atob.\n     *   2. Then loop iterates over each character in the byteCharacters string and assigns the\n     *      corresponding character code to the corresponding index in the byteArray. The purpose\n     *      of this loop is to convert the base64 string to a binary representation, as the Blob\n     *      constructor expects binary data.\n     */\n    if (mimeType.startsWith('image/')) {\n      const byteArray = new Uint8Array(byteCharacters.length);\n      for (let i = 0; i < byteCharacters.length; i++) {\n        byteArray[i] = byteCharacters.charCodeAt(i);\n      }\n      resolve(new Blob([byteArray], { type: mimeType }));\n    }\n    resolve(new Blob([byteCharacters], { type: mimeType }));\n  });\n}\n\n/**\n * Converts blob to base64 string.\n * @param blob Blob to convert to base64 string.\n */\nexport function getBase64StringFromBlob(blob: Blob): Promise<string> {\n  return new Promise<string>((resolve, reject) => {\n    if (blob.size === 0) {\n      reject(new Error('Blob cannot be empty.'));\n    }\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      if (reader.result) {\n        resolve(reader.result.toString().split(',')[1]);\n      } else {\n        reject(new Error('Failed to read the blob'));\n      }\n    };\n    reader.onerror = () => {\n      reject(reader.error);\n    };\n    reader.readAsDataURL(blob);\n  });\n}\n\n/**\n *  Returns an SSR safe reference to the window object\n * @returns Window object reference\n */\n\nexport function ssrSafeWindow(): Window {\n  if (!inServerSideRenderingEnvironment()) {\n    return window;\n  } else {\n    // This should NEVER actually be written.\n    // If you EVER see this error in ANY log file, something has gone horribly wrong and a bug needs to be filed.\n    throw new Error('window object undefined at SSR check');\n  }\n}\n\n/**\n * Checks if running in a Server Side Environment\n * @returns True if running in a Server Side Environment\n */\nexport function inServerSideRenderingEnvironment(): boolean {\n  return typeof window === 'undefined';\n}\n","/* eslint-disable @typescript-eslint/ban-types */\n\nimport { errorRuntimeNotInitialized, errorRuntimeNotSupported } from '../internal/constants';\nimport { GlobalVars } from '../internal/globalVars';\nimport { getLogger } from '../internal/telemetry';\nimport { compareSDKVersions, deepFreeze } from '../internal/utils';\nimport { HostClientType, teamsMinAdaptiveCardVersion } from './constants';\nimport { HostVersionsInfo } from './interfaces';\n\nconst runtimeLogger = getLogger('runtime');\n\nexport interface IBaseRuntime {\n  readonly apiVersion: number;\n  readonly hostVersionsInfo?: HostVersionsInfo;\n  readonly isLegacyTeams?: boolean;\n  readonly supports?: {};\n}\n\n/**\n * Latest runtime interface version\n */\nexport type Runtime = IRuntimeV3;\n\nexport const latestRuntimeApiVersion = 3;\n\nfunction isLatestRuntimeVersion(runtime: IBaseRuntime): runtime is Runtime {\n  return runtime.apiVersion === latestRuntimeApiVersion;\n}\n\ninterface IRuntimeV1 extends IBaseRuntime {\n  readonly apiVersion: 1;\n  readonly isLegacyTeams?: boolean;\n  readonly supports: {\n    readonly appEntity?: {};\n    readonly appInstallDialog?: {};\n    readonly barCode?: {};\n    readonly calendar?: {};\n    readonly call?: {};\n    readonly chat?: {};\n    readonly conversations?: {};\n    readonly dialog?: {\n      readonly bot?: {};\n      readonly update?: {};\n    };\n    readonly geoLocation?: {\n      readonly map?: {};\n    };\n    readonly location?: {};\n    readonly logs?: {};\n    readonly mail?: {};\n    readonly meetingRoom?: {};\n    readonly menus?: {};\n    readonly monetization?: {};\n    readonly notifications?: {};\n    readonly pages?: {\n      readonly appButton?: {};\n      readonly backStack?: {};\n      readonly config?: {};\n      readonly currentApp?: {};\n      readonly fullTrust?: {};\n      readonly tabs?: {};\n    };\n    readonly people?: {};\n    readonly permissions?: {};\n    readonly profile?: {};\n    readonly remoteCamera?: {};\n    readonly search?: {};\n    readonly sharing?: {};\n    readonly stageView?: {};\n    readonly teams?: {\n      readonly fullTrust?: {\n        readonly joinedTeams?: {};\n      };\n    };\n    readonly teamsCore?: {};\n    readonly video?: {\n      readonly mediaStream?: {};\n      readonly sharedFrame?: {};\n    };\n    readonly webStorage?: {};\n  };\n}\n\ninterface IRuntimeV2 extends IBaseRuntime {\n  readonly apiVersion: 2;\n  readonly hostVersionsInfo?: HostVersionsInfo;\n  readonly isLegacyTeams?: boolean;\n  readonly supports: {\n    readonly appEntity?: {};\n    readonly appInstallDialog?: {};\n    readonly appNotification?: {};\n    readonly barCode?: {};\n    readonly calendar?: {};\n    readonly call?: {};\n    readonly chat?: {};\n    readonly conversations?: {};\n    readonly dialog?: {\n      readonly card?: {\n        readonly bot?: {};\n      };\n      readonly url?: {\n        readonly bot?: {};\n      };\n      readonly update?: {};\n    };\n    readonly geoLocation?: {\n      readonly map?: {};\n    };\n    readonly interactive?: {};\n    readonly secondaryBrowser?: {};\n    readonly location?: {};\n    readonly logs?: {};\n    readonly mail?: {};\n    readonly marketplace?: {};\n    readonly meetingRoom?: {};\n    readonly menus?: {};\n    readonly monetization?: {};\n    readonly notifications?: {};\n    readonly pages?: {\n      readonly appButton?: {};\n      readonly backStack?: {};\n      readonly config?: {};\n      readonly currentApp?: {};\n      readonly fullTrust?: {};\n      readonly tabs?: {};\n    };\n    readonly people?: {};\n    readonly permissions?: {};\n    readonly profile?: {};\n    readonly remoteCamera?: {};\n    readonly search?: {};\n    readonly sharing?: {};\n    readonly stageView?: {};\n    readonly teams?: {\n      readonly fullTrust?: {\n        readonly joinedTeams?: {};\n      };\n    };\n    readonly teamsCore?: {};\n    readonly video?: {\n      readonly mediaStream?: {};\n      readonly sharedFrame?: {};\n    };\n    readonly webStorage?: {};\n  };\n}\n\ninterface IRuntimeV3 extends IBaseRuntime {\n  readonly apiVersion: 3;\n  readonly hostVersionsInfo?: HostVersionsInfo;\n  readonly isLegacyTeams?: boolean;\n  readonly supports: {\n    readonly appEntity?: {};\n    readonly appInstallDialog?: {};\n    readonly barCode?: {};\n    readonly calendar?: {};\n    readonly call?: {};\n    readonly chat?: {};\n    readonly clipboard?: {};\n    readonly conversations?: {};\n    readonly dialog?: {\n      readonly card?: {\n        readonly bot?: {};\n      };\n      readonly url?: {\n        readonly bot?: {};\n      };\n      readonly update?: {};\n    };\n    readonly geoLocation?: {\n      readonly map?: {};\n    };\n    readonly interactive?: {};\n    readonly secondaryBrowser?: {};\n    readonly location?: {};\n    readonly logs?: {};\n    readonly mail?: {};\n    readonly marketplace?: {};\n    readonly meetingRoom?: {};\n    readonly menus?: {};\n    readonly monetization?: {};\n    readonly notifications?: {};\n    readonly pages?: {\n      readonly appButton?: {};\n      readonly backStack?: {};\n      readonly config?: {};\n      readonly currentApp?: {};\n      readonly fullTrust?: {};\n      readonly tabs?: {};\n    };\n    readonly people?: {};\n    readonly permissions?: {};\n    readonly profile?: {};\n    readonly remoteCamera?: {};\n    readonly search?: {};\n    readonly sharing?: {};\n    readonly stageView?: {};\n    readonly teams?: {\n      readonly fullTrust?: {\n        readonly joinedTeams?: {};\n      };\n    };\n    readonly teamsCore?: {};\n    readonly video?: {\n      readonly mediaStream?: {};\n      readonly sharedFrame?: {};\n    };\n    readonly webStorage?: {};\n  };\n}\n\n// Constant used to set the runtime configuration\nconst _uninitializedRuntime: UninitializedRuntime = {\n  apiVersion: -1,\n  supports: {},\n};\n\ninterface UninitializedRuntime extends IBaseRuntime {\n  readonly apiVersion: -1;\n  readonly supports: {};\n}\n\n/**\n * @hidden\n * Ensures that the runtime has been initialized\n\n * @returns True if the runtime has been initialized\n * @throws Error if the runtime has not been initialized\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function isRuntimeInitialized(runtime: IBaseRuntime): runtime is Runtime {\n  if (isLatestRuntimeVersion(runtime)) {\n    return true;\n  } else if (runtime.apiVersion === -1) {\n    throw new Error(errorRuntimeNotInitialized);\n  } else {\n    throw new Error(errorRuntimeNotSupported);\n  }\n}\n\nexport let runtime: Runtime | UninitializedRuntime = _uninitializedRuntime;\n\nexport const teamsRuntimeConfig: Runtime = {\n  apiVersion: 3,\n  hostVersionsInfo: teamsMinAdaptiveCardVersion,\n  isLegacyTeams: true,\n  supports: {\n    appInstallDialog: {},\n    appEntity: {},\n    call: {},\n    chat: {},\n    conversations: {},\n    dialog: {\n      card: {\n        bot: {},\n      },\n      url: {\n        bot: {},\n      },\n      update: {},\n    },\n    interactive: {},\n    logs: {},\n    meetingRoom: {},\n    menus: {},\n    monetization: {},\n    notifications: {},\n    pages: {\n      appButton: {},\n      tabs: {},\n      config: {},\n      backStack: {},\n      fullTrust: {},\n    },\n    remoteCamera: {},\n    stageView: {},\n    teams: {\n      fullTrust: {},\n    },\n    teamsCore: {},\n    video: {\n      sharedFrame: {},\n    },\n  },\n};\n\ninterface ICapabilityReqs {\n  readonly capability: object;\n  readonly hostClientTypes: Array<string>;\n}\n\nexport const v1HostClientTypes = [\n  HostClientType.desktop,\n  HostClientType.web,\n  HostClientType.android,\n  HostClientType.ios,\n  HostClientType.rigel,\n  HostClientType.surfaceHub,\n  HostClientType.teamsRoomsWindows,\n  HostClientType.teamsRoomsAndroid,\n  HostClientType.teamsPhones,\n  HostClientType.teamsDisplays,\n];\n\n/**\n * @hidden\n * `upgradeToNextVersion` transforms runtime of version `versionToUpgradeFrom` to the next higher version\n *\n * @internal\n * Limited to Microsoft-internal use\n */\ninterface IRuntimeUpgrade {\n  versionToUpgradeFrom: number;\n  upgradeToNextVersion: (previousVersionRuntime: IBaseRuntime) => IBaseRuntime;\n}\n\n/**\n * @hidden\n * Uses upgradeChain to transform an outdated runtime object to the latest format.\n * @param outdatedRuntime - The runtime object to be upgraded\n * @returns The upgraded runtime object\n * @throws Error if the runtime object could not be upgraded to the latest version\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function fastForwardRuntime(outdatedRuntime: IBaseRuntime): Runtime {\n  let runtime = outdatedRuntime;\n  if (runtime.apiVersion < latestRuntimeApiVersion) {\n    upgradeChain.forEach((upgrade) => {\n      if (runtime.apiVersion === upgrade.versionToUpgradeFrom) {\n        runtime = upgrade.upgradeToNextVersion(runtime);\n      }\n    });\n  }\n  if (isLatestRuntimeVersion(runtime)) {\n    return runtime;\n  } else {\n    throw new Error('Received a runtime that could not be upgraded to the latest version');\n  }\n}\n\n/**\n * @hidden\n * List of transformations required to upgrade a runtime object from a previous version to the next higher version.\n * This list must be ordered from lowest version to highest version\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const upgradeChain: IRuntimeUpgrade[] = [\n  {\n    versionToUpgradeFrom: 1,\n    upgradeToNextVersion: (previousVersionRuntime: IRuntimeV1): IRuntimeV2 => {\n      return {\n        apiVersion: 2,\n        hostVersionsInfo: undefined,\n        isLegacyTeams: previousVersionRuntime.isLegacyTeams,\n        supports: {\n          ...previousVersionRuntime.supports,\n          dialog: previousVersionRuntime.supports.dialog\n            ? {\n                card: undefined,\n                url: previousVersionRuntime.supports.dialog,\n                update: previousVersionRuntime.supports.dialog?.update,\n              }\n            : undefined,\n        },\n      };\n    },\n  },\n  {\n    versionToUpgradeFrom: 2,\n    upgradeToNextVersion: (previousVersionRuntime: IRuntimeV2): IRuntimeV3 => {\n      /* eslint-disable-next-line @typescript-eslint/no-unused-vars */ /* Intentionally assigned to unused variable to delete propery when destructuring */\n      const { appNotification: _, ...newSupports } = previousVersionRuntime.supports;\n      return {\n        ...previousVersionRuntime,\n        apiVersion: 3,\n        supports: newSupports,\n      };\n    },\n  },\n];\n\nexport const versionConstants: Record<string, Array<ICapabilityReqs>> = {\n  '1.9.0': [\n    {\n      capability: { location: {} },\n      hostClientTypes: v1HostClientTypes,\n    },\n  ],\n  '2.0.0': [\n    {\n      capability: { people: {} },\n      hostClientTypes: v1HostClientTypes,\n    },\n    {\n      capability: { sharing: {} },\n      hostClientTypes: [HostClientType.desktop, HostClientType.web],\n    },\n  ],\n  '2.0.1': [\n    {\n      capability: { teams: { fullTrust: { joinedTeams: {} } } },\n      hostClientTypes: [\n        HostClientType.android,\n        HostClientType.desktop,\n        HostClientType.ios,\n        HostClientType.teamsRoomsAndroid,\n        HostClientType.teamsPhones,\n        HostClientType.teamsDisplays,\n        HostClientType.web,\n      ],\n    },\n    {\n      capability: { webStorage: {} },\n      hostClientTypes: [HostClientType.desktop],\n    },\n  ],\n  '2.0.5': [\n    {\n      capability: { webStorage: {} },\n      hostClientTypes: [HostClientType.android, HostClientType.desktop, HostClientType.ios],\n    },\n  ],\n};\n\nconst generateBackCompatRuntimeConfigLogger = runtimeLogger.extend('generateBackCompatRuntimeConfig');\n/**\n * @internal\n * Limited to Microsoft-internal use\n *\n * Generates and returns a runtime configuration for host clients which are not on the latest host SDK version\n * and do not provide their own runtime config. Their supported capabilities are based on the highest\n * client SDK version that they can support.\n *\n * @param highestSupportedVersion - The highest client SDK version that the host client can support.\n * @returns runtime which describes the APIs supported by the legacy host client.\n */\nexport function generateBackCompatRuntimeConfig(highestSupportedVersion: string): Runtime {\n  generateBackCompatRuntimeConfigLogger('generating back compat runtime config for %s', highestSupportedVersion);\n\n  let newSupports = { ...teamsRuntimeConfig.supports };\n\n  generateBackCompatRuntimeConfigLogger(\n    'Supported capabilities in config before updating based on highestSupportedVersion: %o',\n    newSupports,\n  );\n\n  Object.keys(versionConstants).forEach((versionNumber) => {\n    if (compareSDKVersions(highestSupportedVersion, versionNumber) >= 0) {\n      versionConstants[versionNumber].forEach((capabilityReqs) => {\n        if (capabilityReqs.hostClientTypes.includes(GlobalVars.hostClientType)) {\n          newSupports = {\n            ...newSupports,\n            ...capabilityReqs.capability,\n          };\n        }\n      });\n    }\n  });\n\n  const backCompatRuntimeConfig: Runtime = {\n    apiVersion: latestRuntimeApiVersion,\n    hostVersionsInfo: teamsMinAdaptiveCardVersion,\n    isLegacyTeams: true,\n    supports: newSupports,\n  };\n\n  generateBackCompatRuntimeConfigLogger(\n    'Runtime config after updating based on highestSupportedVersion: %o',\n    backCompatRuntimeConfig,\n  );\n\n  return backCompatRuntimeConfig;\n}\n\nconst applyRuntimeConfigLogger = runtimeLogger.extend('applyRuntimeConfig');\nexport function applyRuntimeConfig(runtimeConfig: IBaseRuntime): void {\n  // Some hosts that have not adopted runtime versioning send a string for apiVersion, so we should handle those as v1 inputs\n  if (typeof runtimeConfig.apiVersion === 'string') {\n    applyRuntimeConfigLogger('Trying to apply runtime with string apiVersion, processing as v1: %o', runtimeConfig);\n    runtimeConfig = {\n      ...runtimeConfig,\n      apiVersion: 1,\n    };\n  }\n  applyRuntimeConfigLogger('Fast-forwarding runtime %o', runtimeConfig);\n  const ffRuntimeConfig = fastForwardRuntime(runtimeConfig);\n  applyRuntimeConfigLogger('Applying runtime %o', ffRuntimeConfig);\n  runtime = deepFreeze(ffRuntimeConfig);\n}\n\nexport function setUnitializedRuntime(): void {\n  runtime = deepFreeze(_uninitializedRuntime);\n}\n\n/**\n * @hidden\n * Constant used to set minimum runtime configuration\n * while un-initializing an app in unit test case.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const _minRuntimeConfigToUninitialize: Runtime = {\n  apiVersion: latestRuntimeApiVersion,\n  supports: {\n    pages: {\n      appButton: {},\n      tabs: {},\n      config: {},\n      backStack: {},\n      fullTrust: {},\n    },\n    teamsCore: {},\n    logs: {},\n  },\n};\n","import {\n  Communication,\n  sendMessageEventToChild,\n  sendMessageToParent,\n  sendMessageToParentAsync,\n  waitForMessageQueue,\n} from '../internal/communication';\nimport { GlobalVars } from '../internal/globalVars';\nimport { registerHandler, removeHandler } from '../internal/handlers';\nimport { ensureInitializeCalled, ensureInitialized } from '../internal/internalAPIs';\nimport { ssrSafeWindow } from '../internal/utils';\nimport { FrameContexts, HostClientType } from './constants';\nimport { runtime } from './runtime';\n\n/**\n * Namespace to interact with the authentication-specific part of the SDK.\n *\n * This object is used for starting or completing authentication flows.\n */\nexport namespace authentication {\n  let authHandlers: { success: (string) => void; fail: (string) => void } | undefined;\n  let authWindowMonitor: number | undefined;\n\n  /**\n   * @hidden\n   * @internal\n   * Limited to Microsoft-internal use; automatically called when library is initialized\n   */\n  export function initialize(): void {\n    registerHandler('authentication.authenticate.success', handleSuccess, false);\n    registerHandler('authentication.authenticate.failure', handleFailure, false);\n  }\n\n  let authParams: AuthenticateParameters | undefined;\n  /**\n   * @deprecated\n   * As of 2.0.0, this function has been deprecated in favor of a Promise-based pattern using {@link authentication.authenticate authentication.authenticate(authenticateParameters: AuthenticatePopUpParameters): Promise\\<string\\>}\n   *\n   * Registers handlers to be called with the result of an authentication flow triggered using {@link authentication.authenticate authentication.authenticate(authenticateParameters?: AuthenticateParameters): void}\n   *\n   * @param authenticateParameters - Configuration for authentication flow pop-up result communication\n   */\n  export function registerAuthenticationHandlers(authenticateParameters: AuthenticateParameters): void {\n    authParams = authenticateParameters;\n  }\n\n  /**\n   * Initiates an authentication flow which requires a new window.\n   * There are two primary uses for this function:\n   * 1. When your app needs to authenticate using a 3rd-party identity provider (not Microsoft Entra ID)\n   * 2. When your app needs to show authentication UI that is blocked from being shown in an iframe (e.g., Microsoft Entra consent prompts)\n   *\n   * For more details, see [Enable authentication using third-party OAuth provider](https://learn.microsoft.com/microsoftteams/platform/tabs/how-to/authentication/auth-flow-tab)\n   *\n   * This function is *not* needed for \"standard\" Microsoft Entra SSO usage. Using {@link getAuthToken} is usually sufficient in that case. For more, see\n   * [Enable SSO for tab apps](https://learn.microsoft.com/microsoftteams/platform/tabs/how-to/authentication/tab-sso-overview))\n   *\n   * @remarks\n   * The authentication flow must start and end from the same domain, otherwise success and failure messages won't be returned to the window that initiated the call.\n   * The [Teams authentication flow](https://learn.microsoft.com/microsoftteams/platform/tabs/how-to/authentication/auth-flow-tab) starts and ends at an endpoint on\n   * your own service (with a redirect round-trip to the 3rd party identity provider in the middle).\n   *\n   * @param authenticateParameters - Parameters describing the authentication window used for executing the authentication flow\n   *\n   * @returns `Promise` that will be fulfilled with the result from the authentication pop-up, if successful. The string in this result is provided in the parameter\n   * passed by your app when it calls {@link notifySuccess} in the pop-up window after returning from the identity provider redirect.\n   *\n   * @throws `Error` if the authentication request fails or is canceled by the user. This error is provided in the parameter passed by your app when it calls\n   * {@link notifyFailure} in the pop-up window after returning from the identity provider redirect. However, in some cases it can also be provided by\n   * the infrastructure depending on the failure (e.g., a user cancelation)\n   *\n   */\n  export function authenticate(authenticateParameters: AuthenticatePopUpParameters): Promise<string>;\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link authentication.authenticate authentication.authenticate(authenticateParameters: AuthenticatePopUpParameters): Promise\\<string\\>} instead.\n   *\n   * The documentation for {@link authentication.authenticate authentication.authenticate(authenticateParameters: AuthenticatePopUpParameters): Promise\\<string\\>} applies\n   * to this function.\n   * The one difference is that instead of the result being returned via the `Promise`, the result is returned to the callback functions provided in the\n   * `authenticateParameters` parameter.\n   *\n   * @param authenticateParameters - Parameters describing the authentication window used for executing the authentication flow and callbacks used for indicating the result\n   *\n   */\n  export function authenticate(authenticateParameters?: AuthenticateParameters): void;\n  export function authenticate(authenticateParameters?: AuthenticateParameters): Promise<string> {\n    const isDifferentParamsInCall: boolean = authenticateParameters !== undefined;\n    const authenticateParams: AuthenticateParameters | undefined = isDifferentParamsInCall\n      ? authenticateParameters\n      : authParams;\n    if (!authenticateParams) {\n      throw new Error('No parameters are provided for authentication');\n    }\n    ensureInitialized(\n      runtime,\n      FrameContexts.content,\n      FrameContexts.sidePanel,\n      FrameContexts.settings,\n      FrameContexts.remove,\n      FrameContexts.task,\n      FrameContexts.stage,\n      FrameContexts.meetingStage,\n    );\n    return authenticateHelper(authenticateParams)\n      .then((value: string) => {\n        try {\n          if (authenticateParams && authenticateParams.successCallback) {\n            authenticateParams.successCallback(value);\n            return '';\n          }\n          return value;\n        } finally {\n          if (!isDifferentParamsInCall) {\n            authParams = null;\n          }\n        }\n      })\n      .catch((err: Error) => {\n        try {\n          if (authenticateParams && authenticateParams.failureCallback) {\n            authenticateParams.failureCallback(err.message);\n            return '';\n          }\n          throw err;\n        } finally {\n          if (!isDifferentParamsInCall) {\n            authParams = null;\n          }\n        }\n      });\n  }\n\n  function authenticateHelper(authenticateParameters: AuthenticateParameters): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n      if (\n        GlobalVars.hostClientType === HostClientType.desktop ||\n        GlobalVars.hostClientType === HostClientType.android ||\n        GlobalVars.hostClientType === HostClientType.ios ||\n        GlobalVars.hostClientType === HostClientType.ipados ||\n        GlobalVars.hostClientType === HostClientType.macos ||\n        GlobalVars.hostClientType === HostClientType.rigel ||\n        GlobalVars.hostClientType === HostClientType.teamsRoomsWindows ||\n        GlobalVars.hostClientType === HostClientType.teamsRoomsAndroid ||\n        GlobalVars.hostClientType === HostClientType.teamsPhones ||\n        GlobalVars.hostClientType === HostClientType.teamsDisplays ||\n        GlobalVars.hostClientType === HostClientType.surfaceHub\n      ) {\n        // Convert any relative URLs into absolute URLs before sending them over to the parent window.\n        const link = document.createElement('a');\n        link.href = authenticateParameters.url;\n        // Ask the parent window to open an authentication window with the parameters provided by the caller.\n        resolve(\n          sendMessageToParentAsync<[boolean, string]>('authentication.authenticate', [\n            link.href,\n            authenticateParameters.width,\n            authenticateParameters.height,\n            authenticateParameters.isExternal,\n          ]).then(([success, response]: [boolean, string]) => {\n            if (success) {\n              return response;\n            } else {\n              throw new Error(response);\n            }\n          }),\n        );\n      } else {\n        // Open an authentication window with the parameters provided by the caller.\n        authHandlers = {\n          success: resolve,\n          fail: reject,\n        };\n        openAuthenticationWindow(authenticateParameters);\n      }\n    });\n  }\n\n  /**\n   * Requests an Microsoft Entra token to be issued on behalf of your app in an SSO flow.\n   * The token is acquired from the cache if it is not expired. Otherwise a request is sent to Microsoft Entra to\n   * obtain a new token.\n   * This function is used to enable SSO scenarios. See [Enable SSO for tab apps](https://learn.microsoft.com/microsoftteams/platform/tabs/how-to/authentication/tab-sso-overview)\n   * for more details.\n   *\n   * @param authTokenRequest - An optional set of values that configure the token request.\n   *\n   * @returns `Promise` that will be resolved with the token, if successful.\n   *\n   * @throws `Error` if the request fails in some way\n   */\n  export function getAuthToken(authTokenRequest?: AuthTokenRequestParameters): Promise<string>;\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link authentication.getAuthToken authentication.getAuthToken(authTokenRequest: AuthTokenRequestParameters): Promise\\<string\\>} instead.\n   *\n   * The documentation {@link authentication.getAuthToken authentication.getAuthToken(authTokenRequest: AuthTokenRequestParameters): Promise\\<string\\>} applies to this\n   * function as well. The one difference when using this function is that the result is provided in the callbacks in the `authTokenRequest` parameter\n   * instead of as a `Promise`.\n   *\n   * @param authTokenRequest - An optional set of values that configure the token request.\n   * It contains callbacks to call in case of success/failure\n   */\n  export function getAuthToken(authTokenRequest?: AuthTokenRequest): void;\n  export function getAuthToken(authTokenRequest?: AuthTokenRequest): Promise<string> {\n    ensureInitializeCalled();\n    return getAuthTokenHelper(authTokenRequest)\n      .then((value: string) => {\n        if (authTokenRequest && authTokenRequest.successCallback) {\n          authTokenRequest.successCallback(value);\n          return '';\n        }\n        return value;\n      })\n      .catch((err: Error) => {\n        if (authTokenRequest && authTokenRequest.failureCallback) {\n          authTokenRequest.failureCallback(err.message);\n          return '';\n        }\n        throw err;\n      });\n  }\n\n  function getAuthTokenHelper(authTokenRequest?: AuthTokenRequest): Promise<string> {\n    return new Promise<[boolean, string]>((resolve) => {\n      resolve(\n        sendMessageToParentAsync('authentication.getAuthToken', [\n          authTokenRequest?.resources,\n          authTokenRequest?.claims,\n          authTokenRequest?.silent,\n        ]),\n      );\n    }).then(([success, result]: [boolean, string]) => {\n      if (success) {\n        return result;\n      } else {\n        throw new Error(result);\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   * Requests the decoded Microsoft Entra user identity on behalf of the app.\n   *\n   * @returns Promise that resolves with the {@link UserProfile}.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function getUser(): Promise<UserProfile>;\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link authentication.getUser authentication.getUser(): Promise\\<UserProfile\\>} instead.\n   *\n   * @hidden\n   * Requests the decoded Microsoft Entra user identity on behalf of the app.\n   *\n   * @param userRequest - It passes success/failure callbacks in the userRequest object(deprecated)\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function getUser(userRequest: UserRequest): void;\n  export function getUser(userRequest?: UserRequest): Promise<UserProfile> {\n    ensureInitializeCalled();\n    return getUserHelper()\n      .then((value: UserProfile) => {\n        if (userRequest && userRequest.successCallback) {\n          userRequest.successCallback(value);\n          return null;\n        }\n        return value;\n      })\n      .catch((err: Error) => {\n        if (userRequest && userRequest.failureCallback) {\n          userRequest.failureCallback(err.message);\n          return null;\n        }\n        throw err;\n      });\n  }\n\n  function getUserHelper(): Promise<UserProfile> {\n    return new Promise<[boolean, UserProfile | string]>((resolve) => {\n      resolve(sendMessageToParentAsync('authentication.getUser'));\n    }).then(([success, result]: [boolean, UserProfile | string]) => {\n      if (success) {\n        return result as UserProfile;\n      } else {\n        throw new Error(result as string);\n      }\n    });\n  }\n\n  function closeAuthenticationWindow(): void {\n    // Stop monitoring the authentication window\n    stopAuthenticationWindowMonitor();\n    // Try to close the authentication window and clear all properties associated with it\n    try {\n      if (Communication.childWindow) {\n        Communication.childWindow.close();\n      }\n    } finally {\n      Communication.childWindow = null;\n      Communication.childOrigin = null;\n    }\n  }\n\n  function openAuthenticationWindow(authenticateParameters: AuthenticateParameters): void {\n    // Close the previously opened window if we have one\n    closeAuthenticationWindow();\n    // Start with a sensible default size\n    let width = authenticateParameters.width || 600;\n    let height = authenticateParameters.height || 400;\n    // Ensure that the new window is always smaller than our app's window so that it never fully covers up our app\n    width = Math.min(width, Communication.currentWindow.outerWidth - 400);\n    height = Math.min(height, Communication.currentWindow.outerHeight - 200);\n    // Convert any relative URLs into absolute URLs before sending them over to the parent window\n    const link = document.createElement('a');\n    link.href = authenticateParameters.url.replace('{oauthRedirectMethod}', 'web');\n    // We are running in the browser, so we need to center the new window ourselves\n    let left: number =\n      typeof Communication.currentWindow.screenLeft !== 'undefined'\n        ? Communication.currentWindow.screenLeft\n        : Communication.currentWindow.screenX;\n    let top: number =\n      typeof Communication.currentWindow.screenTop !== 'undefined'\n        ? Communication.currentWindow.screenTop\n        : Communication.currentWindow.screenY;\n    left += Communication.currentWindow.outerWidth / 2 - width / 2;\n    top += Communication.currentWindow.outerHeight / 2 - height / 2;\n    // Open a child window with a desired set of standard browser features\n    Communication.childWindow = Communication.currentWindow.open(\n      link.href,\n      '_blank',\n      'toolbar=no, location=yes, status=no, menubar=no, scrollbars=yes, top=' +\n        top +\n        ', left=' +\n        left +\n        ', width=' +\n        width +\n        ', height=' +\n        height,\n    );\n    if (Communication.childWindow) {\n      // Start monitoring the authentication window so that we can detect if it gets closed before the flow completes\n      startAuthenticationWindowMonitor();\n    } else {\n      // If we failed to open the window, fail the authentication flow\n      handleFailure('FailedToOpenWindow');\n    }\n  }\n\n  function stopAuthenticationWindowMonitor(): void {\n    if (authWindowMonitor) {\n      clearInterval(authWindowMonitor);\n      authWindowMonitor = 0;\n    }\n    removeHandler('initialize');\n    removeHandler('navigateCrossDomain');\n  }\n\n  function startAuthenticationWindowMonitor(): void {\n    // Stop the previous window monitor if one is running\n    stopAuthenticationWindowMonitor();\n    // Create an interval loop that\n    // - Notifies the caller of failure if it detects that the authentication window is closed\n    // - Keeps pinging the authentication window while it is open to re-establish\n    //   contact with any pages along the authentication flow that need to communicate\n    //   with us\n    authWindowMonitor = Communication.currentWindow.setInterval(() => {\n      if (!Communication.childWindow || Communication.childWindow.closed) {\n        handleFailure('CancelledByUser');\n      } else {\n        const savedChildOrigin = Communication.childOrigin;\n        try {\n          Communication.childOrigin = '*';\n          sendMessageEventToChild('ping');\n        } finally {\n          Communication.childOrigin = savedChildOrigin;\n        }\n      }\n    }, 100);\n    // Set up an initialize-message handler that gives the authentication window its frame context\n    registerHandler('initialize', () => {\n      return [FrameContexts.authentication, GlobalVars.hostClientType];\n    });\n    // Set up a navigateCrossDomain message handler that blocks cross-domain re-navigation attempts\n    // in the authentication window. We could at some point choose to implement this method via a call to\n    // authenticationWindow.location.href = url; however, we would first need to figure out how to\n    // validate the URL against the tab's list of valid domains.\n    registerHandler('navigateCrossDomain', () => {\n      return false;\n    });\n  }\n\n  /**\n   * When using {@link authentication.authenticate authentication.authenticate(authenticateParameters: AuthenticatePopUpParameters): Promise\\<string\\>}, the\n   * window that was opened to execute the authentication flow should call this method after authentiction to notify the caller of\n   * {@link authentication.authenticate authentication.authenticate(authenticateParameters: AuthenticatePopUpParameters): Promise\\<string\\>} that the\n   * authentication request was successful.\n   *\n   * @remarks\n   * This function is usable only from the authentication window.\n   * This call causes the authentication window to be closed.\n   *\n   * @param result - Specifies a result for the authentication. If specified, the frame that initiated the authentication pop-up receives\n   * this value in its callback or via the `Promise` return value\n   * @param callbackUrl - Specifies the url to redirect back to if the client is Win32 Outlook.\n   */\n  export function notifySuccess(result?: string, callbackUrl?: string): void {\n    redirectIfWin32Outlook(callbackUrl, 'result', result);\n    ensureInitialized(runtime, FrameContexts.authentication);\n    sendMessageToParent('authentication.authenticate.success', [result]);\n    // Wait for the message to be sent before closing the window\n    waitForMessageQueue(Communication.parentWindow, () => setTimeout(() => Communication.currentWindow.close(), 200));\n  }\n\n  /**\n   * When using {@link authentication.authenticate authentication.authenticate(authenticateParameters: AuthenticatePopUpParameters): Promise\\<string\\>}, the\n   * window that was opened to execute the authentication flow should call this method after authentiction to notify the caller of\n   * {@link authentication.authenticate authentication.authenticate(authenticateParameters: AuthenticatePopUpParameters): Promise\\<string\\>} that the\n   * authentication request failed.\n\n   *\n   * @remarks\n   * This function is usable only on the authentication window.\n   * This call causes the authentication window to be closed.\n   *\n   * @param result - Specifies a result for the authentication. If specified, the frame that initiated the authentication pop-up receives\n   * this value in its callback or via the `Promise` return value\n   * @param callbackUrl - Specifies the url to redirect back to if the client is Win32 Outlook.\n   */\n  export function notifyFailure(reason?: string, callbackUrl?: string): void {\n    redirectIfWin32Outlook(callbackUrl, 'reason', reason);\n    ensureInitialized(runtime, FrameContexts.authentication);\n    sendMessageToParent('authentication.authenticate.failure', [reason]);\n    // Wait for the message to be sent before closing the window\n    waitForMessageQueue(Communication.parentWindow, () => setTimeout(() => Communication.currentWindow.close(), 200));\n  }\n\n  function handleSuccess(result?: string): void {\n    try {\n      if (authHandlers) {\n        authHandlers.success(result);\n      }\n    } finally {\n      authHandlers = null;\n      closeAuthenticationWindow();\n    }\n  }\n\n  function handleFailure(reason?: string): void {\n    try {\n      if (authHandlers) {\n        authHandlers.fail(new Error(reason));\n      }\n    } finally {\n      authHandlers = null;\n      closeAuthenticationWindow();\n    }\n  }\n\n  /**\n   * Validates that the callbackUrl param is a valid connector url, appends the result/reason and authSuccess/authFailure as URL fragments and redirects the window\n   * @param callbackUrl - the connectors url to redirect to\n   * @param key - \"result\" in case of success and \"reason\" in case of failure\n   * @param value - the value of the passed result/reason parameter\n   */\n  function redirectIfWin32Outlook(callbackUrl?: string, key?: string, value?: string): void {\n    if (callbackUrl) {\n      const link = document.createElement('a');\n      link.href = decodeURIComponent(callbackUrl);\n      if (\n        link.host &&\n        link.host !== ssrSafeWindow().location.host &&\n        link.host === 'outlook.office.com' &&\n        link.search.indexOf('client_type=Win32_Outlook') > -1\n      ) {\n        if (key && key === 'result') {\n          if (value) {\n            link.href = updateUrlParameter(link.href, 'result', value);\n          }\n          Communication.currentWindow.location.assign(updateUrlParameter(link.href, 'authSuccess', ''));\n        }\n        if (key && key === 'reason') {\n          if (value) {\n            link.href = updateUrlParameter(link.href, 'reason', value);\n          }\n          Communication.currentWindow.location.assign(updateUrlParameter(link.href, 'authFailure', ''));\n        }\n      }\n    }\n  }\n\n  /**\n   * Appends either result or reason as a fragment to the 'callbackUrl'\n   * @param uri - the url to modify\n   * @param key - the fragment key\n   * @param value - the fragment value\n   */\n  function updateUrlParameter(uri: string, key: string, value: string): string {\n    const i = uri.indexOf('#');\n    let hash = i === -1 ? '#' : uri.substr(i);\n    hash = hash + '&' + key + (value !== '' ? '=' + value : '');\n    uri = i === -1 ? uri : uri.substr(0, i);\n    return uri + hash;\n  }\n\n  /**\n   * @deprecated\n   * As of 2.0.0, this interface has been deprecated in favor of leveraging the `Promise` returned from {@link authentication.authenticate authentication.authenticate(authenticateParameters: AuthenticatePopUpParameters): Promise\\<string\\>}\n   *-------------------------\n   * Used in {@link AuthenticateParameters} and {@link AuthTokenRequest}\n   */\n  export interface LegacyCallBacks {\n    /**\n     * @deprecated\n     * As of 2.0.0, this property has been deprecated in favor of a Promise-based pattern.\n     *\n     * A function that is called if the request succeeds.\n     */\n    successCallback?: (result: string) => void;\n    /**\n     * @deprecated\n     * As of 2.0.0, this property has been deprecated in favor of a Promise-based pattern.\n     *\n     * A function that is called if the request fails, with the reason for the failure.\n     */\n    failureCallback?: (reason: string) => void;\n  }\n\n  /**\n   * Describes the authentication pop-up parameters\n   */\n  export interface AuthenticatePopUpParameters {\n    /**\n     * The URL for the authentication pop-up.\n     */\n    url: string;\n    /**\n     * The preferred width for the pop-up. This value can be ignored if outside the acceptable bounds.\n     */\n    width?: number;\n    /**\n     * The preferred height for the pop-up. This value can be ignored if outside the acceptable bounds.\n     */\n    height?: number;\n    /**\n     * Some identity providers restrict their authentication pages from being displayed in embedded browsers (e.g., a web view inside of a native application)\n     * If the identity provider you are using prevents embedded browser usage, this flag should be set to `true` to enable the authentication page specified in\n     * the {@link url} property to be opened in an external browser.\n     * If this flag is `false`, the page will be opened directly within the current hosting application.\n     *\n     * This flag is ignored when the host for the application is a web app (as opposed to a native application) as the behavior is unnecessary in a web-only\n     * environment without an embedded browser.\n     */\n    isExternal?: boolean;\n  }\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link authentication.authenticate authentication.authenticate(authenticateParameters: AuthenticatePopUpParameters): Promise\\<string\\>} and\n   * the associated {@link AuthenticatePopUpParameters} instead.\n   *\n   * @see {@link LegacyCallBacks}\n   */\n  export type AuthenticateParameters = AuthenticatePopUpParameters & LegacyCallBacks;\n\n  /**\n   * Describes authentication token request parameters\n   */\n  export interface AuthTokenRequestParameters {\n    /**\n     * @hidden\n     * @internal\n     * An list of resources for which to acquire the access token; only for internal Microsoft usage\n     */\n    resources?: string[];\n    /**\n     * An optional list of claims which to pass to Microsoft Entra when requesting the access token.\n     */\n    claims?: string[];\n    /**\n     * An optional flag indicating whether to attempt the token acquisition silently or allow a prompt to be shown.\n     */\n    silent?: boolean;\n  }\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link AuthTokenRequestParameters} instead.\n   */\n  export type AuthTokenRequest = AuthTokenRequestParameters & LegacyCallBacks;\n\n  /**\n   * @hidden\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface UserProfile {\n    /**\n     * @hidden\n     * The intended recipient of the token. The application that receives the token must verify that the audience\n     * value is correct and reject any tokens intended for a different audience.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    aud: string;\n    /**\n     * @hidden\n     * Identifies how the subject of the token was authenticated.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    amr: string[];\n    /**\n     * @hidden\n     * Stores the time at which the token was issued. It is often used to measure token freshness.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    iat: number;\n    /**\n     * @hidden\n     * Identifies the security token service (STS) that constructs and returns the token. In the tokens that Microsoft Entra\n     * returns, the issuer is sts.windows.net. The GUID in the issuer claim value is the tenant ID of the Microsoft Entra\n     * directory. The tenant ID is an immutable and reliable identifier of the directory.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    iss: string;\n    /**\n     * @hidden\n     * Provides the last name, surname, or family name of the user as defined in the Microsoft Entra user object.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    family_name: string;\n    /**\n     * @hidden\n     * Provides the first or \"given\" name of the user, as set on the Microsoft Entra user object.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    given_name: string;\n    /**\n     * @hidden\n     * Provides a human-readable value that identifies the subject of the token. This value is not guaranteed to\n     * be unique within a tenant and is designed to be used only for display purposes.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    unique_name: string;\n    /**\n     * @hidden\n     * Contains a unique identifier of an object in Microsoft Entra. This value is immutable and cannot be reassigned or\n     * reused. Use the object ID to identify an object in queries to Microsoft Entra.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    oid: string;\n    /**\n     * @hidden\n     * Identifies the principal about which the token asserts information, such as the user of an application.\n     * This value is immutable and cannot be reassigned or reused, so it can be used to perform authorization\n     * checks safely. Because the subject is always present in the tokens the Microsoft Entra issues, we recommended\n     * using this value in a general-purpose authorization system.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    sub: string;\n    /**\n     * @hidden\n     * An immutable, non-reusable identifier that identifies the directory tenant that issued the token. You can\n     * use this value to access tenant-specific directory resources in a multitenant application. For example,\n     * you can use this value to identify the tenant in a call to the Graph API.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    tid: string;\n    /**\n     * @hidden\n     * Defines the end of the time interval within which a token is valid. The service that validates the token\n     * should verify that the current date is within the token lifetime; otherwise it should reject the token. The\n     * service might allow for up to five minutes beyond the token lifetime to account for any differences in clock\n     * time (\"time skew\") between Microsoft Entra and the service.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    exp: number;\n    /**\n     * @hidden\n     * Defines the start of the time interval within which a token is valid. The service that validates the token\n     * should verify that the current date is within the token lifetime; otherwise it should reject the token. The\n     * service might allow for up to five minutes beyond the token lifetime to account for any differences in clock\n     * time (\"time skew\") between Microsoft Entra and the service.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    nbf: number;\n    /**\n     * @hidden\n     * Stores the user name of the user principal.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    upn: string;\n    /**\n     * @hidden\n     * Stores the version number of the token.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    ver: string;\n    /**\n     * @hidden\n     * Stores the data residency of the user.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    dataResidency?: DataResidency;\n  }\n\n  /**\n   * @hidden\n   * Limited set of data residencies information exposed to 1P application developers\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export enum DataResidency {\n    /**\n     * Public\n     */\n    Public = 'public',\n\n    /**\n     * European Union Data Boundary\n     */\n    EUDB = 'eudb',\n\n    /**\n     * Other, stored to cover fields that will not be exposed\n     */\n    Other = 'other',\n  }\n\n  /**\n   * @deprecated\n   * As of 2.0.0, this interface has been deprecated in favor of a Promise-based pattern.\n   * @hidden\n   * Describes the UserRequest. Success callback describes how a successful request is handled.\n   * Failure callback describes how a failed request is handled.\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface UserRequest {\n    /**\n     * A function that is called if the token request succeeds, with the resulting token.\n     */\n    successCallback?: (user: UserProfile) => void;\n    /**\n     * A function that is called if the token request fails, with the reason for the failure.\n     */\n    failureCallback?: (reason: string) => void;\n  }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { sendMessageToParent } from '../internal/communication';\nimport { GlobalVars } from '../internal/globalVars';\nimport { registerHandler, removeHandler } from '../internal/handlers';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { isHostAdaptiveCardSchemaVersionUnsupported } from '../internal/utils';\nimport { DialogDimension, errorNotSupportedOnPlatform, FrameContexts } from './constants';\nimport {\n  AdaptiveCardDialogInfo,\n  BotAdaptiveCardDialogInfo,\n  BotUrlDialogInfo,\n  DialogInfo,\n  DialogSize,\n  M365ContentAction,\n  TaskInfo,\n  UrlDialogInfo,\n} from './interfaces';\nimport { runtime } from './runtime';\n\n/**\n * This group of capabilities enables apps to show modal dialogs. There are two primary types of dialogs: URL-based dialogs and [Adaptive Card](https://learn.microsoft.com/adaptive-cards/) dialogs.\n * Both types of dialogs are shown on top of your app, preventing interaction with your app while they are displayed.\n * - URL-based dialogs allow you to specify a URL from which the contents will be shown inside the dialog.\n *   - For URL dialogs, use the functions and interfaces in the {@link dialog.url} namespace.\n * - Adaptive Card-based dialogs allow you to provide JSON describing an Adaptive Card that will be shown inside the dialog.\n *   - For Adaptive Card dialogs, use the functions and interfaces in the {@link dialog.adaptiveCard} namespace.\n *\n * @remarks Note that dialogs were previously called \"task modules\". While they have been renamed for clarity, the functionality has been maintained.\n * For more details, see [Dialogs](https://learn.microsoft.com/microsoftteams/platform/task-modules-and-cards/what-are-task-modules)\n *\n * @beta\n */\nexport namespace dialog {\n  /**\n   * Data Structure to represent the SDK response when dialog closes\n   *\n   * @beta\n   */\n  export interface ISdkResponse {\n    /**\n     * Error in case there is a failure before dialog submission\n     */\n    err?: string;\n\n    /**\n     * Value provided in the `result` parameter by the dialog when the {@linkcode url.submit} function\n     * was called.\n     * If the dialog was closed by the user without submitting (e.g., using a control in the corner\n     * of the dialog), this value will be `undefined` here.\n     */\n    result?: string | object;\n  }\n\n  /**\n   * Handler used to receive and process messages sent between a dialog and the app that launched it\n   * @beta\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  export type PostMessageChannel = (message: any) => void;\n\n  /**\n   * Handler used for receiving results when a dialog closes, either the value passed by {@linkcode url.submit}\n   * or an error if the dialog was closed by the user.\n   *\n   * @see {@linkcode ISdkResponse}\n   *\n   * @beta\n   */\n  export type DialogSubmitHandler = (result: ISdkResponse) => void;\n  const storedMessages: string[] = [];\n\n  /**\n   * @hidden\n   * Hide from docs because this function is only used during initialization\n   *\n   * Adds register handlers for messageForChild upon initialization and only in the tasks FrameContext. {@link FrameContexts.task}\n   * Function is called during app initialization\n   * @internal\n   * Limited to Microsoft-internal use\n   *\n   * @beta\n   */\n  export function initialize(): void {\n    registerHandler('messageForChild', handleDialogMessage, false);\n  }\n\n  function handleDialogMessage(message: string): void {\n    if (!GlobalVars.frameContext) {\n      // GlobalVars.frameContext is currently not set\n      return;\n    }\n\n    if (GlobalVars.frameContext === FrameContexts.task) {\n      storedMessages.push(message);\n    } else {\n      // Not in task FrameContext, remove 'messageForChild' handler\n      removeHandler('messageForChild');\n    }\n  }\n\n  export namespace url {\n    /**\n     * Allows app to open a url based dialog.\n     *\n     * @remarks\n     * This function cannot be called from inside of a dialog\n     *\n     * @param urlDialogInfo - An object containing the parameters of the dialog module.\n     * @param submitHandler - Handler that triggers when a dialog calls the {@linkcode submit} function or when the user closes the dialog.\n     * @param messageFromChildHandler - Handler that triggers if dialog sends a message to the app.\n     *\n     * @beta\n     */\n    export function open(\n      urlDialogInfo: UrlDialogInfo,\n      submitHandler?: DialogSubmitHandler,\n      messageFromChildHandler?: PostMessageChannel,\n    ): void {\n      ensureInitialized(runtime, FrameContexts.content, FrameContexts.sidePanel, FrameContexts.meetingStage);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n\n      if (messageFromChildHandler) {\n        registerHandler('messageForParent', messageFromChildHandler);\n      }\n      const dialogInfo: DialogInfo = getDialogInfoFromUrlDialogInfo(urlDialogInfo);\n      sendMessageToParent('tasks.startTask', [dialogInfo], (err: string, result: string | object) => {\n        submitHandler?.({ err, result });\n        removeHandler('messageForParent');\n      });\n    }\n\n    /**\n     * Submit the dialog module and close the dialog\n     *\n     * @remarks\n     * This function is only intended to be called from code running within the dialog. Calling it from outside the dialog will have no effect.\n     *\n     * @param result - The result to be sent to the bot or the app. Typically a JSON object or a serialized version of it,\n     *  If this function is called from a dialog while {@link M365ContentAction} is set in the context object by the host, result will be ignored\n     *\n     * @param appIds - Valid application(s) that can receive the result of the submitted dialogs. Specifying this parameter helps prevent malicious apps from retrieving the dialog result. Multiple app IDs can be specified because a web app from a single underlying domain can power multiple apps across different environments and branding schemes.\n     *\n     * @beta\n     */\n    export function submit(result?: string | object, appIds?: string | string[]): void {\n      // FrameContext content should not be here because dialog.submit can be called only from inside of a dialog (FrameContext task)\n      // but it's here because Teams mobile incorrectly returns FrameContext.content when calling app.getFrameContext().\n      // FrameContexts.content will be removed once the bug is fixed.\n      ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n\n      // Send tasks.completeTask instead of tasks.submitTask message for backward compatibility with Mobile clients\n      sendMessageToParent('tasks.completeTask', [result, appIds ? (Array.isArray(appIds) ? appIds : [appIds]) : []]);\n    }\n\n    /**\n     *  Send message to the parent from dialog\n     *\n     * @remarks\n     * This function is only intended to be called from code running within the dialog. Calling it from outside the dialog will have no effect.\n     *\n     * @param message - The message to send to the parent\n     *\n     * @beta\n     */\n    export function sendMessageToParentFromDialog(\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      message: any,\n    ): void {\n      ensureInitialized(runtime, FrameContexts.task);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n\n      sendMessageToParent('messageForParent', [message]);\n    }\n\n    /**\n     *  Send message to the dialog from the parent\n     *\n     * @param message - The message to send\n     *\n     * @beta\n     */\n    export function sendMessageToDialog(\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      message: any,\n    ): void {\n      ensureInitialized(runtime, FrameContexts.content, FrameContexts.sidePanel, FrameContexts.meetingStage);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n\n      sendMessageToParent('messageForChild', [message]);\n    }\n\n    /**\n     * Register a listener that will be triggered when a message is received from the app that opened the dialog.\n     *\n     * @remarks\n     * This function is only intended to be called from code running within the dialog. Calling it from outside the dialog will have no effect.\n     *\n     * @param listener - The listener that will be triggered.\n     *\n     * @beta\n     */\n    export function registerOnMessageFromParent(listener: PostMessageChannel): void {\n      ensureInitialized(runtime, FrameContexts.task);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n\n      // We need to remove the original 'messageForChild'\n      // handler since the original does not allow for post messages.\n      // It is replaced by the user specified listener that is passed in.\n      removeHandler('messageForChild');\n      registerHandler('messageForChild', listener);\n      storedMessages.reverse();\n      while (storedMessages.length > 0) {\n        const message = storedMessages.pop();\n        listener(message);\n      }\n    }\n\n    /**\n     * Checks if dialog.url module is supported by the host\n     *\n     * @returns boolean to represent whether dialog.url module is supported\n     *\n     * @throws Error if {@linkcode app.initialize} has not successfully completed\n     *\n     * @beta\n     */\n    export function isSupported(): boolean {\n      return ensureInitialized(runtime) && (runtime.supports.dialog && runtime.supports.dialog.url) !== undefined;\n    }\n\n    /**\n     * Namespace to open a dialog that sends results to the bot framework\n     *\n     * @beta\n     */\n    export namespace bot {\n      /**\n       * Allows an app to open a dialog that sends submitted data to a bot.\n       *\n       * @param botUrlDialogInfo - An object containing the parameters of the dialog module including completionBotId.\n       * @param submitHandler - Handler that triggers when the dialog has been submitted or closed.\n       * @param messageFromChildHandler - Handler that triggers if dialog sends a message to the app.\n       *\n       * @returns a function that can be used to send messages to the dialog.\n       *\n       * @beta\n       */\n      export function open(\n        botUrlDialogInfo: BotUrlDialogInfo,\n        submitHandler?: DialogSubmitHandler,\n        messageFromChildHandler?: PostMessageChannel,\n      ): void {\n        ensureInitialized(runtime, FrameContexts.content, FrameContexts.sidePanel, FrameContexts.meetingStage);\n        if (!isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n        if (messageFromChildHandler) {\n          registerHandler('messageForParent', messageFromChildHandler);\n        }\n        const dialogInfo: DialogInfo = getDialogInfoFromBotUrlDialogInfo(botUrlDialogInfo);\n\n        sendMessageToParent('tasks.startTask', [dialogInfo], (err: string, result: string | object) => {\n          submitHandler?.({ err, result });\n          removeHandler('messageForParent');\n        });\n      }\n\n      /**\n       * Checks if dialog.url.bot capability is supported by the host\n       *\n       * @returns boolean to represent whether dialog.url.bot is supported\n       *\n       * @throws Error if {@linkcode app.initialize} has not successfully completed\n       *\n       * @beta\n       */\n      export function isSupported(): boolean {\n        return (\n          ensureInitialized(runtime) &&\n          (runtime.supports.dialog && runtime.supports.dialog.url && runtime.supports.dialog.url.bot) !== undefined\n        );\n      }\n    }\n\n    /**\n     * @hidden\n     *\n     * Convert UrlDialogInfo to DialogInfo to send the information to host in {@linkcode open} API.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    export function getDialogInfoFromUrlDialogInfo(urlDialogInfo: UrlDialogInfo): DialogInfo {\n      const dialogInfo: DialogInfo = {\n        url: urlDialogInfo.url,\n        height: urlDialogInfo.size ? urlDialogInfo.size.height : DialogDimension.Small,\n        width: urlDialogInfo.size ? urlDialogInfo.size.width : DialogDimension.Small,\n        title: urlDialogInfo.title,\n        fallbackUrl: urlDialogInfo.fallbackUrl,\n      };\n      return dialogInfo;\n    }\n\n    /**\n     * @hidden\n     *\n     * Convert BotUrlDialogInfo to DialogInfo to send the information to host in {@linkcode bot.open} API.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    export function getDialogInfoFromBotUrlDialogInfo(botUrlDialogInfo: BotUrlDialogInfo): DialogInfo {\n      const dialogInfo: DialogInfo = getDialogInfoFromUrlDialogInfo(botUrlDialogInfo);\n      dialogInfo.completionBotId = botUrlDialogInfo.completionBotId;\n      return dialogInfo;\n    }\n  }\n\n  /**\n   * This function currently serves no purpose and should not be used. All functionality that used\n   * to be covered by this method is now in subcapabilities and those isSupported methods should be\n   * used directly.\n   *\n   * @hidden\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.dialog ? true : false;\n  }\n\n  /**\n   * Namespace to update the dialog\n   *\n   * @beta\n   */\n  export namespace update {\n    /**\n     * Update dimensions - height/width of a dialog.\n     *\n     * @param dimensions - An object containing width and height properties.\n     *\n     * @beta\n     */\n    export function resize(dimensions: DialogSize): void {\n      ensureInitialized(\n        runtime,\n        FrameContexts.content,\n        FrameContexts.sidePanel,\n        FrameContexts.task,\n        FrameContexts.meetingStage,\n      );\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      sendMessageToParent('tasks.updateTask', [dimensions]);\n    }\n\n    /**\n     * Checks if dialog.update capability is supported by the host\n     * @returns boolean to represent whether dialog.update capabilty is supported\n     *\n     * @throws Error if {@linkcode app.initialize} has not successfully completed\n     *\n     * @beta\n     */\n    export function isSupported(): boolean {\n      return ensureInitialized(runtime) && runtime.supports.dialog\n        ? runtime.supports.dialog.update\n          ? true\n          : false\n        : false;\n    }\n  }\n\n  /**\n   * Subcapability for interacting with adaptive card dialogs\n   * @beta\n   */\n  export namespace adaptiveCard {\n    /**\n     * Allows app to open an adaptive card based dialog.\n     *\n     * @remarks\n     * This function cannot be called from inside of a dialog\n     *\n     * @param adaptiveCardDialogInfo - An object containing the parameters of the dialog module {@link AdaptiveCardDialogInfo}.\n     * @param submitHandler - Handler that triggers when a dialog calls the {@linkcode url.submit} function or when the user closes the dialog.\n     *\n     * @beta\n     */\n    export function open(adaptiveCardDialogInfo: AdaptiveCardDialogInfo, submitHandler?: DialogSubmitHandler): void {\n      ensureInitialized(runtime, FrameContexts.content, FrameContexts.sidePanel, FrameContexts.meetingStage);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      const dialogInfo: DialogInfo = getDialogInfoFromAdaptiveCardDialogInfo(adaptiveCardDialogInfo);\n      sendMessageToParent('tasks.startTask', [dialogInfo], (err: string, result: string | object) => {\n        submitHandler?.({ err, result });\n      });\n    }\n\n    /**\n     * Checks if dialog.adaptiveCard module is supported by the host\n     *\n     * @returns boolean to represent whether dialog.adaptiveCard module is supported\n     *\n     * @throws Error if {@linkcode app.initialize} has not successfully completed\n     *\n     * @beta\n     */\n    export function isSupported(): boolean {\n      const isAdaptiveCardVersionSupported =\n        runtime.hostVersionsInfo &&\n        runtime.hostVersionsInfo.adaptiveCardSchemaVersion &&\n        !isHostAdaptiveCardSchemaVersionUnsupported(runtime.hostVersionsInfo.adaptiveCardSchemaVersion);\n      return (\n        ensureInitialized(runtime) &&\n        (isAdaptiveCardVersionSupported && runtime.supports.dialog && runtime.supports.dialog.card) !== undefined\n      );\n    }\n\n    /**\n     * Namespace for interaction with adaptive card dialogs that need to communicate with the bot framework\n     *\n     * @beta\n     */\n    export namespace bot {\n      /**\n       * Allows an app to open an adaptive card-based dialog module using bot.\n       *\n       * @param botAdaptiveCardDialogInfo - An object containing the parameters of the dialog module including completionBotId.\n       * @param submitHandler - Handler that triggers when the dialog has been submitted or closed.\n       *\n       * @beta\n       */\n      export function open(\n        botAdaptiveCardDialogInfo: BotAdaptiveCardDialogInfo,\n        submitHandler?: DialogSubmitHandler,\n      ): void {\n        ensureInitialized(runtime, FrameContexts.content, FrameContexts.sidePanel, FrameContexts.meetingStage);\n        if (!isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n\n        const dialogInfo: DialogInfo = getDialogInfoFromBotAdaptiveCardDialogInfo(botAdaptiveCardDialogInfo);\n\n        sendMessageToParent('tasks.startTask', [dialogInfo], (err: string, result: string | object) => {\n          submitHandler?.({ err, result });\n        });\n      }\n\n      /**\n       * Checks if dialog.adaptiveCard.bot capability is supported by the host\n       *\n       * @returns boolean to represent whether dialog.adaptiveCard.bot is supported\n       *\n       * @throws Error if {@linkcode app.initialize} has not successfully completed\n       *\n       * @beta\n       */\n      export function isSupported(): boolean {\n        const isAdaptiveCardVersionSupported =\n          runtime.hostVersionsInfo &&\n          runtime.hostVersionsInfo.adaptiveCardSchemaVersion &&\n          !isHostAdaptiveCardSchemaVersionUnsupported(runtime.hostVersionsInfo.adaptiveCardSchemaVersion);\n        return (\n          ensureInitialized(runtime) &&\n          (isAdaptiveCardVersionSupported &&\n            runtime.supports.dialog &&\n            runtime.supports.dialog.card &&\n            runtime.supports.dialog.card.bot) !== undefined\n        );\n      }\n    }\n\n    /**\n     * @hidden\n     * Hide from docs\n     * --------\n     * Convert AdaptiveCardDialogInfo to DialogInfo to send the information to host in {@linkcode adaptiveCard.open} API.\n     *\n     * @internal\n     */\n    function getDialogInfoFromAdaptiveCardDialogInfo(adaptiveCardDialogInfo: AdaptiveCardDialogInfo): DialogInfo {\n      const dialogInfo: DialogInfo = {\n        card: adaptiveCardDialogInfo.card,\n        height: adaptiveCardDialogInfo.size ? adaptiveCardDialogInfo.size.height : DialogDimension.Small,\n        width: adaptiveCardDialogInfo.size ? adaptiveCardDialogInfo.size.width : DialogDimension.Small,\n        title: adaptiveCardDialogInfo.title,\n      };\n      return dialogInfo;\n    }\n\n    /**\n     * @hidden\n     * Hide from docs\n     * --------\n     * Convert BotAdaptiveCardDialogInfo to DialogInfo to send the information to host in {@linkcode adaptiveCard.open} API.\n     *\n     * @internal\n     */\n    function getDialogInfoFromBotAdaptiveCardDialogInfo(\n      botAdaptiveCardDialogInfo: BotAdaptiveCardDialogInfo,\n    ): DialogInfo {\n      const dialogInfo: DialogInfo = getDialogInfoFromAdaptiveCardDialogInfo(botAdaptiveCardDialogInfo);\n      dialogInfo.completionBotId = botAdaptiveCardDialogInfo.completionBotId;\n      return dialogInfo;\n    }\n  }\n}\n","import { sendMessageToParent } from '../internal/communication';\nimport { registerHandler } from '../internal/handlers';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { runtime } from '../public/runtime';\nimport { errorNotSupportedOnPlatform } from './constants';\n\n/**\n * Namespace to interact with the menu-specific part of the SDK.\n * This object is used to show View Configuration, Action Menu and Navigation Bar Menu.\n */\nexport namespace menus {\n  /**\n   * @hidden\n   * Represents information about item in View Configuration.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface ViewConfiguration {\n    /**\n     * @hidden\n     * Unique identifier of view.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    id: string;\n    /**\n     * @hidden\n     * Display title of the view.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    title: string;\n    /**\n     * @hidden\n     * Additional information for accessibility.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    contentDescription?: string;\n  }\n\n  /**\n   * Defines how a menu item should appear in the NavBar.\n   */\n  export enum DisplayMode {\n    /**\n     * Only place this item in the NavBar if there's room for it.\n     * If there's no room, item is shown in the overflow menu.\n     */\n    ifRoom = 0,\n    /**\n     * Never place this item in the NavBar.\n     * The item would always be shown in NavBar's overflow menu.\n     */\n    overflowOnly = 1,\n  }\n\n  /**\n   * @hidden\n   * Represents information about menu item for Action Menu and Navigation Bar Menu.\n   */\n  export class MenuItem {\n    /**\n     * @hidden\n     * Unique identifier for the menu item.\n     */\n    public id: string;\n    /**\n     * @hidden\n     * Display title of the menu item.\n     */\n    public title: string;\n    /**\n     * @hidden\n     * Display icon of the menu item. The icon value must be a string having SVG icon content.\n     */\n    public icon: string;\n    /**\n     * @hidden\n     * Selected state display icon of the menu item. The icon value must be a string having SVG icon content.\n     */\n    public iconSelected?: string;\n    /**\n     * @hidden\n     * Additional information for accessibility.\n     */\n    public contentDescription?: string;\n    /**\n     * @hidden\n     * State of the menu item\n     */\n    public enabled = true;\n    /**\n     * @hidden\n     * Interface to show list of items on selection of menu item.\n     */\n    public viewData?: ViewData;\n    /**\n     * @hidden\n     * Whether the menu item is selected or not\n     */\n    public selected = false;\n    /**\n     * The Display Mode of the menu item.\n     * Default Behaviour would be DisplayMode.ifRoom if null.\n     * Refer {@link DisplayMode}\n     */\n    public displayMode?: DisplayMode;\n  }\n\n  /**\n   * @hidden\n   * Represents information about view to show on Navigation Bar Menu item selection\n   */\n  export interface ViewData {\n    /**\n     * @hidden\n     * Display header title of the item list.\n     */\n    listTitle?: string;\n    /**\n     * @hidden\n     * Type of the menu item.\n     */\n    listType: MenuListType;\n    /**\n     * @hidden\n     * Array of MenuItem. Icon value will be required for all items in the list.\n     */\n    listItems: MenuItem[];\n  }\n\n  /**\n   * @hidden\n   * Represents information about type of list to display in Navigation Bar Menu.\n   */\n  export enum MenuListType {\n    dropDown = 'dropDown',\n    popOver = 'popOver',\n  }\n  let navBarMenuItemPressHandler: ((id: string) => boolean) | undefined;\n  let actionMenuItemPressHandler: ((id: string) => boolean) | undefined;\n  let viewConfigItemPressHandler: ((id: string) => boolean) | undefined;\n\n  /**\n   * @hidden\n   * Register navBarMenuItemPress, actionMenuItemPress, setModuleView handlers.\n   *\n   * @internal\n   * Limited to Microsoft-internal use.\n   */\n  export function initialize(): void {\n    registerHandler('navBarMenuItemPress', handleNavBarMenuItemPress, false);\n    registerHandler('actionMenuItemPress', handleActionMenuItemPress, false);\n    registerHandler('setModuleView', handleViewConfigItemPress, false);\n  }\n\n  /**\n   * @hidden\n   * Registers list of view configurations and it's handler.\n   * Handler is responsible for listening selection of View Configuration.\n   *\n   * @param viewConfig - List of view configurations. Minimum 1 value is required.\n   * @param handler - The handler to invoke when the user selects view configuration.\n   */\n  export function setUpViews(viewConfig: ViewConfiguration[], handler: (id: string) => boolean): void {\n    ensureInitialized(runtime);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    viewConfigItemPressHandler = handler;\n    sendMessageToParent('setUpViews', [viewConfig]);\n  }\n\n  function handleViewConfigItemPress(id: string): void {\n    if (!viewConfigItemPressHandler || !viewConfigItemPressHandler(id)) {\n      ensureInitialized(runtime);\n      sendMessageToParent('viewConfigItemPress', [id]);\n    }\n  }\n\n  /**\n   * @hidden\n   * Used to set menu items on the Navigation Bar. If icon is available, icon will be shown, otherwise title will be shown.\n   *\n   * @param items List of MenuItems for Navigation Bar Menu.\n   * @param handler The handler to invoke when the user selects menu item.\n   */\n  export function setNavBarMenu(items: MenuItem[], handler: (id: string) => boolean): void {\n    ensureInitialized(runtime);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    navBarMenuItemPressHandler = handler;\n    sendMessageToParent('setNavBarMenu', [items]);\n  }\n\n  function handleNavBarMenuItemPress(id: string): void {\n    if (!navBarMenuItemPressHandler || !navBarMenuItemPressHandler(id)) {\n      ensureInitialized(runtime);\n      sendMessageToParent('handleNavBarMenuItemPress', [id]);\n    }\n  }\n\n  /** Parameters used to create an action menu within an app */\n  export interface ActionMenuParameters {\n    /**\n     * @hidden\n     * Display title for Action Menu\n     */\n    title: string;\n    /**\n     * @hidden\n     * List of MenuItems for Action Menu\n     */\n    items: MenuItem[];\n  }\n\n  /**\n   * @hidden\n   * Used to show Action Menu.\n   *\n   * @param params - Parameters for Menu Parameters\n   * @param handler - The handler to invoke when the user selects menu item.\n   */\n  export function showActionMenu(params: ActionMenuParameters, handler: (id: string) => boolean): void {\n    ensureInitialized(runtime);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    actionMenuItemPressHandler = handler;\n    sendMessageToParent('showActionMenu', [params]);\n  }\n\n  function handleActionMenuItemPress(id: string): void {\n    if (!actionMenuItemPressHandler || !actionMenuItemPressHandler(id)) {\n      ensureInitialized(runtime);\n      sendMessageToParent('handleActionMenuItemPress', [id]);\n    }\n  }\n\n  /**\n   * Checks if the menus capability is supported by the host\n   * @returns boolean to represent whether the menus capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.menus ? true : false;\n  }\n}\n","import { GlobalVars } from '../internal/globalVars';\nimport * as Handlers from '../internal/handlers'; // Conflict with some names\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { ssrSafeWindow } from '../internal/utils';\nimport { errorNotSupportedOnPlatform } from './constants';\nimport { LoadContext } from './interfaces';\nimport { runtime } from './runtime';\n\n/**\n * Namespace containing the set of APIs that support Teams-specific functionalities.\n */\nexport namespace teamsCore {\n  /** Ready to unload function type */\n  type readyToUnloadFunctionType = () => void;\n  /** Register on load handler function type */\n  type registerOnLoadHandlerFunctionType = (context: LoadContext) => void;\n  /** Register before unload handler function type */\n  type registerBeforeUnloadHandlerFunctionType = (readyToUnload: readyToUnloadFunctionType) => boolean;\n  /**\n   * Enable print capability to support printing page using Ctrl+P and cmd+P\n   */\n  export function enablePrintCapability(): void {\n    if (!GlobalVars.printCapabilityEnabled) {\n      ensureInitialized(runtime);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      GlobalVars.printCapabilityEnabled = true;\n      // adding ctrl+P and cmd+P handler\n      document.addEventListener('keydown', (event: KeyboardEvent) => {\n        if ((event.ctrlKey || event.metaKey) && event.keyCode === 80) {\n          print();\n          event.cancelBubble = true;\n          event.preventDefault();\n          event.stopImmediatePropagation();\n        }\n      });\n    }\n  }\n\n  /**\n   * default print handler\n   */\n  export function print(): void {\n    ssrSafeWindow().print();\n  }\n\n  /**\n   * Registers a handler to be called when the page has been requested to load.\n   *\n   * @remarks Check out [App Caching in Teams](https://learn.microsoft.com/microsoftteams/platform/apps-in-teams-meetings/build-tabs-for-meeting?tabs=desktop%2Cmeeting-chat-view-desktop%2Cmeeting-stage-view-desktop%2Cchannel-meeting-desktop#app-caching)\n   * for a more detailed explanation about using this API.\n   *\n   * @param handler - The handler to invoke when the page is loaded.\n   *\n   * @beta\n   */\n  export function registerOnLoadHandler(handler: registerOnLoadHandlerFunctionType): void {\n    registerOnLoadHandlerHelper(handler, () => {\n      if (handler && !isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   * Undocumented helper function with shared code between deprecated version and current version of the registerOnLoadHandler API.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   *\n   * @param handler - The handler to invoke when the page is loaded.\n   * @param versionSpecificHelper - The helper function containing logic pertaining to a specific version of the API.\n   */\n  export function registerOnLoadHandlerHelper(\n    handler: registerOnLoadHandlerFunctionType,\n    versionSpecificHelper?: () => void,\n  ): void {\n    // allow for registration cleanup even when not finished initializing\n    handler && ensureInitialized(runtime);\n\n    if (handler && versionSpecificHelper) {\n      versionSpecificHelper();\n    }\n\n    Handlers.registerOnLoadHandler(handler);\n  }\n\n  /**\n   * Registers a handler to be called before the page is unloaded.\n   *\n   * @remarks Check out [App Caching in Teams](https://learn.microsoft.com/microsoftteams/platform/apps-in-teams-meetings/build-tabs-for-meeting?tabs=desktop%2Cmeeting-chat-view-desktop%2Cmeeting-stage-view-desktop%2Cchannel-meeting-desktop#app-caching)\n   * for a more detailed explanation about using this API.\n   *\n   * @param handler - The handler to invoke before the page is unloaded. If this handler returns true the page should\n   * invoke the readyToUnload function provided to it once it's ready to be unloaded.\n   *\n   * @beta\n   */\n  export function registerBeforeUnloadHandler(handler: registerBeforeUnloadHandlerFunctionType): void {\n    registerBeforeUnloadHandlerHelper(handler, () => {\n      if (handler && !isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n    });\n  }\n\n  /**\n   * @hidden\n   * Undocumented helper function with shared code between deprecated version and current version of the registerBeforeUnloadHandler API.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   *\n   * @param handler - - The handler to invoke before the page is unloaded. If this handler returns true the page should\n   * invoke the readyToUnload function provided to it once it's ready to be unloaded.\n   * @param versionSpecificHelper - The helper function containing logic pertaining to a specific version of the API.\n   */\n  export function registerBeforeUnloadHandlerHelper(\n    handler: registerBeforeUnloadHandlerFunctionType,\n    versionSpecificHelper?: () => void,\n  ): void {\n    // allow for registration cleanup even when not finished initializing\n    handler && ensureInitialized(runtime);\n    if (handler && versionSpecificHelper) {\n      versionSpecificHelper();\n    }\n    Handlers.registerBeforeUnloadHandler(handler);\n  }\n\n  /**\n   * Checks if teamsCore capability is supported by the host\n   *\n   * @returns boolean to represent whether the teamsCore capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.teamsCore ? true : false;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-empty-function */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport {\n  Communication,\n  initializeCommunication,\n  sendAndHandleStatusAndReason,\n  sendAndUnwrap,\n  sendMessageToParent,\n  uninitializeCommunication,\n} from '../internal/communication';\nimport { defaultSDKVersionForCompatCheck } from '../internal/constants';\nimport { GlobalVars } from '../internal/globalVars';\nimport * as Handlers from '../internal/handlers'; // Conflict with some names\nimport { ensureInitializeCalled, ensureInitialized, processAdditionalValidOrigins } from '../internal/internalAPIs';\nimport { getLogger } from '../internal/telemetry';\nimport { compareSDKVersions, inServerSideRenderingEnvironment, runWithTimeout } from '../internal/utils';\nimport { logs } from '../private/logs';\nimport { authentication } from './authentication';\nimport { ChannelType, FrameContexts, HostClientType, HostName, TeamType, UserTeamRole } from './constants';\nimport { dialog } from './dialog';\nimport { ActionInfo, Context as LegacyContext, FileOpenPreference, LocaleInfo } from './interfaces';\nimport { menus } from './menus';\nimport { pages } from './pages';\nimport { applyRuntimeConfig, generateBackCompatRuntimeConfig, IBaseRuntime, runtime } from './runtime';\nimport { teamsCore } from './teamsAPIs';\nimport { version } from './version';\n\n/**\n * Namespace to interact with app initialization and lifecycle.\n */\nexport namespace app {\n  const appLogger = getLogger('app');\n\n  // ::::::::::::::::::::::: MicrosoftTeams client SDK public API ::::::::::::::::::::\n\n  /** App Initialization Messages */\n  export const Messages = {\n    /** App loaded. */\n    AppLoaded: 'appInitialization.appLoaded',\n    /** App initialized successfully. */\n    Success: 'appInitialization.success',\n    /** App initialization failed. */\n    Failure: 'appInitialization.failure',\n    /** App initialization expected failure. */\n    ExpectedFailure: 'appInitialization.expectedFailure',\n  };\n\n  /**\n   * Describes errors that caused app initialization to fail\n   */\n  export enum FailedReason {\n    /**\n     * Authentication failed\n     */\n    AuthFailed = 'AuthFailed',\n    /**\n     * The application timed out\n     */\n    Timeout = 'Timeout',\n    /**\n     * The app failed for a different reason\n     */\n    Other = 'Other',\n  }\n\n  /**\n   * Describes expected errors that occurred during an otherwise successful\n   * app initialization\n   */\n  export enum ExpectedFailureReason {\n    /**\n     * There was a permission error\n     */\n    PermissionError = 'PermissionError',\n    /**\n     * The item was not found\n     */\n    NotFound = 'NotFound',\n    /**\n     * The network is currently throttled\n     */\n    Throttling = 'Throttling',\n    /**\n     * The application is currently offline\n     */\n    Offline = 'Offline',\n    /**\n     * The app failed for a different reason\n     */\n    Other = 'Other',\n  }\n\n  /**\n   * Represents the failed request sent during a failed app initialization.\n   */\n  export interface IFailedRequest {\n    /**\n     * The reason for the failure\n     */\n    reason: FailedReason;\n    /**\n     * This property is currently unused.\n     */\n    message?: string;\n  }\n\n  /**\n   * Represents the failure request sent during an erroneous app initialization.\n   */\n  export interface IExpectedFailureRequest {\n    /**\n     * The reason for the failure\n     */\n    reason: ExpectedFailureReason;\n    /**\n     * A message that describes the failure\n     */\n    message?: string;\n  }\n\n  /**\n   * Represents application information.\n   */\n  export interface AppInfo {\n    /**\n     * The current locale that the user has configured for the app formatted as\n     * languageId-countryId (for example, en-us).\n     */\n    locale: string;\n\n    /**\n     * The current UI theme of the host. Possible values: \"default\", \"dark\", or \"contrast\".\n     */\n    theme: string;\n\n    /**\n     * Unique ID for the current session for use in correlating telemetry data.\n     */\n    sessionId: string;\n\n    /**\n     * Info of the host\n     */\n    host: AppHostInfo;\n\n    /**\n     * More detailed locale info from the user's OS if available. Can be used together with\n     * the @microsoft/globe NPM package to ensure your app respects the user's OS date and\n     * time format configuration\n     */\n    osLocaleInfo?: LocaleInfo;\n    /**\n     * Personal app icon y coordinate position\n     */\n    iconPositionVertical?: number;\n\n    /**\n     * Time when the user clicked on the tab\n     */\n    userClickTime?: number;\n\n    /**\n     * The ID of the parent message from which this task module was launched.\n     * This is only available in task modules launched from bot cards.\n     */\n    parentMessageId?: string;\n\n    /**\n     * Where the user prefers the file to be opened from by default during file open\n     */\n    userFileOpenPreference?: FileOpenPreference;\n\n    /**\n     * ID for the current visible app which is different for across cached sessions. Used for correlating telemetry data.\n     */\n    appLaunchId?: string;\n  }\n\n  /**\n   * Represents information about the application's host.\n   */\n  export interface AppHostInfo {\n    /**\n     * Identifies which host is running your app\n     */\n    name: HostName;\n\n    /**\n     * The client type on which the host is running\n     */\n    clientType: HostClientType;\n\n    /**\n     * Unique ID for the current Host session for use in correlating telemetry data.\n     */\n    sessionId: string;\n\n    /**\n     * Current ring ID\n     */\n    ringId?: string;\n  }\n\n  /**\n   * Represents Channel information.\n   */\n  export interface ChannelInfo {\n    /**\n     * The Microsoft Teams ID for the channel with which the content is associated.\n     */\n    id: string;\n\n    /**\n     * The name for the channel with which the content is associated.\n     */\n    displayName?: string;\n\n    /**\n     * The relative path to the SharePoint folder associated with the channel.\n     */\n    relativeUrl?: string;\n\n    /**\n     * The type of the channel with which the content is associated.\n     */\n    membershipType?: ChannelType;\n\n    /**\n     * The OneNote section ID that is linked to the channel.\n     */\n    defaultOneNoteSectionId?: string;\n\n    /**\n     * The tenant ID of the team which owns the channel.\n     */\n    ownerTenantId?: string;\n\n    /**\n     * The Microsoft Entra group ID of the team which owns the channel.\n     */\n    ownerGroupId?: string;\n  }\n\n  /**\n   * Represents Chat information.\n   */\n  export interface ChatInfo {\n    /**\n     * The Microsoft Teams ID for the chat with which the content is associated.\n     */\n    id: string;\n  }\n\n  /**\n   * Represents Meeting information.\n   */\n  export interface MeetingInfo {\n    /**\n     * Meeting Id used by tab when running in meeting context\n     */\n    id: string;\n  }\n\n  /**\n   * Represents Page information.\n   */\n  export interface PageInfo {\n    /**\n     * The developer-defined unique ID for the page this content points to.\n     */\n    id: string;\n\n    /**\n     * The context where page url is loaded (content, task, setting, remove, sidePanel)\n     */\n    frameContext: FrameContexts;\n\n    /**\n     * The developer-defined unique ID for the sub-page this content points to.\n     * This field should be used to restore to a specific state within a page,\n     * such as scrolling to or activating a specific piece of content.\n     */\n    subPageId?: string;\n\n    /**\n     * Indication whether the page is in full-screen mode.\n     */\n    isFullScreen?: boolean;\n\n    /**\n     * Indication whether the page is in a pop out window\n     */\n    isMultiWindow?: boolean;\n\n    /**\n     * Source origin from where the page is opened\n     */\n    sourceOrigin?: string;\n  }\n\n  /**\n   * Represents Team information.\n   */\n  export interface TeamInfo {\n    /**\n     * The Microsoft Teams ID for the team with which the content is associated.\n     */\n    internalId: string;\n\n    /**\n     * The name for the team with which the content is associated.\n     */\n    displayName?: string;\n\n    /**\n     * The type of the team.\n     */\n    type?: TeamType;\n\n    /**\n     * The Office 365 group ID for the team with which the content is associated.\n     * This field is available only when the identity permission is requested in the manifest.\n     */\n    groupId?: string;\n\n    /**\n     * Indicates whether team is archived.\n     * Apps should use this as a signal to prevent any changes to content associated with archived teams.\n     */\n    isArchived?: boolean;\n\n    /**\n     * Team Template ID if there was a Team Template associated with the creation of the team.\n     */\n    templateId?: string;\n\n    /**\n     * The user's role in the team.\n\n     * Because a malicious party can run your content in a browser, this value should\n     * be used only as a hint as to the user's role, and never as proof of her role.\n     */\n    userRole?: UserTeamRole;\n  }\n\n  /**\n   * Represents User information.\n   */\n  export interface UserInfo {\n    /**\n     * The Microsoft Entra object id of the current user.\n     *\n     * Because a malicious party can run your content in a browser, this value should\n     * be used only as a optimization hint as to who the user is and never as proof of identity.\n     * Specifically, this value should never be used to determine if a user is authorized to access\n     * a resource; access tokens should be used for that.\n     * See {@link authentication.getAuthToken} and {@link authentication.authenticate} for more information on access tokens.\n     *\n     * This field is available only when the identity permission is requested in the manifest.\n     */\n    id: string;\n\n    /**\n     * The address book name of the current user.\n     */\n    displayName?: string;\n\n    /**\n     * Represents whether calling is allowed for the current logged in User\n     */\n    isCallingAllowed?: boolean;\n\n    /**\n     * Represents whether PSTN calling is allowed for the current logged in User\n     */\n    isPSTNCallingAllowed?: boolean;\n\n    /**\n     * The license type for the current user. Possible values are:\n     * \"Unknown\", \"Teacher\", \"Student\", \"Free\", \"SmbBusinessVoice\", \"SmbNonVoice\", \"FrontlineWorker\", \"Anonymous\"\n     */\n    licenseType?: string;\n\n    /**\n     * A value suitable for use when providing a login_hint to Microsoft Entra ID for authentication purposes.\n     * See [Provide optional claims to your app](https://learn.microsoft.com/azure/active-directory/develop/active-directory-optional-claims#v10-and-v20-optional-claims-set)\n     * for more information about the use of login_hint\n     *\n     * Because a malicious party can run your content in a browser, this value should\n     * be used only as a optimization hint as to who the user is and never as proof of identity.\n     * Specifically, this value should never be used to determine if a user is authorized to access\n     * a resource; access tokens should be used for that.\n     * See {@link authentication.getAuthToken} and {@link authentication.authenticate} for more information on access tokens.\n     */\n    loginHint?: string;\n\n    /**\n     * The UPN of the current user. This may be an externally-authenticated UPN (e.g., guest users).\n\n     * Because a malicious party can run your content in a browser, this value should\n     * be used only as a optimization hint as to who the user is and never as proof of identity.\n     * Specifically, this value should never be used to determine if a user is authorized to access\n     * a resource; access tokens should be used for that.\n     * See {@link authentication.getAuthToken} and {@link authentication.authenticate} for more information on access tokens.\n     */\n    userPrincipalName?: string;\n\n    /**\n     * The tenant related info of the current user.\n     */\n    tenant?: TenantInfo;\n  }\n\n  /**\n   * Represents Tenant information.\n   */\n  export interface TenantInfo {\n    /**\n     * The Microsoft Entra tenant ID of the current user.\n\n     * Because a malicious party can run your content in a browser, this value should\n     * be used only as a optimization hint as to who the user is and never as proof of identity.\n     * Specifically, this value should never be used to determine if a user is authorized to access\n     * a resource; access tokens should be used for that.\n     * See {@link authentication.getAuthToken} and {@link authentication.authenticate} for more information on access tokens.\n     */\n    id: string;\n\n    /**\n     * The type of license for the current users tenant.\n     */\n    teamsSku?: string;\n  }\n\n  /** Represents information about a SharePoint site */\n  export interface SharePointSiteInfo {\n    /**\n     * The root SharePoint site associated with the team.\n     */\n    teamSiteUrl?: string;\n\n    /**\n     * The domain of the root SharePoint site associated with the team.\n     */\n    teamSiteDomain?: string;\n\n    /**\n     * The relative path to the SharePoint site associated with the team.\n     */\n    teamSitePath?: string;\n\n    /**\n     * Teamsite ID, aka sharepoint site id.\n     */\n    teamSiteId?: string;\n\n    /**\n     * The SharePoint my site domain associated with the user.\n     */\n    mySiteDomain?: string;\n\n    /**\n     * The SharePoint relative path to the current users mysite\n     */\n    mySitePath?: string;\n  }\n\n  /**\n   * Represents structure of the received context message.\n   */\n  export interface Context {\n    /**\n     * Content Action Info\n     *\n     * @beta\n     */\n    actionInfo?: ActionInfo;\n    /**\n     * Properties about the current session for your app\n     */\n    app: AppInfo;\n\n    /**\n     * Info about the current page context hosting your app\n     */\n    page: PageInfo;\n\n    /**\n     * Info about the currently logged in user running the app.\n     * If the current user is not logged in/authenticated (e.g. a meeting app running for an anonymously-joined partcipant) this will be `undefined`.\n     */\n    user?: UserInfo;\n\n    /**\n     * When running in the context of a Teams channel, provides information about the channel, else `undefined`\n     */\n    channel?: ChannelInfo;\n\n    /**\n     * When running in the context of a Teams chat, provides information about the chat, else `undefined`\n     */\n    chat?: ChatInfo;\n\n    /**\n     * When running in the context of a Teams meeting, provides information about the meeting, else `undefined`\n     */\n    meeting?: MeetingInfo;\n\n    /**\n     * When hosted in SharePoint, this is the [SharePoint PageContext](https://learn.microsoft.com/javascript/api/sp-page-context/pagecontext?view=sp-typescript-latest), else `undefined`\n     */\n    sharepoint?: any;\n\n    /**\n     * When running in Teams for an organization with a tenant, provides information about the SharePoint site associated with the team.\n     * Will be `undefined` when not running in Teams for an organization with a tenant.\n     */\n    sharePointSite?: SharePointSiteInfo;\n\n    /**\n     * When running in Teams, provides information about the Team context in which your app is running.\n     * Will be `undefined` when not running in Teams.\n     */\n    team?: TeamInfo;\n  }\n\n  /**\n   * This function is passed to registerOnThemeHandler. It is called every time the user changes their theme.\n   */\n  type themeHandler = (theme: string) => void;\n\n  /**\n   * Checks whether the Teams client SDK has been initialized.\n   * @returns whether the Teams client SDK has been initialized.\n   */\n  export function isInitialized(): boolean {\n    return GlobalVars.initializeCompleted;\n  }\n\n  /**\n   * Gets the Frame Context that the App is running in. See {@link FrameContexts} for the list of possible values.\n   * @returns the Frame Context.\n   */\n  export function getFrameContext(): FrameContexts {\n    return GlobalVars.frameContext;\n  }\n\n  /**\n   * Number of milliseconds we'll give the initialization call to return before timing it out\n   */\n  const initializationTimeoutInMs = 5000;\n\n  /**\n   * Initializes the library.\n   *\n   * @remarks\n   * Initialize must have completed successfully (as determined by the resolved Promise) before any other library calls are made\n   *\n   * @param validMessageOrigins - Optionally specify a list of cross frame message origins. They must have\n   * https: protocol otherwise they will be ignored. Example: https://www.example.com\n   * @returns Promise that will be fulfilled when initialization has completed, or rejected if the initialization fails or times out\n   */\n  export function initialize(validMessageOrigins?: string[]): Promise<void> {\n    if (!inServerSideRenderingEnvironment()) {\n      return runWithTimeout(\n        () => initializeHelper(validMessageOrigins),\n        initializationTimeoutInMs,\n        new Error('SDK initialization timed out.'),\n      );\n    } else {\n      const initializeLogger = appLogger.extend('initialize');\n      // This log statement should NEVER actually be written. This code path exists only to enable compilation in server-side rendering environments.\n      // If you EVER see this statement in ANY log file, something has gone horribly wrong and a bug needs to be filed.\n      initializeLogger('window object undefined at initialization');\n      return Promise.resolve();\n    }\n  }\n\n  const initializeHelperLogger = appLogger.extend('initializeHelper');\n  function initializeHelper(validMessageOrigins?: string[]): Promise<void> {\n    return new Promise<void>((resolve) => {\n      // Independent components might not know whether the SDK is initialized so might call it to be safe.\n      // Just no-op if that happens to make it easier to use.\n      if (!GlobalVars.initializeCalled) {\n        GlobalVars.initializeCalled = true;\n\n        Handlers.initializeHandlers();\n        GlobalVars.initializePromise = initializeCommunication(validMessageOrigins).then(\n          ({ context, clientType, runtimeConfig, clientSupportedSDKVersion = defaultSDKVersionForCompatCheck }) => {\n            GlobalVars.frameContext = context;\n            GlobalVars.hostClientType = clientType;\n            GlobalVars.clientSupportedSDKVersion = clientSupportedSDKVersion;\n            // Temporary workaround while the Host is updated with the new argument order.\n            // For now, we might receive any of these possibilities:\n            // - `runtimeConfig` in `runtimeConfig` and `clientSupportedSDKVersion` in `clientSupportedSDKVersion`.\n            // - `runtimeConfig` in `clientSupportedSDKVersion` and `clientSupportedSDKVersion` in `runtimeConfig`.\n            // - `clientSupportedSDKVersion` in `runtimeConfig` and no `clientSupportedSDKVersion`.\n            // This code supports any of these possibilities\n\n            // Teams AppHost won't provide this runtime config\n            // so we assume that if we don't have it, we must be running in Teams.\n            // After Teams updates its client code, we can remove this default code.\n            try {\n              initializeHelperLogger('Parsing %s', runtimeConfig);\n              const givenRuntimeConfig: IBaseRuntime | null = JSON.parse(runtimeConfig);\n              initializeHelperLogger('Checking if %o is a valid runtime object', givenRuntimeConfig ?? 'null');\n              // Check that givenRuntimeConfig is a valid instance of IBaseRuntime\n              if (!givenRuntimeConfig || !givenRuntimeConfig.apiVersion) {\n                throw new Error('Received runtime config is invalid');\n              }\n              runtimeConfig && applyRuntimeConfig(givenRuntimeConfig);\n            } catch (e) {\n              if (e instanceof SyntaxError) {\n                try {\n                  initializeHelperLogger('Attempting to parse %s as an SDK version', runtimeConfig);\n                  // if the given runtime config was actually meant to be a SDK version, store it as such.\n                  // TODO: This is a temporary workaround to allow Teams to store clientSupportedSDKVersion even when\n                  // it doesn't provide the runtimeConfig. After Teams updates its client code, we should\n                  // remove this feature.\n                  if (!isNaN(compareSDKVersions(runtimeConfig, defaultSDKVersionForCompatCheck))) {\n                    GlobalVars.clientSupportedSDKVersion = runtimeConfig;\n                  }\n                  const givenRuntimeConfig: IBaseRuntime | null = JSON.parse(clientSupportedSDKVersion);\n                  initializeHelperLogger('givenRuntimeConfig parsed to %o', givenRuntimeConfig ?? 'null');\n\n                  if (!givenRuntimeConfig) {\n                    throw new Error(\n                      'givenRuntimeConfig string was successfully parsed. However, it parsed to value of null',\n                    );\n                  } else {\n                    applyRuntimeConfig(givenRuntimeConfig);\n                  }\n                } catch (e) {\n                  if (e instanceof SyntaxError) {\n                    applyRuntimeConfig(generateBackCompatRuntimeConfig(GlobalVars.clientSupportedSDKVersion));\n                  } else {\n                    throw e;\n                  }\n                }\n              } else {\n                // If it's any error that's not a JSON parsing error, we want the program to fail.\n                throw e;\n              }\n            }\n\n            GlobalVars.initializeCompleted = true;\n          },\n        );\n\n        authentication.initialize();\n        menus.initialize();\n        pages.config.initialize();\n        dialog.initialize();\n      }\n\n      // Handle additional valid message origins if specified\n      if (Array.isArray(validMessageOrigins)) {\n        processAdditionalValidOrigins(validMessageOrigins);\n      }\n\n      resolve(GlobalVars.initializePromise);\n    });\n  }\n\n  /**\n   * @hidden\n   * Undocumented function used to set a mock window for unit tests\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function _initialize(hostWindow: any): void {\n    Communication.currentWindow = hostWindow;\n  }\n\n  /**\n   * @hidden\n   * Undocumented function used to clear state between unit tests\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function _uninitialize(): void {\n    if (!GlobalVars.initializeCalled) {\n      return;\n    }\n\n    if (GlobalVars.frameContext) {\n      /* eslint-disable strict-null-checks/all */ /* Fix tracked by 5730662 */\n      registerOnThemeChangeHandler(null);\n      pages.backStack.registerBackButtonHandler(null);\n      pages.registerFullScreenHandler(null);\n      teamsCore.registerBeforeUnloadHandler(null);\n      teamsCore.registerOnLoadHandler(null);\n      logs.registerGetLogHandler(null); /* Fix tracked by 5730662 */\n      /* eslint-enable strict-null-checks/all */\n    }\n\n    if (GlobalVars.frameContext === FrameContexts.settings) {\n      /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n      pages.config.registerOnSaveHandler(null);\n    }\n\n    if (GlobalVars.frameContext === FrameContexts.remove) {\n      /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n      pages.config.registerOnRemoveHandler(null);\n    }\n\n    GlobalVars.initializeCalled = false;\n    GlobalVars.initializeCompleted = false;\n    GlobalVars.initializePromise = null;\n    GlobalVars.additionalValidOrigins = [];\n    GlobalVars.frameContext = null;\n    GlobalVars.hostClientType = null;\n    GlobalVars.isFramelessWindow = false;\n\n    uninitializeCommunication();\n  }\n\n  /**\n   * Retrieves the current context the frame is running in.\n   *\n   * @returns Promise that will resolve with the {@link app.Context} object.\n   */\n  export function getContext(): Promise<app.Context> {\n    return new Promise<LegacyContext>((resolve) => {\n      ensureInitializeCalled();\n      resolve(sendAndUnwrap('getContext'));\n    }).then((legacyContext) => transformLegacyContextToAppContext(legacyContext)); // converts globalcontext to app.context\n  }\n\n  /**\n   * Notifies the frame that app has loaded and to hide the loading indicator if one is shown.\n   */\n  export function notifyAppLoaded(): void {\n    ensureInitializeCalled();\n    sendMessageToParent(Messages.AppLoaded, [version]);\n  }\n\n  /**\n   * Notifies the frame that app initialization is successful and is ready for user interaction.\n   */\n  export function notifySuccess(): void {\n    ensureInitializeCalled();\n    sendMessageToParent(Messages.Success, [version]);\n  }\n\n  /**\n   * Notifies the frame that app initialization has failed and to show an error page in its place.\n   *\n   * @param appInitializationFailedRequest - The failure request containing the reason for why the app failed\n   * during initialization as well as an optional message.\n   */\n  export function notifyFailure(appInitializationFailedRequest: IFailedRequest): void {\n    ensureInitializeCalled();\n    sendMessageToParent(Messages.Failure, [\n      appInitializationFailedRequest.reason,\n      appInitializationFailedRequest.message,\n    ]);\n  }\n\n  /**\n   * Notifies the frame that app initialized with some expected errors.\n   *\n   * @param expectedFailureRequest - The expected failure request containing the reason and an optional message\n   */\n  export function notifyExpectedFailure(expectedFailureRequest: IExpectedFailureRequest): void {\n    ensureInitializeCalled();\n    sendMessageToParent(Messages.ExpectedFailure, [expectedFailureRequest.reason, expectedFailureRequest.message]);\n  }\n\n  /**\n   * Registers a handler for theme changes.\n   *\n   * @remarks\n   * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n   *\n   * @param handler - The handler to invoke when the user changes their theme.\n   */\n  export function registerOnThemeChangeHandler(handler: themeHandler): void {\n    // allow for registration cleanup even when not called initialize\n    handler && ensureInitializeCalled();\n    Handlers.registerOnThemeChangeHandler(handler);\n  }\n\n  /**\n   * open link API.\n   *\n   * @param deepLink - deep link.\n   * @returns Promise that will be fulfilled when the operation has completed\n   */\n  export function openLink(deepLink: string): Promise<void> {\n    return new Promise<void>((resolve) => {\n      ensureInitialized(\n        runtime,\n        FrameContexts.content,\n        FrameContexts.sidePanel,\n        FrameContexts.settings,\n        FrameContexts.task,\n        FrameContexts.stage,\n        FrameContexts.meetingStage,\n      );\n      resolve(sendAndHandleStatusAndReason('executeDeepLink', deepLink));\n    });\n  }\n}\n\n/**\n * @hidden\n * Transforms the Legacy Context object received from Messages to the structured app.Context object\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction transformLegacyContextToAppContext(legacyContext: LegacyContext): app.Context {\n  const context: app.Context = {\n    actionInfo: legacyContext.actionInfo,\n    app: {\n      locale: legacyContext.locale,\n      sessionId: legacyContext.appSessionId ? legacyContext.appSessionId : '',\n      theme: legacyContext.theme ? legacyContext.theme : 'default',\n      iconPositionVertical: legacyContext.appIconPosition,\n      osLocaleInfo: legacyContext.osLocaleInfo,\n      parentMessageId: legacyContext.parentMessageId,\n      userClickTime: legacyContext.userClickTime,\n      userFileOpenPreference: legacyContext.userFileOpenPreference,\n      host: {\n        name: legacyContext.hostName ? legacyContext.hostName : HostName.teams,\n        clientType: legacyContext.hostClientType ? legacyContext.hostClientType : HostClientType.web,\n        sessionId: legacyContext.sessionId ? legacyContext.sessionId : '',\n        ringId: legacyContext.ringId,\n      },\n      appLaunchId: legacyContext.appLaunchId,\n    },\n    page: {\n      id: legacyContext.entityId,\n      frameContext: legacyContext.frameContext ? legacyContext.frameContext : GlobalVars.frameContext,\n      subPageId: legacyContext.subEntityId,\n      isFullScreen: legacyContext.isFullScreen,\n      isMultiWindow: legacyContext.isMultiWindow,\n      sourceOrigin: legacyContext.sourceOrigin,\n    },\n    user: {\n      id: legacyContext.userObjectId,\n      displayName: legacyContext.userDisplayName,\n      isCallingAllowed: legacyContext.isCallingAllowed,\n      isPSTNCallingAllowed: legacyContext.isPSTNCallingAllowed,\n      licenseType: legacyContext.userLicenseType,\n      loginHint: legacyContext.loginHint,\n      userPrincipalName: legacyContext.userPrincipalName,\n      tenant: legacyContext.tid\n        ? {\n            id: legacyContext.tid,\n            teamsSku: legacyContext.tenantSKU,\n          }\n        : undefined,\n    },\n    channel: legacyContext.channelId\n      ? {\n          id: legacyContext.channelId,\n          displayName: legacyContext.channelName,\n          relativeUrl: legacyContext.channelRelativeUrl,\n          membershipType: legacyContext.channelType,\n          defaultOneNoteSectionId: legacyContext.defaultOneNoteSectionId,\n          ownerGroupId: legacyContext.hostTeamGroupId,\n          ownerTenantId: legacyContext.hostTeamTenantId,\n        }\n      : undefined,\n    chat: legacyContext.chatId\n      ? {\n          id: legacyContext.chatId,\n        }\n      : undefined,\n    meeting: legacyContext.meetingId\n      ? {\n          id: legacyContext.meetingId,\n        }\n      : undefined,\n    sharepoint: legacyContext.sharepoint,\n    team: legacyContext.teamId\n      ? {\n          internalId: legacyContext.teamId,\n          displayName: legacyContext.teamName,\n          type: legacyContext.teamType,\n          groupId: legacyContext.groupId,\n          templateId: legacyContext.teamTemplateId,\n          isArchived: legacyContext.isTeamArchived,\n          userRole: legacyContext.userTeamRole,\n        }\n      : undefined,\n    sharePointSite:\n      legacyContext.teamSiteUrl ||\n      legacyContext.teamSiteDomain ||\n      legacyContext.teamSitePath ||\n      legacyContext.mySitePath ||\n      legacyContext.mySiteDomain\n        ? {\n            teamSiteUrl: legacyContext.teamSiteUrl,\n            teamSiteDomain: legacyContext.teamSiteDomain,\n            teamSitePath: legacyContext.teamSitePath,\n            teamSiteId: legacyContext.teamSiteId,\n            mySitePath: legacyContext.mySitePath,\n            mySiteDomain: legacyContext.mySiteDomain,\n          }\n        : undefined,\n  };\n\n  return context;\n}\n","import {\n  Communication,\n  sendAndHandleSdkError,\n  sendAndHandleStatusAndReason,\n  sendAndHandleStatusAndReasonWithDefaultError,\n  sendAndUnwrap,\n  sendMessageEventToChild,\n  sendMessageToParent,\n} from '../internal/communication';\nimport { registerHandler, registerHandlerHelper } from '../internal/handlers';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { createTeamsAppLink } from '../internal/utils';\nimport { app } from './app';\nimport { errorNotSupportedOnPlatform, FrameContexts } from './constants';\nimport { FrameInfo, ShareDeepLinkParameters, TabInformation, TabInstance, TabInstanceParameters } from './interfaces';\nimport { runtime } from './runtime';\n\n/**\n * Navigation-specific part of the SDK.\n */\nexport namespace pages {\n  /** Callback function */\n  type handlerFunctionType = () => void;\n  /** Full screen function */\n  type fullScreenChangeFunctionType = (isFullScreen: boolean) => void;\n  /** Back button handler function */\n  type backButtonHandlerFunctionType = () => boolean;\n  /** Save event function */\n  type saveEventType = (evt: pages.config.SaveEvent) => void;\n  /** Remove event function */\n  type removeEventType = (evt: pages.config.RemoveEvent) => void;\n\n  /**\n   * Return focus to the host. Will move focus forward or backward based on where the application container falls in\n   * the F6/tab order in the host.\n   * On mobile hosts or hosts where there is no keyboard interaction or UI notion of \"focus\" this function has no\n   * effect and will be a no-op when called.\n   * @param navigateForward - Determines the direction to focus in host.\n   */\n  export function returnFocus(navigateForward?: boolean): void {\n    ensureInitialized(runtime);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    sendMessageToParent('returnFocus', [navigateForward]);\n  }\n\n  /**\n   * @hidden\n   *\n   * Registers a handler for specifying focus when it passes from the host to the application.\n   * On mobile hosts or hosts where there is no UI notion of \"focus\" the handler registered with\n   * this function will never be called.\n   *\n   * @param handler - The handler for placing focus within the application.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function registerFocusEnterHandler(handler: (navigateForward: boolean) => void): void {\n    registerHandlerHelper('focusEnter', handler, [], () => {\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n    });\n  }\n\n  /**\n   * Sets/Updates the current frame with new information\n   *\n   * @param frameInfo - Frame information containing the URL used in the iframe on reload and the URL for when the\n   * user clicks 'Go To Website'\n   */\n  export function setCurrentFrame(frameInfo: FrameInfo): void {\n    ensureInitialized(runtime, FrameContexts.content);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    sendMessageToParent('setFrameContext', [frameInfo]);\n  }\n\n  /**\n   * Initializes the library with context information for the frame\n   *\n   * @param frameInfo - Frame information containing the URL used in the iframe on reload and the URL for when the\n   *  user clicks 'Go To Website'\n   * @param callback - An optional callback that is executed once the application has finished initialization.\n   * @param validMessageOrigins - An optional list of cross-frame message origins. They must have\n   * https: protocol otherwise they will be ignored. Example: https:www.example.com\n   */\n  export function initializeWithFrameContext(\n    frameInfo: FrameInfo,\n    callback?: handlerFunctionType,\n    validMessageOrigins?: string[],\n  ): void {\n    app.initialize(validMessageOrigins).then(() => callback && callback());\n    setCurrentFrame(frameInfo);\n  }\n\n  /**\n   * Defines the configuration of the current or desired instance\n   */\n  export interface InstanceConfig {\n    /**\n     * A suggested display name for the new content.\n     * In the settings for an existing instance being updated, this call has no effect.\n     */\n    suggestedDisplayName?: string;\n    /**\n     * Sets the URL to use for the content of this instance.\n     */\n    contentUrl: string;\n    /**\n     * Sets the URL for the removal configuration experience.\n     */\n    removeUrl?: string;\n    /**\n     * Sets the URL to use for the external link to view the underlying resource in a browser.\n     */\n    websiteUrl?: string;\n    /**\n     * The developer-defined unique ID for the entity to which this content points.\n     */\n    entityId?: string;\n  }\n\n  /**\n   * Gets the config for the current instance.\n   * @returns Promise that resolves with the {@link InstanceConfig} object.\n   */\n  export function getConfig(): Promise<InstanceConfig> {\n    return new Promise<InstanceConfig>((resolve) => {\n      ensureInitialized(\n        runtime,\n        FrameContexts.content,\n        FrameContexts.settings,\n        FrameContexts.remove,\n        FrameContexts.sidePanel,\n      );\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      resolve(sendAndUnwrap('settings.getSettings'));\n    });\n  }\n\n  /**\n   * Navigates the frame to a new cross-domain URL. The domain of this URL must match at least one of the\n   * valid domains specified in the validDomains block of the manifest; otherwise, an exception will be\n   * thrown. This function needs to be used only when navigating the frame to a URL in a different domain\n   * than the current one in a way that keeps the application informed of the change and allows the SDK to\n   * continue working.\n   * @param url - The URL to navigate the frame to.\n   * @returns Promise that resolves when the navigation has completed.\n   */\n  export function navigateCrossDomain(url: string): Promise<void> {\n    return new Promise<void>((resolve) => {\n      ensureInitialized(\n        runtime,\n        FrameContexts.content,\n        FrameContexts.sidePanel,\n        FrameContexts.settings,\n        FrameContexts.remove,\n        FrameContexts.task,\n        FrameContexts.stage,\n        FrameContexts.meetingStage,\n      );\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      const errorMessage =\n        'Cross-origin navigation is only supported for URLs matching the pattern registered in the manifest.';\n      resolve(sendAndHandleStatusAndReasonWithDefaultError('navigateCrossDomain', errorMessage, url));\n    });\n  }\n\n  /**\n   * Navigate to the given application ID and page ID, with optional parameters for a WebURL (if the application\n   * cannot be navigated to, such as if it is not installed), Channel ID (for applications installed as a channel tab),\n   * and sub-page ID (for navigating to specific content within the page). This is equivalent to navigating to\n   * a deep link with the above data, but does not require the application to build a URL or worry about different\n   * deep link formats for different hosts.\n   * @param params - Parameters for the navigation\n   * @returns a promise that will resolve if the navigation was successful\n   */\n  export function navigateToApp(params: NavigateToAppParams): Promise<void> {\n    return new Promise<void>((resolve) => {\n      ensureInitialized(\n        runtime,\n        FrameContexts.content,\n        FrameContexts.sidePanel,\n        FrameContexts.settings,\n        FrameContexts.task,\n        FrameContexts.stage,\n        FrameContexts.meetingStage,\n      );\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      if (runtime.isLegacyTeams) {\n        resolve(sendAndHandleStatusAndReason('executeDeepLink', createTeamsAppLink(params)));\n      } else {\n        resolve(sendAndHandleStatusAndReason('pages.navigateToApp', params));\n      }\n    });\n  }\n\n  /**\n   * Shares a deep link that a user can use to navigate back to a specific state in this page.\n   * Please note that this method does not yet work on mobile hosts.\n   *\n   * @param deepLinkParameters - ID and label for the link and fallback URL.\n   */\n  export function shareDeepLink(deepLinkParameters: ShareDeepLinkParameters): void {\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.sidePanel, FrameContexts.meetingStage);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    sendMessageToParent('shareDeepLink', [\n      deepLinkParameters.subPageId,\n      deepLinkParameters.subPageLabel,\n      deepLinkParameters.subPageWebUrl,\n    ]);\n  }\n\n  /**\n   * Registers a handler for changes from or to full-screen view for a tab.\n   * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n   * On hosts where there is no support for making an app full screen, the handler registered\n   * with this function will never be called.\n   * @param handler - The handler to invoke when the user toggles full-screen view for a tab.\n   */\n  export function registerFullScreenHandler(handler: fullScreenChangeFunctionType): void {\n    registerHandlerHelper('fullScreenChange', handler, [], () => {\n      if (handler && !isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n    });\n  }\n\n  /**\n   * Checks if the pages capability is supported by the host\n   * @returns boolean to represent whether the appEntity capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.pages ? true : false;\n  }\n\n  /**\n   * Parameters for the NavigateToApp API\n   */\n  export interface NavigateToAppParams {\n    /**\n     * ID of the application to navigate to\n     */\n    appId: string;\n\n    /**\n     * Developer-defined ID of the Page to navigate to within the application (Formerly EntityID)\n     */\n    pageId: string;\n\n    /**\n     * Optional URL to open if the navigation cannot be completed within the host\n     */\n    webUrl?: string;\n\n    /**\n     * Optional developer-defined ID describing the content to navigate to within the Page. This will be passed\n     * back to the application via the Context object.\n     */\n    subPageId?: string;\n\n    /**\n     * Optional ID of the Teams Channel where the application should be opened\n     */\n    channelId?: string;\n  }\n\n  /**\n   * Provides APIs for querying and navigating between contextual tabs of an application. Unlike personal tabs,\n   * contextual tabs are pages associated with a specific context, such as channel or chat.\n   */\n  export namespace tabs {\n    /**\n     * Navigates the hosted application to the specified tab instance.\n     * @param tabInstance - The destination tab instance.\n     * @returns Promise that resolves when the navigation has completed.\n     */\n    export function navigateToTab(tabInstance: TabInstance): Promise<void> {\n      return new Promise<void>((resolve) => {\n        ensureInitialized(runtime);\n        if (!isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n        const errorMessage = 'Invalid internalTabInstanceId and/or channelId were/was provided';\n        resolve(sendAndHandleStatusAndReasonWithDefaultError('navigateToTab', errorMessage, tabInstance));\n      });\n    }\n    /**\n     * Retrieves application tabs for the current user.\n     * If no TabInstanceParameters are passed, the application defaults to favorite teams and favorite channels.\n     * @param tabInstanceParameters - An optional set of flags that specify whether to scope call to favorite teams or channels.\n     * @returns Promise that resolves with the {@link TabInformation}. Contains information for the user's tabs that are owned by this application {@link TabInstance}.\n     */\n    export function getTabInstances(tabInstanceParameters?: TabInstanceParameters): Promise<TabInformation> {\n      return new Promise<TabInformation>((resolve) => {\n        ensureInitialized(runtime);\n        if (!isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n        /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n        resolve(sendAndUnwrap('getTabInstances', tabInstanceParameters));\n      });\n    }\n\n    /**\n     * Retrieves the most recently used application tabs for the current user.\n     * @param tabInstanceParameters - An optional set of flags. Note this is currently ignored and kept for future use.\n     * @returns Promise that resolves with the {@link TabInformation}. Contains information for the users' most recently used tabs {@link TabInstance}.\n     */\n    export function getMruTabInstances(tabInstanceParameters?: TabInstanceParameters): Promise<TabInformation> {\n      return new Promise<TabInformation>((resolve) => {\n        ensureInitialized(runtime);\n        if (!isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n        /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n        resolve(sendAndUnwrap('getMruTabInstances', tabInstanceParameters));\n      });\n    }\n\n    /**\n     * Checks if the pages.tab capability is supported by the host\n     * @returns boolean to represent whether the pages.tab capability is supported\n     *\n     * @throws Error if {@linkcode app.initialize} has not successfully completed\n     */\n    export function isSupported(): boolean {\n      return ensureInitialized(runtime) && runtime.supports.pages\n        ? runtime.supports.pages.tabs\n          ? true\n          : false\n        : false;\n    }\n  }\n  /**\n   * Provides APIs to interact with the configuration-specific part of the SDK.\n   * This object is usable only on the configuration frame.\n   */\n  export namespace config {\n    let saveHandler: undefined | ((evt: SaveEvent) => void);\n    let removeHandler: undefined | ((evt: RemoveEvent) => void);\n\n    /**\n     * @hidden\n     * Hide from docs because this function is only used during initialization\n     *\n     * Adds register handlers for settings.save and settings.remove upon initialization. Function is called in {@link app.initializeHelper}\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    export function initialize(): void {\n      registerHandler('settings.save', handleSave, false);\n      registerHandler('settings.remove', handleRemove, false);\n    }\n\n    /**\n     * Sets the validity state for the configuration.\n     * The initial value is false, so the user cannot save the configuration until this is called with true.\n     * @param validityState - Indicates whether the save or remove button is enabled for the user.\n     */\n    export function setValidityState(validityState: boolean): void {\n      ensureInitialized(runtime, FrameContexts.settings, FrameContexts.remove);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      sendMessageToParent('settings.setValidityState', [validityState]);\n    }\n\n    /**\n     * Sets the configuration for the current instance.\n     * This is an asynchronous operation; calls to getConfig are not guaranteed to reflect the changed state.\n     * @param instanceConfig - The desired configuration for this instance.\n     * @returns Promise that resolves when the operation has completed.\n     */\n    export function setConfig(instanceConfig: InstanceConfig): Promise<void> {\n      return new Promise<void>((resolve) => {\n        ensureInitialized(runtime, FrameContexts.content, FrameContexts.settings, FrameContexts.sidePanel);\n        if (!isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n        resolve(sendAndHandleStatusAndReason('settings.setSettings', instanceConfig));\n      });\n    }\n\n    /**\n     * Registers a handler for when the user attempts to save the configuration. This handler should be used\n     * to create or update the underlying resource powering the content.\n     * The object passed to the handler must be used to notify whether to proceed with the save.\n     * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n     * @param handler - The handler to invoke when the user selects the Save button.\n     */\n    export function registerOnSaveHandler(handler: saveEventType): void {\n      registerOnSaveHandlerHelper(handler, () => {\n        if (handler && !isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n      });\n    }\n\n    /**\n     * @hidden\n     * Undocumented helper function with shared code between deprecated version and current version of the registerOnSaveHandler API.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     *\n     * @param handler - The handler to invoke when the user selects the Save button.\n     * @param versionSpecificHelper - The helper function containing logic pertaining to a specific version of the API.\n     */\n    export function registerOnSaveHandlerHelper(\n      handler: (evt: SaveEvent) => void,\n      versionSpecificHelper?: () => void,\n    ): void {\n      // allow for registration cleanup even when not finished initializing\n      handler && ensureInitialized(runtime, FrameContexts.settings);\n      if (versionSpecificHelper) {\n        versionSpecificHelper();\n      }\n      saveHandler = handler;\n      handler && sendMessageToParent('registerHandler', ['save']);\n    }\n\n    /**\n     * Registers a handler for user attempts to remove content. This handler should be used\n     * to remove the underlying resource powering the content.\n     * The object passed to the handler must be used to indicate whether to proceed with the removal.\n     * Only one handler may be registered at a time. Subsequent registrations will override the first.\n     * @param handler - The handler to invoke when the user selects the Remove button.\n     */\n    export function registerOnRemoveHandler(handler: removeEventType): void {\n      registerOnRemoveHandlerHelper(handler, () => {\n        if (handler && !isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n      });\n    }\n\n    /**\n     * @hidden\n     * Undocumented helper function with shared code between deprecated version and current version of the registerOnRemoveHandler API.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     *\n     * @param handler - The handler to invoke when the user selects the Remove button.\n     * @param versionSpecificHelper - The helper function containing logic pertaining to a specific version of the API.\n     */\n    export function registerOnRemoveHandlerHelper(\n      handler: (evt: RemoveEvent) => void,\n      versionSpecificHelper?: () => void,\n    ): void {\n      // allow for registration cleanup even when not finished initializing\n      handler && ensureInitialized(runtime, FrameContexts.remove, FrameContexts.settings);\n      if (versionSpecificHelper) {\n        versionSpecificHelper();\n      }\n      removeHandler = handler;\n      handler && sendMessageToParent('registerHandler', ['remove']);\n    }\n\n    function handleSave(result?: SaveParameters): void {\n      const saveEventType = new SaveEventImpl(result);\n      if (saveHandler) {\n        saveHandler(saveEventType);\n      } else if (Communication.childWindow) {\n        sendMessageEventToChild('settings.save', [result]);\n      } else {\n        // If no handler is registered, we assume success.\n        saveEventType.notifySuccess();\n      }\n    }\n\n    /**\n     * Registers a handler for when the tab configuration is changed by the user\n     * @param handler - The handler to invoke when the user clicks on Settings.\n     */\n    export function registerChangeConfigHandler(handler: handlerFunctionType): void {\n      registerHandlerHelper('changeSettings', handler, [FrameContexts.content], () => {\n        if (!isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n      });\n    }\n\n    /**\n     * Describes the results of the settings.save event. Includes result, notifySuccess, and notifyFailure\n     * to indicate the return object (result) and the status of whether the settings.save call succeeded or not and why.\n     */\n    export interface SaveEvent {\n      /**\n       * Object containing properties passed as arguments to the settings.save event.\n       */\n      result: SaveParameters;\n      /**\n       * Indicates that the underlying resource has been created and the config can be saved.\n       */\n      notifySuccess(): void;\n      /**\n       * Indicates that creation of the underlying resource failed and that the config cannot be saved.\n       * @param reason - Specifies a reason for the failure. If provided, this string is displayed to the user; otherwise a generic error is displayed.\n       */\n      notifyFailure(reason?: string): void;\n    }\n\n    /**\n     * Describes the results of the settings.remove event. Includes notifySuccess, and notifyFailure\n     * to indicate the status of whether the settings.save call succeeded or not and why.\n     */\n    export interface RemoveEvent {\n      /**\n       * Indicates that the underlying resource has been removed and the content can be removed.\n       */\n      notifySuccess(): void;\n      /**\n       * Indicates that removal of the underlying resource failed and that the content cannot be removed.\n       * @param reason - Specifies a reason for the failure. If provided, this string is displayed to the user; otherwise a generic error is displayed.\n       */\n      notifyFailure(reason?: string): void;\n    }\n\n    /**\n     * Parameters used in the settings.save event\n     */\n    export interface SaveParameters {\n      /**\n       * Connector's webhook Url returned as arguments to settings.save event as part of user clicking on Save\n       */\n      webhookUrl?: string;\n    }\n\n    /**\n     * @hidden\n     * Hide from docs, since this class is not directly used.\n     */\n    class SaveEventImpl implements SaveEvent {\n      public notified = false;\n      public result: SaveParameters;\n      public constructor(result?: SaveParameters) {\n        this.result = result ? result : {};\n      }\n      public notifySuccess(): void {\n        this.ensureNotNotified();\n        sendMessageToParent('settings.save.success');\n        this.notified = true;\n      }\n      public notifyFailure(reason?: string): void {\n        this.ensureNotNotified();\n        sendMessageToParent('settings.save.failure', [reason]);\n        this.notified = true;\n      }\n      private ensureNotNotified(): void {\n        if (this.notified) {\n          throw new Error('The SaveEvent may only notify success or failure once.');\n        }\n      }\n    }\n\n    function handleRemove(): void {\n      const removeEventType = new RemoveEventImpl();\n      if (removeHandler) {\n        removeHandler(removeEventType);\n      } else if (Communication.childWindow) {\n        sendMessageEventToChild('settings.remove', []);\n      } else {\n        // If no handler is registered, we assume success.\n        removeEventType.notifySuccess();\n      }\n    }\n\n    /**\n     * @hidden\n     * Hide from docs, since this class is not directly used.\n     */\n    class RemoveEventImpl implements RemoveEvent {\n      public notified = false;\n\n      public notifySuccess(): void {\n        this.ensureNotNotified();\n        sendMessageToParent('settings.remove.success');\n        this.notified = true;\n      }\n\n      public notifyFailure(reason?: string): void {\n        this.ensureNotNotified();\n        sendMessageToParent('settings.remove.failure', [reason]);\n        this.notified = true;\n      }\n\n      private ensureNotNotified(): void {\n        if (this.notified) {\n          throw new Error('The removeEventType may only notify success or failure once.');\n        }\n      }\n    }\n\n    /**\n     * Checks if the pages.config capability is supported by the host\n     * @returns boolean to represent whether the pages.config capability is supported\n     *\n     * @throws Error if {@linkcode app.initialize} has not successfully completed\n     */\n    export function isSupported(): boolean {\n      return ensureInitialized(runtime) && runtime.supports.pages\n        ? runtime.supports.pages.config\n          ? true\n          : false\n        : false;\n    }\n  }\n\n  /**\n   * Provides APIs for handling the user's navigational history.\n   */\n  export namespace backStack {\n    let backButtonPressHandler: (() => boolean) | undefined;\n\n    /**\n     * @hidden\n     * Register backButtonPress handler.\n     *\n     * @internal\n     * Limited to Microsoft-internal use.\n     */\n    export function _initialize(): void {\n      registerHandler('backButtonPress', handleBackButtonPress, false);\n    }\n\n    /**\n     * Navigates back in the hosted application. See {@link pages.backStack.registerBackButtonHandler} for notes on usage.\n     * @returns Promise that resolves when the navigation has completed.\n     */\n    export function navigateBack(): Promise<void> {\n      return new Promise<void>((resolve) => {\n        ensureInitialized(runtime);\n        if (!isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n        const errorMessage = 'Back navigation is not supported in the current client or context.';\n        resolve(sendAndHandleStatusAndReasonWithDefaultError('navigateBack', errorMessage));\n      });\n    }\n\n    /**\n     * Registers a handler for user presses of the host client's back button. Experiences that maintain an internal\n     * navigation stack should use this handler to navigate the user back within their frame. If an application finds\n     * that after running its back button handler it cannot handle the event it should call the navigateBack\n     * method to ask the host client to handle it instead.\n     * @param handler - The handler to invoke when the user presses the host client's back button.\n     */\n    export function registerBackButtonHandler(handler: backButtonHandlerFunctionType): void {\n      registerBackButtonHandlerHelper(handler, () => {\n        if (handler && !isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n      });\n    }\n\n    /**\n     * @hidden\n     * Undocumented helper function with shared code between deprecated version and current version of the registerBackButtonHandler API.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     *\n     * @param handler - The handler to invoke when the user presses the host client's back button.\n     * @param versionSpecificHelper - The helper function containing logic pertaining to a specific version of the API.\n     */\n    export function registerBackButtonHandlerHelper(handler: () => boolean, versionSpecificHelper?: () => void): void {\n      // allow for registration cleanup even when not finished initializing\n      handler && ensureInitialized(runtime);\n      if (versionSpecificHelper) {\n        versionSpecificHelper();\n      }\n      backButtonPressHandler = handler;\n      handler && sendMessageToParent('registerHandler', ['backButton']);\n    }\n\n    function handleBackButtonPress(): void {\n      if (!backButtonPressHandler || !backButtonPressHandler()) {\n        if (Communication.childWindow) {\n          // If the current window did not handle it let the child window\n          sendMessageEventToChild('backButtonPress', []);\n        } else {\n          navigateBack();\n        }\n      }\n    }\n\n    /**\n     * Checks if the pages.backStack capability is supported by the host\n     * @returns boolean to represent whether the pages.backStack capability is supported\n     *\n     * @throws Error if {@linkcode app.initialize} has not successfully completed\n     */\n    export function isSupported(): boolean {\n      return ensureInitialized(runtime) && runtime.supports.pages\n        ? runtime.supports.pages.backStack\n          ? true\n          : false\n        : false;\n    }\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   * ------\n   * Provides APIs to interact with the full-trust part of the SDK. Limited to 1P applications\n   */\n  export namespace fullTrust {\n    /**\n     * @hidden\n     * Hide from docs\n     * ------\n     * Place the tab into full-screen mode.\n     */\n    export function enterFullscreen(): void {\n      ensureInitialized(runtime, FrameContexts.content);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      sendMessageToParent('enterFullscreen', []);\n    }\n\n    /**\n     * @hidden\n     * Hide from docs\n     * ------\n     * Reverts the tab into normal-screen mode.\n     */\n    export function exitFullscreen(): void {\n      ensureInitialized(runtime, FrameContexts.content);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      sendMessageToParent('exitFullscreen', []);\n    }\n    /**\n     * @hidden\n     *\n     * Checks if the pages.fullTrust capability is supported by the host\n     * @returns boolean to represent whether the pages.fullTrust capability is supported\n     *\n     * @throws Error if {@linkcode app.initialize} has not successfully completed\n     */\n    export function isSupported(): boolean {\n      return ensureInitialized(runtime) && runtime.supports.pages\n        ? runtime.supports.pages.fullTrust\n          ? true\n          : false\n        : false;\n    }\n  }\n\n  /**\n   * Provides APIs to interact with the app button part of the SDK.\n   */\n  export namespace appButton {\n    /**\n     * Registers a handler for clicking the app button.\n     * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n     * @param handler - The handler to invoke when the personal app button is clicked in the app bar.\n     */\n    export function onClick(handler: handlerFunctionType): void {\n      registerHandlerHelper('appButtonClick', handler, [FrameContexts.content], () => {\n        if (!isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n      });\n    }\n\n    /**\n     * Registers a handler for entering hover of the app button.\n     * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n     * @param handler - The handler to invoke when entering hover of the personal app button in the app bar.\n     */\n    export function onHoverEnter(handler: handlerFunctionType): void {\n      registerHandlerHelper('appButtonHoverEnter', handler, [FrameContexts.content], () => {\n        if (!isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n      });\n    }\n\n    /**\n     * Registers a handler for exiting hover of the app button.\n     * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n     * @param handler - The handler to invoke when exiting hover of the personal app button in the app bar.\n     */\n    export function onHoverLeave(handler: handlerFunctionType): void {\n      registerHandlerHelper('appButtonHoverLeave', handler, [FrameContexts.content], () => {\n        if (!isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n      });\n    }\n\n    /**\n     * Checks if pages.appButton capability is supported by the host\n     * @returns boolean to represent whether the pages.appButton capability is supported\n     *\n     * @throws Error if {@linkcode app.initialize} has not successfully completed\n     */\n    export function isSupported(): boolean {\n      return ensureInitialized(runtime) && runtime.supports.pages\n        ? runtime.supports.pages.appButton\n          ? true\n          : false\n        : false;\n    }\n  }\n\n  /**\n   * Provides functions for navigating without needing to specify your application ID.\n   *\n   * @beta\n   */\n  export namespace currentApp {\n    /**\n     * Parameters for the NavigateWithinApp\n     *\n     * @beta\n     */\n    export interface NavigateWithinAppParams {\n      /**\n       * The developer-defined unique ID for the page defined in the manifest or when first configuring\n       * the page. (Known as {@linkcode Context.entityId} prior to TeamsJS v.2.0.0)\n       */\n      pageId: string;\n\n      /**\n       * Optional developer-defined unique ID describing the content to navigate to within the page. This\n       * can be retrieved from the Context object {@link app.PageInfo.subPageId | app.Context.page.subPageId}\n       */\n      subPageId?: string;\n    }\n\n    /**\n     * Navigate within the currently running application with page ID, and sub-page ID (for navigating to\n     * specific content within the page).\n     * @param params - Parameters for the navigation\n     * @returns a promise that will resolve if the navigation was successful\n     *\n     * @beta\n     */\n    export function navigateTo(params: NavigateWithinAppParams): Promise<void> {\n      return new Promise<void>((resolve) => {\n        ensureInitialized(\n          runtime,\n          FrameContexts.content,\n          FrameContexts.sidePanel,\n          FrameContexts.settings,\n          FrameContexts.task,\n          FrameContexts.stage,\n          FrameContexts.meetingStage,\n        );\n        if (!isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n        resolve(sendAndHandleSdkError('pages.currentApp.navigateTo', params));\n      });\n    }\n\n    /**\n     * Navigate to the currently running application's first static page defined in the application\n     * manifest.\n     * @beta\n     */\n    export function navigateToDefaultPage(): Promise<void> {\n      return new Promise<void>((resolve) => {\n        ensureInitialized(\n          runtime,\n          FrameContexts.content,\n          FrameContexts.sidePanel,\n          FrameContexts.settings,\n          FrameContexts.task,\n          FrameContexts.stage,\n          FrameContexts.meetingStage,\n        );\n        if (!isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n        resolve(sendAndHandleSdkError('pages.currentApp.navigateToDefaultPage'));\n      });\n    }\n\n    /**\n     * Checks if pages.currentApp capability is supported by the host\n     * @returns boolean to represent whether the pages.currentApp capability is supported\n     *\n     * @throws Error if {@linkcode app.initialize} has not successfully completed\n     *\n     * @beta\n     */\n    export function isSupported(): boolean {\n      return ensureInitialized(runtime) && runtime.supports.pages\n        ? runtime.supports.pages.currentApp\n          ? true\n          : false\n        : false;\n    }\n  }\n}\n","// This assignment is replaced at build time by a webpack plugin (or Jest during unit tests) which ensures the value matches the version set in the package version\ndeclare const PACKAGE_VERSION = 'ERROR: This value should be replaced by webpack!';\n/**\n * @hidden\n *  Package version.\n */\nexport const version = PACKAGE_VERSION;\n","import { HostClientType } from '../public/constants';\nimport { ErrorCode, SdkError } from '../public/interfaces';\nimport { IBaseRuntime, isRuntimeInitialized, Runtime } from '../public/runtime';\nimport {\n  defaultSDKVersionForCompatCheck,\n  errorLibraryNotInitialized,\n  userOriginUrlValidationRegExp,\n} from './constants';\nimport { GlobalVars } from './globalVars';\nimport { getLogger } from './telemetry';\nimport { compareSDKVersions } from './utils';\n\nconst internalLogger = getLogger('internal');\nconst ensureInitializeCalledLogger = internalLogger.extend('ensureInitializeCalled');\nconst ensureInitializedLogger = internalLogger.extend('ensureInitialized');\n\n/**\n * Ensures `initialize` was called. This function does NOT verify that a response from Host was received and initialization completed.\n *\n * `ensureInitializeCalled` should only be used for APIs which:\n * - work in all FrameContexts\n * - are part of a required Capability\n * - are suspected to be used directly after calling `initialize`, potentially without awaiting the `initialize` call itself\n *\n * For most APIs {@link ensureInitialized} is the right validation function to use instead.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function ensureInitializeCalled(): void {\n  if (!GlobalVars.initializeCalled) {\n    ensureInitializeCalledLogger(errorLibraryNotInitialized);\n    throw new Error(errorLibraryNotInitialized);\n  }\n}\n\n/**\n * Ensures `initialize` was called and response from Host was received and processed and that `runtime` is initialized.\n * If expected FrameContexts are provided, it also validates that the current FrameContext matches one of the expected ones.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function ensureInitialized(runtime: IBaseRuntime, ...expectedFrameContexts: string[]): runtime is Runtime {\n  // This global var can potentially be removed in the future if we use the initialization status of the runtime object as our source of truth\n  if (!GlobalVars.initializeCompleted) {\n    ensureInitializedLogger(\n      '%s. initializeCalled: %s',\n      errorLibraryNotInitialized,\n      GlobalVars.initializeCalled.toString(),\n    );\n    throw new Error(errorLibraryNotInitialized);\n  }\n\n  if (expectedFrameContexts && expectedFrameContexts.length > 0) {\n    let found = false;\n    for (let i = 0; i < expectedFrameContexts.length; i++) {\n      if (expectedFrameContexts[i] === GlobalVars.frameContext) {\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      throw new Error(\n        `This call is only allowed in following contexts: ${JSON.stringify(expectedFrameContexts)}. ` +\n          `Current context: \"${GlobalVars.frameContext}\".`,\n      );\n    }\n  }\n  return isRuntimeInitialized(runtime);\n}\n\n/**\n * @hidden\n * Checks whether the platform has knowledge of this API by doing a comparison\n * on API required version and platform supported version of the SDK\n *\n * @param requiredVersion - SDK version required by the API\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function isCurrentSDKVersionAtLeast(requiredVersion: string = defaultSDKVersionForCompatCheck): boolean {\n  const value = compareSDKVersions(GlobalVars.clientSupportedSDKVersion, requiredVersion);\n  if (isNaN(value)) {\n    return false;\n  }\n  return value >= 0;\n}\n\n/**\n * @hidden\n * Helper function to identify if host client is either android, ios, or ipados\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function isHostClientMobile(): boolean {\n  return (\n    GlobalVars.hostClientType == HostClientType.android ||\n    GlobalVars.hostClientType == HostClientType.ios ||\n    GlobalVars.hostClientType == HostClientType.ipados\n  );\n}\n\n/**\n * @hidden\n * Helper function which indicates if current API is supported on mobile or not.\n * @throws SdkError if host client is not android/ios or if the requiredVersion is not\n *          supported by platform or not. Null is returned in case of success.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function throwExceptionIfMobileApiIsNotSupported(\n  requiredVersion: string = defaultSDKVersionForCompatCheck,\n): void {\n  if (!isHostClientMobile()) {\n    const notSupportedError: SdkError = { errorCode: ErrorCode.NOT_SUPPORTED_ON_PLATFORM };\n    throw notSupportedError;\n  } else if (!isCurrentSDKVersionAtLeast(requiredVersion)) {\n    const oldPlatformError: SdkError = { errorCode: ErrorCode.OLD_PLATFORM };\n    throw oldPlatformError;\n  }\n}\n\n/**\n * @hidden\n * Processes the valid origins specifuied by the user, de-duplicates and converts them into a regexp\n * which is used later for message source/origin validation\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function processAdditionalValidOrigins(validMessageOrigins: string[]): void {\n  let combinedOriginUrls = GlobalVars.additionalValidOrigins.concat(\n    validMessageOrigins.filter((_origin: string) => {\n      return typeof _origin === 'string' && userOriginUrlValidationRegExp.test(_origin);\n    }),\n  );\n  const dedupUrls: { [url: string]: boolean } = {};\n  combinedOriginUrls = combinedOriginUrls.filter((_originUrl) => {\n    if (dedupUrls[_originUrl]) {\n      return false;\n    }\n    dedupUrls[_originUrl] = true;\n    return true;\n  });\n  GlobalVars.additionalValidOrigins = combinedOriginUrls;\n}\n","/* eslint-disable @typescript-eslint/ban-types */\n\nimport { FrameContexts, LoadContext } from '../public';\nimport { pages } from '../public/pages';\nimport { runtime } from '../public/runtime';\nimport { Communication, sendMessageEventToChild, sendMessageToParent } from './communication';\nimport { ensureInitialized } from './internalAPIs';\nimport { getLogger } from './telemetry';\n\nconst handlersLogger = getLogger('handlers');\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nclass HandlersPrivate {\n  public static handlers: {\n    [func: string]: Function;\n  } = {};\n  public static themeChangeHandler: (theme: string) => void;\n  public static loadHandler: (context: LoadContext) => void;\n  public static beforeUnloadHandler: (readyToUnload: () => void) => boolean;\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function initializeHandlers(): void {\n  // ::::::::::::::::::::MicrosoftTeams SDK Internal :::::::::::::::::\n  HandlersPrivate.handlers['themeChange'] = handleThemeChange;\n  HandlersPrivate.handlers['load'] = handleLoad;\n  HandlersPrivate.handlers['beforeUnload'] = handleBeforeUnload;\n  pages.backStack._initialize();\n}\n\nconst callHandlerLogger = handlersLogger.extend('callHandler');\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function callHandler(name: string, args?: unknown[]): [true, unknown] | [false, undefined] {\n  const handler = HandlersPrivate.handlers[name];\n  if (handler) {\n    callHandlerLogger('Invoking the registered handler for message %s with arguments %o', name, args);\n    const result = handler.apply(this, args);\n    return [true, result];\n  } else if (Communication.childWindow) {\n    sendMessageEventToChild(name, args);\n    return [false, undefined];\n  } else {\n    callHandlerLogger('Handler for action message %s not found.', name);\n    return [false, undefined];\n  }\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function registerHandler(name: string, handler: Function, sendMessage = true, args: unknown[] = []): void {\n  if (handler) {\n    HandlersPrivate.handlers[name] = handler;\n    sendMessage && sendMessageToParent('registerHandler', [name, ...args]);\n  } else {\n    delete HandlersPrivate.handlers[name];\n  }\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function removeHandler(name: string): void {\n  delete HandlersPrivate.handlers[name];\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function doesHandlerExist(name: string): boolean {\n  return HandlersPrivate.handlers[name] != null;\n}\n\n/**\n * @hidden\n * Undocumented helper function with shared code between deprecated version and current version of register*Handler APIs\n *\n * @internal\n * Limited to Microsoft-internal use\n *\n * @param name - The name of the handler to register.\n * @param handler - The handler to invoke.\n * @param contexts - The context within which it is valid to register this handler.\n * @param registrationHelper - The helper function containing logic pertaining to a specific version of the API.\n */\nexport function registerHandlerHelper(\n  name: string,\n  handler: Function,\n  contexts: FrameContexts[],\n  registrationHelper?: () => void,\n): void {\n  // allow for registration cleanup even when not finished initializing\n  handler && ensureInitialized(runtime, ...contexts);\n  if (registrationHelper) {\n    registrationHelper();\n  }\n\n  registerHandler(name, handler);\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function registerOnThemeChangeHandler(handler: (theme: string) => void): void {\n  HandlersPrivate.themeChangeHandler = handler;\n  handler && sendMessageToParent('registerHandler', ['themeChange']);\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function handleThemeChange(theme: string): void {\n  if (HandlersPrivate.themeChangeHandler) {\n    HandlersPrivate.themeChangeHandler(theme);\n  }\n\n  if (Communication.childWindow) {\n    sendMessageEventToChild('themeChange', [theme]);\n  }\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function registerOnLoadHandler(handler: (context: LoadContext) => void): void {\n  HandlersPrivate.loadHandler = handler;\n  handler && sendMessageToParent('registerHandler', ['load']);\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction handleLoad(context: LoadContext): void {\n  if (HandlersPrivate.loadHandler) {\n    HandlersPrivate.loadHandler(context);\n  }\n\n  if (Communication.childWindow) {\n    sendMessageEventToChild('load', [context]);\n  }\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function registerBeforeUnloadHandler(handler: (readyToUnload: () => void) => boolean): void {\n  HandlersPrivate.beforeUnloadHandler = handler;\n  handler && sendMessageToParent('registerHandler', ['beforeUnload']);\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction handleBeforeUnload(): void {\n  const readyToUnload = (): void => {\n    sendMessageToParent('readyToUnload', []);\n  };\n\n  if (!HandlersPrivate.beforeUnloadHandler || !HandlersPrivate.beforeUnloadHandler(readyToUnload)) {\n    if (Communication.childWindow) {\n      sendMessageEventToChild('beforeUnload');\n    } else {\n      readyToUnload();\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { FrameContexts } from '../public/constants';\nimport { SdkError } from '../public/interfaces';\nimport { latestRuntimeApiVersion } from '../public/runtime';\nimport { version } from '../public/version';\nimport { GlobalVars } from './globalVars';\nimport { callHandler } from './handlers';\nimport { DOMMessageEvent, ExtendedWindow, MessageRequest, MessageResponse } from './interfaces';\nimport { getLogger } from './telemetry';\nimport { ssrSafeWindow, validateOrigin } from './utils';\n\nconst communicationLogger = getLogger('communication');\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport class Communication {\n  public static currentWindow: Window | any;\n  public static parentOrigin: string;\n  public static parentWindow: Window | any;\n  public static childWindow: Window;\n  public static childOrigin: string;\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nclass CommunicationPrivate {\n  public static parentMessageQueue: MessageRequest[] = [];\n  public static childMessageQueue: MessageRequest[] = [];\n  public static nextMessageId = 0;\n  public static callbacks: {\n    [id: number]: Function; // (arg1, arg2, ...etc) => void\n  } = {};\n  public static promiseCallbacks: {\n    [id: number]: Function; // (args[]) => void\n  } = {};\n  public static messageListener: Function;\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\ninterface InitializeResponse {\n  context: FrameContexts;\n  clientType: string;\n  runtimeConfig: string;\n  clientSupportedSDKVersion: string;\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function initializeCommunication(validMessageOrigins: string[] | undefined): Promise<InitializeResponse> {\n  // Listen for messages post to our window\n  CommunicationPrivate.messageListener = (evt: DOMMessageEvent): void => processMessage(evt);\n\n  // If we are in an iframe, our parent window is the one hosting us (i.e., window.parent); otherwise,\n  // it's the window that opened us (i.e., window.opener)\n  Communication.currentWindow = Communication.currentWindow || ssrSafeWindow();\n  Communication.parentWindow =\n    Communication.currentWindow.parent !== Communication.currentWindow.self\n      ? Communication.currentWindow.parent\n      : Communication.currentWindow.opener;\n\n  // Listen to messages from the parent or child frame.\n  // Frameless windows will only receive this event from child frames and if validMessageOrigins is passed.\n  if (Communication.parentWindow || validMessageOrigins) {\n    Communication.currentWindow.addEventListener('message', CommunicationPrivate.messageListener, false);\n  }\n\n  if (!Communication.parentWindow) {\n    const extendedWindow = Communication.currentWindow as unknown as ExtendedWindow;\n    if (extendedWindow.nativeInterface) {\n      GlobalVars.isFramelessWindow = true;\n      extendedWindow.onNativeMessage = handleParentMessage;\n    } else {\n      // at this point we weren't able to find a parent to talk to, no way initialization will succeed\n      return Promise.reject(new Error('Initialization Failed. No Parent window found.'));\n    }\n  }\n\n  try {\n    // Send the initialized message to any origin, because at this point we most likely don't know the origin\n    // of the parent window, and this message contains no data that could pose a security risk.\n    Communication.parentOrigin = '*';\n    return sendMessageToParentAsync<[FrameContexts, string, string, string]>('initialize', [\n      version,\n      latestRuntimeApiVersion,\n    ]).then(\n      ([context, clientType, runtimeConfig, clientSupportedSDKVersion]: [FrameContexts, string, string, string]) => {\n        return { context, clientType, runtimeConfig, clientSupportedSDKVersion };\n      },\n    );\n  } finally {\n    Communication.parentOrigin = null;\n  }\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function uninitializeCommunication(): void {\n  if (Communication.currentWindow) {\n    Communication.currentWindow.removeEventListener('message', CommunicationPrivate.messageListener, false);\n  }\n\n  Communication.currentWindow = null;\n  Communication.parentWindow = null;\n  Communication.parentOrigin = null;\n  Communication.childWindow = null;\n  Communication.childOrigin = null;\n  CommunicationPrivate.parentMessageQueue = [];\n  CommunicationPrivate.childMessageQueue = [];\n  CommunicationPrivate.nextMessageId = 0;\n  CommunicationPrivate.callbacks = {};\n  CommunicationPrivate.promiseCallbacks = {};\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function sendAndUnwrap<T>(actionName: string, ...args: any[]): Promise<T> {\n  return sendMessageToParentAsync(actionName, args).then(([result]: [T]) => result);\n}\n\nexport function sendAndHandleStatusAndReason(actionName: string, ...args: any[]): Promise<void> {\n  return sendMessageToParentAsync(actionName, args).then(([wasSuccessful, reason]: [boolean, string]) => {\n    if (!wasSuccessful) {\n      throw new Error(reason);\n    }\n  });\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function sendAndHandleStatusAndReasonWithDefaultError(\n  actionName: string,\n  defaultError: string,\n  ...args: any[]\n): Promise<void> {\n  return sendMessageToParentAsync(actionName, args).then(([wasSuccessful, reason]: [boolean, string]) => {\n    if (!wasSuccessful) {\n      throw new Error(reason ? reason : defaultError);\n    }\n  });\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function sendAndHandleSdkError<T>(actionName: string, ...args: any[]): Promise<T> {\n  return sendMessageToParentAsync(actionName, args).then(([error, result]: [SdkError, T]) => {\n    if (error) {\n      throw error;\n    }\n    return result;\n  });\n}\n\n/**\n * @hidden\n * Send a message to parent. Uses nativeInterface on mobile to communicate with parent context\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function sendMessageToParentAsync<T>(actionName: string, args: any[] = undefined): Promise<T> {\n  return new Promise((resolve) => {\n    const request = sendMessageToParentHelper(actionName, args);\n    /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n    resolve(waitForResponse<T>(request.id));\n  });\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction waitForResponse<T>(requestId: number): Promise<T> {\n  return new Promise<T>((resolve) => {\n    CommunicationPrivate.promiseCallbacks[requestId] = resolve;\n  });\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function sendMessageToParent(actionName: string, callback?: Function): void;\n\n/**\n * @hidden\n * Send a message to parent. Uses nativeInterface on mobile to communicate with parent context\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function sendMessageToParent(actionName: string, args: any[], callback?: Function): void;\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function sendMessageToParent(actionName: string, argsOrCallback?: any[] | Function, callback?: Function): void {\n  let args: any[] | undefined;\n  if (argsOrCallback instanceof Function) {\n    callback = argsOrCallback;\n  } else if (argsOrCallback instanceof Array) {\n    args = argsOrCallback;\n  }\n\n  /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n  const request = sendMessageToParentHelper(actionName, args);\n  if (callback) {\n    CommunicationPrivate.callbacks[request.id] = callback;\n  }\n}\n\nconst sendMessageToParentHelperLogger = communicationLogger.extend('sendMessageToParentHelper');\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction sendMessageToParentHelper(actionName: string, args: any[]): MessageRequest {\n  const logger = sendMessageToParentHelperLogger;\n\n  const targetWindow = Communication.parentWindow;\n  const request = createMessageRequest(actionName, args);\n\n  /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n  logger('Message %i information: %o', request.id, { actionName, args });\n\n  if (GlobalVars.isFramelessWindow) {\n    if (Communication.currentWindow && Communication.currentWindow.nativeInterface) {\n      /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n      logger('Sending message %i to parent via framelessPostMessage interface', request.id);\n      (Communication.currentWindow as ExtendedWindow).nativeInterface.framelessPostMessage(JSON.stringify(request));\n    }\n  } else {\n    const targetOrigin = getTargetOrigin(targetWindow);\n\n    // If the target window isn't closed and we already know its origin, send the message right away; otherwise,\n    // queue the message and send it after the origin is established\n    if (targetWindow && targetOrigin) {\n      /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n      logger('Sending message %i to parent via postMessage', request.id);\n      targetWindow.postMessage(request, targetOrigin);\n    } else {\n      /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n      logger('Adding message %i to parent message queue', request.id);\n      getTargetMessageQueue(targetWindow).push(request);\n    }\n  }\n  return request;\n}\n\nconst processMessageLogger = communicationLogger.extend('processMessage');\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction processMessage(evt: DOMMessageEvent): void {\n  // Process only if we received a valid message\n  if (!evt || !evt.data || typeof evt.data !== 'object') {\n    processMessageLogger('Unrecognized message format received by app, message being ignored. Message: %o', evt);\n    return;\n  }\n\n  // Process only if the message is coming from a different window and a valid origin\n  // valid origins are either a pre-known origin or one specified by the app developer\n  // in their call to app.initialize\n  const messageSource = evt.source || (evt.originalEvent && evt.originalEvent.source);\n  const messageOrigin = evt.origin || (evt.originalEvent && evt.originalEvent.origin);\n  if (!shouldProcessMessage(messageSource, messageOrigin)) {\n    processMessageLogger(\n      'Message being ignored by app because it is either coming from the current window or a different window with an invalid origin',\n    );\n    return;\n  }\n\n  // Update our parent and child relationships based on this message\n  updateRelationships(messageSource, messageOrigin);\n\n  // Handle the message\n  if (messageSource === Communication.parentWindow) {\n    handleParentMessage(evt);\n  } else if (messageSource === Communication.childWindow) {\n    handleChildMessage(evt);\n  }\n}\n\nconst shouldProcessMessageLogger = communicationLogger.extend('shouldProcessMessage');\n\n/**\n * @hidden\n * Validates the message source and origin, if it should be processed\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction shouldProcessMessage(messageSource: Window, messageOrigin: string): boolean {\n  // Process if message source is a different window and if origin is either in\n  // Teams' pre-known whitelist or supplied as valid origin by user during initialization\n  if (Communication.currentWindow && messageSource === Communication.currentWindow) {\n    shouldProcessMessageLogger('Should not process message because it is coming from the current window');\n    return false;\n  } else if (\n    Communication.currentWindow &&\n    Communication.currentWindow.location &&\n    messageOrigin &&\n    messageOrigin === Communication.currentWindow.location.origin\n  ) {\n    return true;\n  } else {\n    const isOriginValid = validateOrigin(new URL(messageOrigin));\n    if (!isOriginValid) {\n      shouldProcessMessageLogger('Message has an invalid origin of %s', messageOrigin);\n    }\n    return isOriginValid;\n  }\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction updateRelationships(messageSource: Window, messageOrigin: string): void {\n  // Determine whether the source of the message is our parent or child and update our\n  // window and origin pointer accordingly\n  // For frameless windows (i.e mobile), there is no parent frame, so the message must be from the child.\n  if (\n    !GlobalVars.isFramelessWindow &&\n    (!Communication.parentWindow || Communication.parentWindow.closed || messageSource === Communication.parentWindow)\n  ) {\n    Communication.parentWindow = messageSource;\n    Communication.parentOrigin = messageOrigin;\n  } else if (\n    !Communication.childWindow ||\n    Communication.childWindow.closed ||\n    messageSource === Communication.childWindow\n  ) {\n    Communication.childWindow = messageSource;\n    Communication.childOrigin = messageOrigin;\n  }\n\n  // Clean up pointers to closed parent and child windows\n  if (Communication.parentWindow && Communication.parentWindow.closed) {\n    Communication.parentWindow = null;\n    Communication.parentOrigin = null;\n  }\n  if (Communication.childWindow && Communication.childWindow.closed) {\n    Communication.childWindow = null;\n    Communication.childOrigin = null;\n  }\n\n  // If we have any messages in our queue, send them now\n  flushMessageQueue(Communication.parentWindow);\n  flushMessageQueue(Communication.childWindow);\n}\n\nconst handleParentMessageLogger = communicationLogger.extend('handleParentMessage');\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction handleParentMessage(evt: DOMMessageEvent): void {\n  const logger = handleParentMessageLogger;\n\n  if ('id' in evt.data && typeof evt.data.id === 'number') {\n    // Call any associated Communication.callbacks\n    const message = evt.data as MessageResponse;\n    const callback = CommunicationPrivate.callbacks[message.id];\n    logger('Received a response from parent for message %i', message.id);\n    if (callback) {\n      logger('Invoking the registered callback for message %i with arguments %o', message.id, message.args);\n      callback.apply(null, [...message.args, message.isPartialResponse]);\n\n      // Remove the callback to ensure that the callback is called only once and to free up memory if response is a complete response\n      if (!isPartialResponse(evt)) {\n        logger('Removing registered callback for message %i', message.id);\n        delete CommunicationPrivate.callbacks[message.id];\n      }\n    }\n    const promiseCallback = CommunicationPrivate.promiseCallbacks[message.id];\n    if (promiseCallback) {\n      logger('Invoking the registered promise callback for message %i with arguments %o', message.id, message.args);\n      promiseCallback(message.args);\n\n      logger('Removing registered promise callback for message %i', message.id);\n      delete CommunicationPrivate.promiseCallbacks[message.id];\n    }\n  } else if ('func' in evt.data && typeof evt.data.func === 'string') {\n    // Delegate the request to the proper handler\n    const message = evt.data as MessageRequest;\n    logger('Received an action message %s from parent', message.func);\n    callHandler(message.func, message.args);\n  } else {\n    logger('Received an unknown message: %O', evt);\n  }\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction isPartialResponse(evt: DOMMessageEvent): boolean {\n  return evt.data.isPartialResponse === true;\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction handleChildMessage(evt: DOMMessageEvent): void {\n  if ('id' in evt.data && 'func' in evt.data) {\n    // Try to delegate the request to the proper handler, if defined\n    const message = evt.data as MessageRequest;\n    const [called, result] = callHandler(message.func, message.args);\n    if (called && typeof result !== 'undefined') {\n      /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n      sendMessageResponseToChild(message.id, Array.isArray(result) ? result : [result]);\n    } else {\n      // No handler, proxy to parent\n      sendMessageToParent(message.func, message.args, (...args: any[]): void => {\n        if (Communication.childWindow) {\n          const isPartialResponse = args.pop();\n          /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n          sendMessageResponseToChild(message.id, args, isPartialResponse);\n        }\n      });\n    }\n  }\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction getTargetMessageQueue(targetWindow: Window): MessageRequest[] {\n  return targetWindow === Communication.parentWindow\n    ? CommunicationPrivate.parentMessageQueue\n    : targetWindow === Communication.childWindow\n    ? CommunicationPrivate.childMessageQueue\n    : [];\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction getTargetOrigin(targetWindow: Window): string {\n  return targetWindow === Communication.parentWindow\n    ? Communication.parentOrigin\n    : targetWindow === Communication.childWindow\n    ? Communication.childOrigin\n    : null;\n}\n\nconst flushMessageQueueLogger = communicationLogger.extend('flushMessageQueue');\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction flushMessageQueue(targetWindow: Window | any): void {\n  const targetOrigin = getTargetOrigin(targetWindow);\n  const targetMessageQueue = getTargetMessageQueue(targetWindow);\n  const target = targetWindow == Communication.parentWindow ? 'parent' : 'child';\n  while (targetWindow && targetOrigin && targetMessageQueue.length > 0) {\n    const request = targetMessageQueue.shift();\n    /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n    flushMessageQueueLogger('Flushing message %i from ' + target + ' message queue via postMessage.', request.id);\n    targetWindow.postMessage(request, targetOrigin);\n  }\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function waitForMessageQueue(targetWindow: Window, callback: () => void): void {\n  const messageQueueMonitor = Communication.currentWindow.setInterval(() => {\n    if (getTargetMessageQueue(targetWindow).length === 0) {\n      clearInterval(messageQueueMonitor);\n      callback();\n    }\n  }, 100);\n}\n\n/**\n * @hidden\n * Send a response to child for a message request that was from child\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction sendMessageResponseToChild(id: number, args?: any[], isPartialResponse?: boolean): void {\n  const targetWindow = Communication.childWindow;\n  /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n  const response = createMessageResponse(id, args, isPartialResponse);\n  const targetOrigin = getTargetOrigin(targetWindow);\n  if (targetWindow && targetOrigin) {\n    targetWindow.postMessage(response, targetOrigin);\n  }\n}\n\n/**\n * @hidden\n * Send a custom message object that can be sent to child window,\n * instead of a response message to a child\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function sendMessageEventToChild(actionName: string, args?: any[]): void {\n  const targetWindow = Communication.childWindow;\n  /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n  const customEvent = createMessageEvent(actionName, args);\n  const targetOrigin = getTargetOrigin(targetWindow);\n\n  // If the target window isn't closed and we already know its origin, send the message right away; otherwise,\n  // queue the message and send it after the origin is established\n  if (targetWindow && targetOrigin) {\n    targetWindow.postMessage(customEvent, targetOrigin);\n  } else {\n    getTargetMessageQueue(targetWindow).push(customEvent);\n  }\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction createMessageRequest(func: string, args: any[]): MessageRequest {\n  return {\n    id: CommunicationPrivate.nextMessageId++,\n    func: func,\n    timestamp: Date.now(),\n    args: args || [],\n  };\n}\n\n/**\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction createMessageResponse(id: number, args: any[], isPartialResponse: boolean): MessageResponse {\n  return {\n    id: id,\n    args: args || [],\n    isPartialResponse,\n  };\n}\n\n/**\n * @hidden\n * Creates a message object without any id, used for custom actions being sent to child frame/window\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction createMessageEvent(func: string, args: any[]): MessageRequest {\n  return {\n    func: func,\n    args: args || [],\n  };\n}\n","import { sendMessageToParent } from '../internal/communication';\nimport { registerHandler, removeHandler } from '../internal/handlers';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { errorNotSupportedOnPlatform } from '../public/constants';\nimport { runtime } from '../public/runtime';\n\n/**\n * @hidden\n * Namespace to interact with the logging part of the SDK.\n * This object is used to send the app logs on demand to the host client\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport namespace logs {\n  /**\n   * @hidden\n   *\n   * Registers a handler for getting app log\n   *\n   * @param handler - The handler to invoke to get the app log\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function registerGetLogHandler(handler: () => string): void {\n    // allow for registration cleanup even when not finished initializing\n    handler && ensureInitialized(runtime);\n    if (handler && !isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n\n    if (handler) {\n      registerHandler('log.request', () => {\n        const log: string = handler();\n        sendMessageToParent('log.receive', [log]);\n      });\n    } else {\n      removeHandler('log.request');\n    }\n  }\n\n  /**\n   * @hidden\n   *\n   * Checks if the logs capability is supported by the host\n   * @returns boolean to represent whether the logs capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.logs ? true : false;\n  }\n}\n","import { FileOpenPreference, TeamInformation } from '../public/interfaces';\n\n/**\n * @hidden\n *\n * Information about all members in a chat\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport interface ChatMembersInformation {\n  members: ThreadMember[];\n}\n\n/**\n * @hidden\n *\n * Information about a chat member\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport interface ThreadMember {\n  /**\n   * @hidden\n   * The member's user principal name in the current tenant.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  upn: string;\n}\n\n/**\n * @hidden\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport enum NotificationTypes {\n  fileDownloadStart = 'fileDownloadStart',\n  fileDownloadComplete = 'fileDownloadComplete',\n}\n\n/**\n * @hidden\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport interface ShowNotificationParameters {\n  message: string;\n  notificationType: NotificationTypes;\n}\n\n/**\n * @hidden\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport enum ViewerActionTypes {\n  view = 'view',\n  edit = 'edit',\n  editNew = 'editNew',\n}\n\n/**\n * @hidden\n *\n * User setting changes that can be subscribed to\n */\nexport enum UserSettingTypes {\n  /**\n   * @hidden\n   * Use this key to subscribe to changes in user's file open preference\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  fileOpenPreference = 'fileOpenPreference',\n  /**\n   * @hidden\n   * Use this key to subscribe to theme changes\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  theme = 'theme',\n}\n\n/**\n * @hidden\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport interface FilePreviewParameters {\n  /**\n   * @hidden\n   * The developer-defined unique ID for the file.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  entityId?: string;\n\n  /**\n   * @hidden\n   * The display name of the file.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  title?: string;\n\n  /**\n   * @hidden\n   * An optional description of the file.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  description?: string;\n\n  /**\n   * @hidden\n   * The file extension; e.g. pptx, docx, etc.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  type: string;\n\n  /**\n   * @hidden\n   * A url to the source of the file, used to open the content in the user's default browser\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  objectUrl: string;\n\n  /**\n   * @hidden\n   * Optional; an alternate self-authenticating url used to preview the file in Mobile clients and offer it for download by the user\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  downloadUrl?: string;\n\n  /**\n   * @hidden\n   * Optional; an alternate url optimized for previewing the file in web and desktop clients\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  webPreviewUrl?: string;\n\n  /**\n   * @hidden\n   * Optional; an alternate url that allows editing of the file in web and desktop clients\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  webEditUrl?: string;\n\n  /**\n   * @hidden\n   * Optional; the base url of the site where the file is hosted\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  baseUrl?: string;\n\n  /**\n   * @hidden\n   * Deprecated; prefer using {@linkcode viewerAction} instead\n   * Optional; indicates whether the file should be opened in edit mode\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  editFile?: boolean;\n\n  /**\n   * @hidden\n   * Optional; the developer-defined unique ID for the sub-entity to return to when the file stage closes.\n   * This field should be used to restore to a specific state within an entity, such as scrolling to or activating a specific piece of content.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  subEntityId?: string;\n\n  /**\n   * @hidden\n   * Optional; indicates the mode in which file should be opened. Takes precedence over edit mode.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  viewerAction?: ViewerActionTypes;\n\n  /**\n   * @hidden\n   * Optional; indicates how user prefers to open the file\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  fileOpenPreference?: FileOpenPreference;\n\n  /**\n   * @hidden\n   * Optional; id required to enable conversation button in files. Will be channel id in case file is shared in a channel or the chat id in p2p chat case.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  conversationId?: string;\n}\n\n/**\n * @hidden\n *\n * Query parameters used when fetching team information\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport interface TeamInstanceParameters {\n  /**\n   * @hidden\n   * Flag allowing to select favorite teams only\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  favoriteTeamsOnly?: boolean;\n}\n\n/**\n * @hidden\n *\n * Information on userJoined Teams\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport interface UserJoinedTeamsInformation {\n  /**\n   * @hidden\n   * List of team information\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  userJoinedTeams: TeamInformation[];\n}\n","import { sendAndHandleStatusAndReason, sendAndUnwrap, sendMessageToParent } from '../internal/communication';\nimport { registerHandler, removeHandler } from '../internal/handlers';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { errorNotSupportedOnPlatform, FrameContexts } from '../public/constants';\nimport { runtime } from '../public/runtime';\nimport { ChatMembersInformation } from './interfaces';\n\n/**\n * @hidden\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport interface OpenConversationRequest {\n  /**\n   * @hidden\n   * The Id of the subEntity where the conversation is taking place\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  subEntityId: string;\n\n  /**\n   * @hidden\n   * The title of the conversation\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  title: string;\n\n  /**\n   * @hidden\n   * The Id of the conversation. This is optional and should be specified whenever a previous conversation about a specific sub-entity has already been started before\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  conversationId?: string;\n\n  /**\n   * @hidden\n   * The Id of the channel. This is optional and should be specified whenever a conversation is started or opened in a personal app scope\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  channelId?: string;\n\n  /**\n   * @hidden\n   * The entity Id of the tab\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  entityId: string;\n\n  /**\n   * @hidden\n   * A function that is called once the conversation Id has been created\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  onStartConversation?: (conversationResponse: ConversationResponse) => void;\n\n  /**\n   * @hidden\n   * A function that is called if the pane is closed\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  onCloseConversation?: (conversationResponse: ConversationResponse) => void;\n}\n\n/**\n * @hidden\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport interface ConversationResponse {\n  /**\n   * @hidden\n   *\n   * Limited to Microsoft-internal use\n   * The Id of the subEntity where the conversation is taking place\n   */\n  subEntityId: string;\n\n  /**\n   * @hidden\n   * The Id of the conversation. This is optional and should be specified whenever a previous conversation about a specific sub-entity has already been started before\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  conversationId?: string;\n\n  /**\n   * @hidden\n   * The Id of the channel. This is optional and should be specified whenever a conversation is started or opened in a personal app scope\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  channelId?: string;\n\n  /**\n   * @hidden\n   * The entity Id of the tab\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  entityId?: string;\n}\n\n/**\n * @hidden\n * Namespace to interact with the conversational subEntities inside the tab\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport namespace conversations {\n  /**\n   * @hidden\n   * Hide from docs\n   * --------------\n   * Allows the user to start or continue a conversation with each subentity inside the tab\n   *\n   * @returns Promise resolved upon completion\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function openConversation(openConversationRequest: OpenConversationRequest): Promise<void> {\n    return new Promise<void>((resolve) => {\n      ensureInitialized(runtime, FrameContexts.content);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      const sendPromise = sendAndHandleStatusAndReason('conversations.openConversation', {\n        title: openConversationRequest.title,\n        subEntityId: openConversationRequest.subEntityId,\n        conversationId: openConversationRequest.conversationId,\n        channelId: openConversationRequest.channelId,\n        entityId: openConversationRequest.entityId,\n      });\n      if (openConversationRequest.onStartConversation) {\n        registerHandler(\n          'startConversation',\n          (subEntityId: string, conversationId: string, channelId: string, entityId: string) =>\n            openConversationRequest.onStartConversation({\n              subEntityId,\n              conversationId,\n              channelId,\n              entityId,\n            }),\n        );\n      }\n      if (openConversationRequest.onCloseConversation) {\n        registerHandler(\n          'closeConversation',\n          (subEntityId: string, conversationId?: string, channelId?: string, entityId?: string) =>\n            openConversationRequest.onCloseConversation({\n              subEntityId,\n              conversationId,\n              channelId,\n              entityId,\n            }),\n        );\n      }\n      resolve(sendPromise);\n    });\n  }\n\n  /**\n   * @hidden\n   *\n   * Allows the user to close the conversation in the right pane\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function closeConversation(): void {\n    ensureInitialized(runtime, FrameContexts.content);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    sendMessageToParent('conversations.closeConversation');\n    removeHandler('startConversation');\n    removeHandler('closeConversation');\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   * ------\n   * Allows retrieval of information for all chat members.\n   * NOTE: This value should be used only as a hint as to who the members are\n   * and never as proof of membership in case your app is being hosted by a malicious party.\n   *\n   * @returns Promise resolved with information on all chat members\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function getChatMembers(): Promise<ChatMembersInformation> {\n    return new Promise<ChatMembersInformation>((resolve) => {\n      ensureInitialized(runtime);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      resolve(sendAndUnwrap('getChatMembers'));\n    });\n  }\n\n  /**\n   * Checks if the conversations capability is supported by the host\n   * @returns boolean to represent whether conversations capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.conversations ? true : false;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Communication, sendMessageEventToChild, sendMessageToParent } from '../internal/communication';\nimport { registerHandler } from '../internal/handlers';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { getGenericOnCompleteHandler } from '../internal/utils';\nimport { FrameContexts } from '../public/constants';\nimport { runtime } from '../public/runtime';\nimport { FilePreviewParameters, UserSettingTypes } from './interfaces';\n\n/**\n * @hidden\n * Upload a custom App manifest directly to both team and personal scopes.\n * This method works just for the first party Apps.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function uploadCustomApp(manifestBlob: Blob, onComplete?: (status: boolean, reason?: string) => void): void {\n  ensureInitialized(runtime);\n\n  sendMessageToParent('uploadCustomApp', [manifestBlob], onComplete ? onComplete : getGenericOnCompleteHandler());\n}\n\n/**\n * @hidden\n * Sends a custom action MessageRequest to host or parent window\n *\n * @param actionName - Specifies name of the custom action to be sent\n * @param args - Specifies additional arguments passed to the action\n * @param callback - Optionally specify a callback to receive response parameters from the parent\n * @returns id of sent message\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function sendCustomMessage(actionName: string, args?: any[], callback?: (...args: any[]) => void): void {\n  ensureInitialized(runtime);\n\n  sendMessageToParent(actionName, args, callback);\n}\n\n/**\n * @hidden\n * Sends a custom action MessageEvent to a child iframe/window, only if you are not using auth popup.\n * Otherwise it will go to the auth popup (which becomes the child)\n *\n * @param actionName - Specifies name of the custom action to be sent\n * @param args - Specifies additional arguments passed to the action\n * @returns id of sent message\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function sendCustomEvent(actionName: string, args?: any[]): void {\n  ensureInitialized(runtime);\n\n  //validate childWindow\n  if (!Communication.childWindow) {\n    throw new Error('The child window has not yet been initialized or is not present');\n  }\n  sendMessageEventToChild(actionName, args);\n}\n\n/**\n * @hidden\n * Adds a handler for an action sent by a child window or parent window\n *\n * @param actionName - Specifies name of the action message to handle\n * @param customHandler - The callback to invoke when the action message is received. The return value is sent to the child\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function registerCustomHandler(actionName: string, customHandler: (...args: any[]) => any[]): void {\n  ensureInitialized(runtime);\n  registerHandler(actionName, (...args: any[]) => {\n    return customHandler.apply(this, args);\n  });\n}\n\n/**\n * @hidden\n * register a handler to be called when a user setting changes. The changed setting type & value is provided in the callback.\n *\n * @param settingTypes - List of user setting changes to subscribe\n * @param handler - When a subscribed setting is updated this handler is called\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function registerUserSettingsChangeHandler(\n  settingTypes: UserSettingTypes[],\n  handler: (settingType: UserSettingTypes, value: any) => void,\n): void {\n  ensureInitialized(runtime);\n\n  registerHandler('userSettingsChange', handler, true, [settingTypes]);\n}\n\n/**\n * @hidden\n * Opens a client-friendly preview of the specified file.\n *\n * @param file - The file to preview.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function openFilePreview(filePreviewParameters: FilePreviewParameters): void {\n  ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n\n  const params = [\n    filePreviewParameters.entityId,\n    filePreviewParameters.title,\n    filePreviewParameters.description,\n    filePreviewParameters.type,\n    filePreviewParameters.objectUrl,\n    filePreviewParameters.downloadUrl,\n    filePreviewParameters.webPreviewUrl,\n    filePreviewParameters.webEditUrl,\n    filePreviewParameters.baseUrl,\n    filePreviewParameters.editFile,\n    filePreviewParameters.subEntityId,\n    filePreviewParameters.viewerAction,\n    filePreviewParameters.fileOpenPreference,\n    filePreviewParameters.conversationId,\n  ];\n\n  sendMessageToParent('openFilePreview', params);\n}\n","/**\n * App install dialog constants\n */\nexport const teamsDeepLinkUrlPathForAppInstall = '/l/app/';\n\n/**\n * Calendar constants\n */\nexport const teamsDeepLinkUrlPathForCalendar = '/l/meeting/new';\nexport const teamsDeepLinkAttendeesUrlParameterName = 'attendees';\nexport const teamsDeepLinkStartTimeUrlParameterName = 'startTime';\nexport const teamsDeepLinkEndTimeUrlParameterName = 'endTime';\nexport const teamsDeepLinkSubjectUrlParameterName = 'subject';\nexport const teamsDeepLinkContentUrlParameterName = 'content';\n\n/**\n * Call constants\n */\nexport const teamsDeepLinkUrlPathForCall = '/l/call/0/0';\nexport const teamsDeepLinkSourceUrlParameterName = 'source';\nexport const teamsDeepLinkWithVideoUrlParameterName = 'withVideo';\n\n/**\n * Chat constants\n */\nexport const teamsDeepLinkUrlPathForChat = '/l/chat/0/0';\nexport const teamsDeepLinkUsersUrlParameterName = 'users';\nexport const teamsDeepLinkTopicUrlParameterName = 'topicName';\nexport const teamsDeepLinkMessageUrlParameterName = 'message';\n","import { sendMessageToParent } from '../internal/communication';\nimport { sendAndHandleStatusAndReason } from '../internal/communication';\nimport { createTeamsDeepLinkForAppInstallDialog } from '../internal/deepLinkUtilities';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { FrameContexts } from './constants';\nimport { runtime } from './runtime';\n\nexport namespace appInstallDialog {\n  /** Represents set of parameters needed to open the appInstallDialog. */\n  export interface OpenAppInstallDialogParams {\n    /** A unique identifier for the app being installed. */\n    appId: string;\n  }\n\n  /**\n   * Displays a dialog box that allows users to install a specific app within the host environment.\n   *\n   * @param openAPPInstallDialogParams - See {@link OpenAppInstallDialogParams | OpenAppInstallDialogParams} for more information.\n   */\n  export function openAppInstallDialog(openAPPInstallDialogParams: OpenAppInstallDialogParams): Promise<void> {\n    return new Promise((resolve) => {\n      ensureInitialized(\n        runtime,\n        FrameContexts.content,\n        FrameContexts.sidePanel,\n        FrameContexts.settings,\n        FrameContexts.task,\n        FrameContexts.stage,\n        FrameContexts.meetingStage,\n      );\n      if (!isSupported()) {\n        throw new Error('Not supported');\n      }\n      if (runtime.isLegacyTeams) {\n        resolve(\n          sendAndHandleStatusAndReason(\n            'executeDeepLink',\n            createTeamsDeepLinkForAppInstallDialog(openAPPInstallDialogParams.appId),\n          ),\n        );\n      } else {\n        sendMessageToParent('appInstallDialog.openAppInstallDialog', [openAPPInstallDialogParams]);\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * Checks if the appInstallDialog capability is supported by the host\n   * @returns boolean to represent whether the appInstallDialog capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.appInstallDialog ? true : false;\n  }\n}\n","import { teamsDeepLinkHost, teamsDeepLinkProtocol } from './constants';\nimport {\n  teamsDeepLinkAttendeesUrlParameterName,\n  teamsDeepLinkContentUrlParameterName,\n  teamsDeepLinkEndTimeUrlParameterName,\n  teamsDeepLinkMessageUrlParameterName,\n  teamsDeepLinkSourceUrlParameterName,\n  teamsDeepLinkStartTimeUrlParameterName,\n  teamsDeepLinkSubjectUrlParameterName,\n  teamsDeepLinkTopicUrlParameterName,\n  teamsDeepLinkUrlPathForAppInstall,\n  teamsDeepLinkUrlPathForCalendar,\n  teamsDeepLinkUrlPathForCall,\n  teamsDeepLinkUrlPathForChat,\n  teamsDeepLinkUsersUrlParameterName,\n  teamsDeepLinkWithVideoUrlParameterName,\n} from './deepLinkConstants';\n\nexport function createTeamsDeepLinkForChat(users: string[], topic?: string, message?: string): string {\n  if (users.length === 0) {\n    throw new Error('Must have at least one user when creating a chat deep link');\n  }\n\n  const usersSearchParameter =\n    `${teamsDeepLinkUsersUrlParameterName}=` + users.map((user) => encodeURIComponent(user)).join(',');\n  const topicSearchParameter =\n    topic === undefined ? '' : `&${teamsDeepLinkTopicUrlParameterName}=${encodeURIComponent(topic)}`;\n  const messageSearchParameter =\n    message === undefined ? '' : `&${teamsDeepLinkMessageUrlParameterName}=${encodeURIComponent(message)}`;\n\n  return `${teamsDeepLinkProtocol}://${teamsDeepLinkHost}${teamsDeepLinkUrlPathForChat}?${usersSearchParameter}${topicSearchParameter}${messageSearchParameter}`;\n}\n\nexport function createTeamsDeepLinkForCall(targets: string[], withVideo?: boolean, source?: string): string {\n  if (targets.length === 0) {\n    throw new Error('Must have at least one target when creating a call deep link');\n  }\n  const usersSearchParameter =\n    `${teamsDeepLinkUsersUrlParameterName}=` + targets.map((user) => encodeURIComponent(user)).join(',');\n  const withVideoSearchParameter =\n    withVideo === undefined ? '' : `&${teamsDeepLinkWithVideoUrlParameterName}=${encodeURIComponent(withVideo)}`;\n  const sourceSearchParameter =\n    source === undefined ? '' : `&${teamsDeepLinkSourceUrlParameterName}=${encodeURIComponent(source)}`;\n\n  return `${teamsDeepLinkProtocol}://${teamsDeepLinkHost}${teamsDeepLinkUrlPathForCall}?${usersSearchParameter}${withVideoSearchParameter}${sourceSearchParameter}`;\n}\n\nexport function createTeamsDeepLinkForCalendar(\n  attendees?: string[],\n  startTime?: string,\n  endTime?: string,\n  subject?: string,\n  content?: string,\n): string {\n  const attendeeSearchParameter =\n    attendees === undefined\n      ? ''\n      : `${teamsDeepLinkAttendeesUrlParameterName}=` +\n        attendees.map((attendee) => encodeURIComponent(attendee)).join(',');\n  const startTimeSearchParameter =\n    startTime === undefined ? '' : `&${teamsDeepLinkStartTimeUrlParameterName}=${encodeURIComponent(startTime)}`;\n  const endTimeSearchParameter =\n    endTime === undefined ? '' : `&${teamsDeepLinkEndTimeUrlParameterName}=${encodeURIComponent(endTime)}`;\n  const subjectSearchParameter =\n    subject === undefined ? '' : `&${teamsDeepLinkSubjectUrlParameterName}=${encodeURIComponent(subject)}`;\n  const contentSearchParameter =\n    content === undefined ? '' : `&${teamsDeepLinkContentUrlParameterName}=${encodeURIComponent(content)}`;\n\n  return `${teamsDeepLinkProtocol}://${teamsDeepLinkHost}${teamsDeepLinkUrlPathForCalendar}?${attendeeSearchParameter}${startTimeSearchParameter}${endTimeSearchParameter}${subjectSearchParameter}${contentSearchParameter}`;\n}\n\nexport function createTeamsDeepLinkForAppInstallDialog(appId: string): string {\n  if (!appId) {\n    throw new Error('App ID must be set when creating an app install dialog deep link');\n  }\n  return `${teamsDeepLinkProtocol}://${teamsDeepLinkHost}${teamsDeepLinkUrlPathForAppInstall}${encodeURIComponent(\n    appId,\n  )}`;\n}\n","/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n\nimport { sendAndHandleSdkError, sendMessageToParent } from '../internal/communication';\nimport {\n  captureImageMobileSupportVersion,\n  getMediaCallbackSupportVersion,\n  mediaAPISupportVersion,\n  nonFullScreenVideoModeAPISupportVersion,\n  scanBarCodeAPIMobileSupportVersion,\n} from '../internal/constants';\nimport { GlobalVars } from '../internal/globalVars';\nimport { registerHandler, removeHandler } from '../internal/handlers';\nimport {\n  ensureInitialized,\n  isCurrentSDKVersionAtLeast,\n  throwExceptionIfMobileApiIsNotSupported,\n} from '../internal/internalAPIs';\nimport {\n  createFile,\n  decodeAttachment,\n  isVideoControllerRegistered,\n  throwExceptionIfMediaCallIsNotSupportedOnMobile,\n  validateGetMediaInputs,\n  validateScanBarCodeInput,\n  validateSelectMediaInputs,\n  validateViewImagesInput,\n} from '../internal/mediaUtil';\nimport { generateGUID } from '../internal/utils';\nimport { errorNotSupportedOnPlatform, FrameContexts, HostClientType } from './constants';\nimport { DevicePermission, ErrorCode, SdkError } from './interfaces';\nimport { runtime } from './runtime';\n\n/**\n * Interact with media, including capturing and viewing images.\n */\nexport namespace media {\n  /** Capture image callback function type. */\n  type captureImageCallbackFunctionType = (error: SdkError, files: File[]) => void;\n  /** Select media callback function type. */\n  type selectMediaCallbackFunctionType = (error: SdkError, attachments: Media[]) => void;\n  /** Error callback function type. */\n  type errorCallbackFunctionType = (error?: SdkError) => void;\n  /** Scan BarCode callback function type. */\n  type scanBarCodeCallbackFunctionType = (error: SdkError, decodedText: string) => void;\n  /** Get media callback function type. */\n  type getMediaCallbackFunctionType = (error: SdkError, blob: Blob) => void;\n\n  /**\n   * Enum for file formats supported\n   */\n  export enum FileFormat {\n    /** Base64 encoding */\n    Base64 = 'base64',\n    /** File id */\n    ID = 'id',\n  }\n\n  /**\n   * File object that can be used to represent image or video or audio\n   */\n  export class File {\n    /**\n     * Content of the file. When format is Base64, this is the base64 content\n     * When format is ID, this is id mapping to the URI\n     * When format is base64 and app needs to use this directly in HTML tags, it should convert this to dataUrl.\n     */\n    public content: string;\n\n    /**\n     * Format of the content\n     */\n    public format: FileFormat;\n\n    /**\n     * Size of the file in KB\n     */\n    public size: number;\n\n    /**\n     * MIME type. This can be used for constructing a dataUrl, if needed.\n     */\n    public mimeType: string;\n\n    /**\n     * Optional: Name of the file\n     */\n    public name?: string;\n  }\n\n  /**\n   * Launch camera, capture image or choose image from gallery and return the images as a File[] object to the callback.\n   *\n   * @params callback - Callback will be called with an @see SdkError if there are any.\n   * If error is null or undefined, the callback will be called with a collection of @see File objects\n   * @remarks\n   * Note: Currently we support getting one File through this API, i.e. the file arrays size will be one.\n   * Note: For desktop, this API is not supported. Callback will be resolved with ErrorCode.NotSupported.\n   *\n   */\n  export function captureImage(callback: captureImageCallbackFunctionType): void {\n    if (!callback) {\n      throw new Error('[captureImage] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n\n    if (!GlobalVars.isFramelessWindow) {\n      const notSupportedError: SdkError = { errorCode: ErrorCode.NOT_SUPPORTED_ON_PLATFORM };\n      /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n      callback(notSupportedError, undefined);\n      return;\n    }\n\n    if (!isCurrentSDKVersionAtLeast(captureImageMobileSupportVersion)) {\n      const oldPlatformError: SdkError = { errorCode: ErrorCode.OLD_PLATFORM };\n      /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n      callback(oldPlatformError, undefined);\n      return;\n    }\n\n    sendMessageToParent('captureImage', callback);\n  }\n\n  /**\n   * Checks whether or not media has user permission\n   *\n   * @returns Promise that will resolve with true if the user had granted the app permission to media information, or with false otherwise,\n   * In case of an error, promise will reject with the error. Function can also throw a NOT_SUPPORTED_ON_PLATFORM error\n   *\n   * @beta\n   */\n  export function hasPermission(): Promise<boolean> {\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n    if (!isPermissionSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    const permissions: DevicePermission = DevicePermission.Media;\n\n    return new Promise<boolean>((resolve) => {\n      resolve(sendAndHandleSdkError('permissions.has', permissions));\n    });\n  }\n\n  /**\n   * Requests user permission for media\n   *\n   * @returns Promise that will resolve with true if the user consented permission for media, or with false otherwise,\n   * In case of an error, promise will reject with the error. Function can also throw a NOT_SUPPORTED_ON_PLATFORM error\n   *\n   * @beta\n   */\n  export function requestPermission(): Promise<boolean> {\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n    if (!isPermissionSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    const permissions: DevicePermission = DevicePermission.Media;\n\n    return new Promise<boolean>((resolve) => {\n      resolve(sendAndHandleSdkError('permissions.request', permissions));\n    });\n  }\n\n  /**\n   * Checks if permission capability is supported by the host\n   * @returns boolean to represent whether permission is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   */\n  function isPermissionSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.permissions ? true : false;\n  }\n\n  /**\n   * Media object returned by the select Media API\n   */\n  export class Media extends File {\n    constructor(that: Media = null) {\n      super();\n      if (that) {\n        this.content = that.content;\n        this.format = that.format;\n        this.mimeType = that.mimeType;\n        this.name = that.name;\n        this.preview = that.preview;\n        this.size = that.size;\n      }\n    }\n\n    /**\n     * A preview of the file which is a lightweight representation.\n     * In case of images this will be a thumbnail/compressed image in base64 encoding.\n     */\n    public preview: string;\n\n    /**\n     * Gets the media in chunks irrespective of size, these chunks are assembled and sent back to the webapp as file/blob\n     * @param callback - callback is called with the @see SdkError if there is an error\n     * If error is null or undefined, the callback will be called with @see Blob.\n     */\n    public getMedia(callback: getMediaCallbackFunctionType): void {\n      if (!callback) {\n        throw new Error('[get Media] Callback cannot be null');\n      }\n      ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n      if (!isCurrentSDKVersionAtLeast(mediaAPISupportVersion)) {\n        const oldPlatformError: SdkError = { errorCode: ErrorCode.OLD_PLATFORM };\n        /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n        callback(oldPlatformError, null);\n        return;\n      }\n      if (!validateGetMediaInputs(this.mimeType, this.format, this.content)) {\n        const invalidInput: SdkError = { errorCode: ErrorCode.INVALID_ARGUMENTS };\n        /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n        callback(invalidInput, null);\n        return;\n      }\n      // Call the new get media implementation via callbacks if the client version is greater than or equal to '2.0.0'\n      if (isCurrentSDKVersionAtLeast(getMediaCallbackSupportVersion)) {\n        this.getMediaViaCallback(callback);\n      } else {\n        this.getMediaViaHandler(callback);\n      }\n    }\n\n    /** Function to retrieve media content, such as images or videos, via callback. */\n    private getMediaViaCallback(callback: getMediaCallbackFunctionType): void {\n      const helper: MediaHelper = {\n        mediaMimeType: this.mimeType,\n        assembleAttachment: [],\n      };\n      const localUriId = [this.content];\n      function handleGetMediaCallbackRequest(mediaResult: MediaResult): void {\n        if (callback) {\n          if (mediaResult && mediaResult.error) {\n            /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n            callback(mediaResult.error, null);\n          } else {\n            if (mediaResult && mediaResult.mediaChunk) {\n              // If the chunksequence number is less than equal to 0 implies EOF\n              // create file/blob when all chunks have arrived and we get 0/-1 as chunksequence number\n              if (mediaResult.mediaChunk.chunkSequence <= 0) {\n                const file = createFile(helper.assembleAttachment, helper.mediaMimeType);\n                callback(mediaResult.error, file);\n              } else {\n                // Keep pushing chunks into assemble attachment\n                const assemble: AssembleAttachment = decodeAttachment(mediaResult.mediaChunk, helper.mediaMimeType);\n                helper.assembleAttachment.push(assemble);\n              }\n            } else {\n              /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n              callback({ errorCode: ErrorCode.INTERNAL_ERROR, message: 'data received is null' }, null);\n            }\n          }\n        }\n      }\n      sendMessageToParent('getMedia', localUriId, handleGetMediaCallbackRequest);\n    }\n\n    /** Function to retrieve media content, such as images or videos, via handler. */\n    private getMediaViaHandler(callback: getMediaCallbackFunctionType): void {\n      const actionName = generateGUID();\n      const helper: MediaHelper = {\n        mediaMimeType: this.mimeType,\n        assembleAttachment: [],\n      };\n      const params = [actionName, this.content];\n      this.content && callback && sendMessageToParent('getMedia', params);\n      function handleGetMediaRequest(response: string): void {\n        if (callback) {\n          /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n          const mediaResult: MediaResult = JSON.parse(response);\n          if (mediaResult.error) {\n            /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n            callback(mediaResult.error, null);\n            removeHandler('getMedia' + actionName);\n          } else {\n            if (mediaResult.mediaChunk) {\n              // If the chunksequence number is less than equal to 0 implies EOF\n              // create file/blob when all chunks have arrived and we get 0/-1 as chunksequence number\n              if (mediaResult.mediaChunk.chunkSequence <= 0) {\n                const file = createFile(helper.assembleAttachment, helper.mediaMimeType);\n                callback(mediaResult.error, file);\n                removeHandler('getMedia' + actionName);\n              } else {\n                // Keep pushing chunks into assemble attachment\n                const assemble: AssembleAttachment = decodeAttachment(mediaResult.mediaChunk, helper.mediaMimeType);\n                helper.assembleAttachment.push(assemble);\n              }\n            } else {\n              /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n              callback({ errorCode: ErrorCode.INTERNAL_ERROR, message: 'data received is null' }, null);\n              removeHandler('getMedia' + actionName);\n            }\n          }\n        }\n      }\n\n      registerHandler('getMedia' + actionName, handleGetMediaRequest);\n    }\n  }\n\n  /**\n   * Input parameter supplied to the select Media API\n   */\n  export interface MediaInputs {\n    /**\n     * Only one media type can be selected at a time\n     */\n    mediaType: MediaType;\n\n    /**\n     * max limit of media allowed to be selected in one go, current max limit is 10 set by office lens.\n     */\n    maxMediaCount: number;\n\n    /**\n     * Additional properties for customization of select media - Image in mobile devices\n     */\n    imageProps?: ImageProps;\n\n    /**\n     * Additional properties for customization of select media - Video in mobile devices\n     */\n    videoProps?: VideoProps;\n\n    /**\n     * Additional properties for customization of select media - VideoAndImage in mobile devices\n     */\n    videoAndImageProps?: VideoAndImageProps;\n\n    /**\n     * Additional properties for audio capture flows.\n     */\n    audioProps?: AudioProps;\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   * --------\n   * All properties common to Image and Video Props\n   */\n  interface MediaProps {\n    /**\n     * @hidden\n     * Optional; Lets the developer specify the media source, more than one can be specified.\n     * Default value is both camera and gallery\n     */\n    sources?: Source[];\n\n    /**\n     * @hidden\n     * Optional; Specify in which mode the camera will be opened.\n     * Default value is Photo\n     */\n    startMode?: CameraStartMode;\n\n    /**\n     * @hidden\n     * Optional; indicate if user is allowed to move between front and back camera\n     * Default value is true\n     */\n    cameraSwitcher?: boolean;\n  }\n\n  /**\n   *  All properties in ImageProps are optional and have default values in the platform\n   */\n  export interface ImageProps extends MediaProps {\n    /**\n     * Optional; indicate if inking on the selected Image is allowed or not\n     * Default value is true\n     */\n    ink?: boolean;\n\n    /**\n     * Optional; indicate if putting text stickers on the selected Image is allowed or not\n     * Default value is true\n     */\n    textSticker?: boolean;\n\n    /**\n     * Optional; indicate if image filtering mode is enabled on the selected image\n     * Default value is false\n     */\n    enableFilter?: boolean;\n\n    /**\n     * Optional; Lets the developer specify the image output formats, more than one can be specified.\n     * Default value is Image.\n     */\n    imageOutputFormats?: ImageOutputFormats[];\n  }\n\n  /**\n   * All properties in VideoProps are optional and have default values in the platform\n   */\n  export interface VideoProps extends MediaProps {\n    /**\n     * Optional; the maximum duration in seconds after which the recording should terminate automatically.\n     * Default value is defined by the platform serving the API.\n     */\n    maxDuration?: number;\n\n    /**\n     * Optional; to determine if the video capturing flow needs to be launched\n     * in Full Screen Mode (Lens implementation) or PictureInPicture Mode (Native implementation).\n     * Default value is true, indicating video will always launch in Full Screen Mode via lens.\n     */\n    isFullScreenMode?: boolean;\n\n    /**\n     * Optional; controls the visibility of stop button in PictureInPicture Mode.\n     * Default value is true, indicating the user will be able to stop the video.\n     */\n    isStopButtonVisible?: boolean;\n\n    /**\n     * Optional; setting VideoController will register your app to listen to the lifecycle events during the video capture flow.\n     * Your app can also dynamically control the experience while capturing the video by notifying the host client.\n     */\n    videoController?: VideoController;\n  }\n\n  /**\n   * All properties in VideoAndImageProps are optional and have default values in the platform\n   */\n  export interface VideoAndImageProps extends ImageProps, VideoProps {}\n\n  /**\n   *  All properties in AudioProps are optional and have default values in the platform\n   */\n  export interface AudioProps {\n    /**\n     * Optional; the maximum duration in minutes after which the recording should terminate automatically\n     * Default value is defined by the platform serving the API.\n     */\n    maxDuration?: number;\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   * --------\n   * Base class which holds the callback and notifies events to the host client\n   */\n  abstract class MediaController<T> {\n    /** Callback that can be registered to handle events related to the playback and control of video content. */\n    protected controllerCallback: T;\n\n    public constructor(controllerCallback?: T) {\n      this.controllerCallback = controllerCallback;\n    }\n\n    protected abstract getMediaType(): MediaType;\n\n    /**\n     * @hidden\n     * Hide from docs\n     * --------\n     * This function will be implemented by the respective media class which holds the logic\n     * of specific events that needs to be notified to the app.\n     * @param mediaEvent indicates the event signed by the host client to the app\n     */\n    protected abstract notifyEventToApp(mediaEvent: MediaControllerEvent): void;\n\n    /**\n     * @hidden\n     * Hide from docs\n     * --------\n     * Function to notify the host client to programatically control the experience\n     * @param mediaEvent indicates what the event that needs to be signaled to the host client\n     * Optional; @param callback is used to send app if host client has successfully handled the notification event or not\n     */\n    protected notifyEventToHost(mediaEvent: MediaControllerEvent, callback?: errorCallbackFunctionType): void {\n      ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n\n      try {\n        throwExceptionIfMobileApiIsNotSupported(nonFullScreenVideoModeAPISupportVersion);\n      } catch (err) {\n        if (callback) {\n          callback(err);\n        }\n        return;\n      }\n\n      const params: MediaControllerParam = { mediaType: this.getMediaType(), mediaControllerEvent: mediaEvent };\n      sendMessageToParent('media.controller', [params], (err?: SdkError) => {\n        if (callback) {\n          callback(err);\n        }\n      });\n    }\n\n    /**\n     * Function to programatically stop the ongoing media event\n     * Optional; @param callback is used to send app if host client has successfully stopped the event or not\n     */\n    public stop(callback?: errorCallbackFunctionType): void {\n      this.notifyEventToHost(MediaControllerEvent.StopRecording, callback);\n    }\n  }\n\n  /**\n   * Callback which will register your app to listen to lifecycle events during the video capture flow\n   */\n  export interface VideoControllerCallback {\n    /** The event is a type of callback that can be enlisted to handle various events linked to `onRecordingStarted`, which helps with playback of video content. */\n    onRecordingStarted?(): void;\n  }\n\n  /**\n   * VideoController class is used to communicate between the app and the host client during the video capture flow\n   */\n  export class VideoController extends MediaController<VideoControllerCallback> {\n    /** Gets media type video. */\n    protected getMediaType(): MediaType {\n      return MediaType.Video;\n    }\n    /** Notify or send an event related to the playback and control of video content to a registered application. */\n    public notifyEventToApp(mediaEvent: MediaControllerEvent): void {\n      if (!this.controllerCallback) {\n        // Early return as app has not registered with the callback\n        return;\n      }\n\n      switch (mediaEvent) {\n        case MediaControllerEvent.StartRecording:\n          if (this.controllerCallback.onRecordingStarted) {\n            this.controllerCallback.onRecordingStarted();\n            break;\n          }\n      }\n    }\n  }\n\n  /**\n   * @beta\n   * Events which are used to communicate between the app and the host client during the media recording flow\n   */\n  export enum MediaControllerEvent {\n    /** Start recording. */\n    StartRecording = 1,\n    /** Stop recording. */\n    StopRecording = 2,\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   * --------\n   * Interface with relevant info to send communication from the app to the host client\n   */\n  interface MediaControllerParam {\n    /**\n     * List of team information\n     */\n    mediaType: media.MediaType;\n\n    /**\n     * List of team information\n     */\n    mediaControllerEvent: MediaControllerEvent;\n  }\n\n  /**\n   * The modes in which camera can be launched in select Media API\n   */\n  export enum CameraStartMode {\n    /** Photo mode. */\n    Photo = 1,\n    /** Document mode. */\n    Document = 2,\n    /** Whiteboard mode. */\n    Whiteboard = 3,\n    /** Business card mode. */\n    BusinessCard = 4,\n  }\n\n  /**\n   * Specifies the image source\n   */\n  export enum Source {\n    /** Image source is camera. */\n    Camera = 1,\n    /** Image source is gallery. */\n    Gallery = 2,\n  }\n\n  /**\n   * Specifies the type of Media\n   */\n  export enum MediaType {\n    /** Media type photo or image */\n    Image = 1,\n    /** Media type video. */\n    Video = 2,\n    /** Media type video and image. */\n    VideoAndImage = 3,\n    /** Media type audio. */\n    Audio = 4,\n  }\n\n  /**\n   * Input for view images API\n   */\n  export interface ImageUri {\n    /** Image location */\n    value: string;\n    /** Image Uri type */\n    type: ImageUriType;\n  }\n\n  /**\n   * ID contains a mapping for content uri on platform's side, URL is generic\n   */\n  export enum ImageUriType {\n    /** Image Id. */\n    ID = 1,\n    /** Image URL. */\n    URL = 2,\n  }\n\n  /**\n   * Specifies the image output formats.\n   */\n  export enum ImageOutputFormats {\n    /** Outputs image.  */\n    IMAGE = 1,\n    /** Outputs pdf. */\n    PDF = 2,\n  }\n\n  /**\n   * Media chunks an output of getMedia API from platform\n   */\n  export interface MediaChunk {\n    /**\n     * Base 64 data for the requested uri\n     */\n    chunk: string;\n\n    /**\n     * chunk sequence number\n     */\n    chunkSequence: number;\n  }\n\n  /**\n   * Output of getMedia API from platform\n   */\n  export interface MediaResult {\n    /**\n     * error encountered in getMedia API\n     */\n    error: SdkError;\n\n    /**\n     * Media chunk which will be assemebled and converted into a blob\n     */\n    mediaChunk: MediaChunk;\n  }\n\n  /**\n   * Helper object to assembled media chunks\n   */\n  export interface AssembleAttachment {\n    /** A number representing the sequence of the attachment in the media chunks. */\n    sequence: number;\n    /** A Blob object representing the data of the media chunks. */\n    file: Blob;\n  }\n\n  /**\n   * Helper class for assembling media\n   */\n  interface MediaHelper {\n    /** A string representing the MIME type of the media file */\n    mediaMimeType: string;\n    /** An array of {@link media.AssembleAttachment | AssembleAttachment} objects representing the media files to be sent as attachment */\n    assembleAttachment: AssembleAttachment[];\n  }\n\n  /**\n   * Select an attachment using camera/gallery\n   *\n   * @param mediaInputs - The input params to customize the media to be selected\n   * @param callback - The callback to invoke after fetching the media\n   */\n  export function selectMedia(mediaInputs: MediaInputs, callback: selectMediaCallbackFunctionType): void {\n    if (!callback) {\n      throw new Error('[select Media] Callback cannot be null');\n    }\n\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n    if (!isCurrentSDKVersionAtLeast(mediaAPISupportVersion)) {\n      const oldPlatformError: SdkError = { errorCode: ErrorCode.OLD_PLATFORM };\n      /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n      callback(oldPlatformError, null);\n      return;\n    }\n\n    try {\n      throwExceptionIfMediaCallIsNotSupportedOnMobile(mediaInputs);\n    } catch (err) {\n      /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n      callback(err, null);\n      return;\n    }\n\n    if (!validateSelectMediaInputs(mediaInputs)) {\n      const invalidInput: SdkError = { errorCode: ErrorCode.INVALID_ARGUMENTS };\n      /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n      callback(invalidInput, null);\n      return;\n    }\n\n    const params = [mediaInputs];\n    // What comes back from native as attachments would just be objects and will be missing getMedia method on them\n    sendMessageToParent(\n      'selectMedia',\n      params,\n      (err: SdkError, localAttachments?: Media[], mediaEvent?: MediaControllerEvent) => {\n        // MediaControllerEvent response is used to notify the app about events and is a partial response to selectMedia\n        if (mediaEvent) {\n          if (isVideoControllerRegistered(mediaInputs)) {\n            /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n            mediaInputs.videoProps.videoController.notifyEventToApp(mediaEvent);\n          }\n          return;\n        }\n\n        // Media Attachments are final response to selectMedia\n        if (!localAttachments) {\n          /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n          callback(err, null);\n          return;\n        }\n\n        const mediaArray: Media[] = [];\n        for (const attachment of localAttachments) {\n          mediaArray.push(new Media(attachment));\n        }\n        callback(err, mediaArray);\n      },\n    );\n  }\n\n  /**\n   * View images using native image viewer\n   *\n   * @param uriList - list of URIs for images to be viewed - can be content URI or server URL. Supports up to 10 Images in a single call\n   * @param callback - returns back error if encountered, returns null in case of success\n   */\n  export function viewImages(uriList: ImageUri[], callback: errorCallbackFunctionType): void {\n    if (!callback) {\n      throw new Error('[view images] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n\n    if (!isCurrentSDKVersionAtLeast(mediaAPISupportVersion)) {\n      const oldPlatformError: SdkError = { errorCode: ErrorCode.OLD_PLATFORM };\n      callback(oldPlatformError);\n      return;\n    }\n    if (!validateViewImagesInput(uriList)) {\n      const invalidInput: SdkError = { errorCode: ErrorCode.INVALID_ARGUMENTS };\n      callback(invalidInput);\n      return;\n    }\n\n    const params = [uriList];\n    sendMessageToParent('viewImages', params, callback);\n  }\n\n  /**\n   * Barcode configuration supplied to scanBarCode API to customize barcode scanning experience in mobile\n   * All properties in BarCodeConfig are optional and have default values in the platform\n   */\n  export interface BarCodeConfig {\n    /**\n     * Optional; Lets the developer specify the scan timeout interval in seconds\n     * Default value is 30 seconds and max allowed value is 60 seconds\n     */\n    timeOutIntervalInSec?: number;\n  }\n\n  /**\n   * @deprecated\n   * As of 2.1.0, please use {@link barCode.scanBarCode barCode.scanBarCode(config?: BarCodeConfig): Promise\\<string\\>} instead.\n\n   * Scan Barcode/QRcode using camera\n   *\n   * @remarks\n   * Note: For desktop and web, this API is not supported. Callback will be resolved with ErrorCode.NotSupported.\n   *\n   * @param callback - callback to invoke after scanning the barcode\n   * @param config - optional input configuration to customize the barcode scanning experience\n   */\n  export function scanBarCode(callback: scanBarCodeCallbackFunctionType, config?: BarCodeConfig): void {\n    if (!callback) {\n      throw new Error('[media.scanBarCode] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n\n    if (\n      GlobalVars.hostClientType === HostClientType.desktop ||\n      GlobalVars.hostClientType === HostClientType.web ||\n      GlobalVars.hostClientType === HostClientType.rigel ||\n      GlobalVars.hostClientType === HostClientType.teamsRoomsWindows ||\n      GlobalVars.hostClientType === HostClientType.teamsRoomsAndroid ||\n      GlobalVars.hostClientType === HostClientType.teamsPhones ||\n      GlobalVars.hostClientType === HostClientType.teamsDisplays\n    ) {\n      const notSupportedError: SdkError = { errorCode: ErrorCode.NOT_SUPPORTED_ON_PLATFORM };\n      /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n      callback(notSupportedError, null);\n      return;\n    }\n\n    if (!isCurrentSDKVersionAtLeast(scanBarCodeAPIMobileSupportVersion)) {\n      const oldPlatformError: SdkError = { errorCode: ErrorCode.OLD_PLATFORM };\n      /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n      callback(oldPlatformError, null);\n      return;\n    }\n\n    /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n    if (!validateScanBarCodeInput(config)) {\n      const invalidInput: SdkError = { errorCode: ErrorCode.INVALID_ARGUMENTS };\n      /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n      callback(invalidInput, null);\n      return;\n    }\n\n    sendMessageToParent('media.scanBarCode', [config], callback);\n  }\n}\n","import { sendAndHandleSdkError } from '../internal/communication';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { validateScanBarCodeInput } from '../internal/mediaUtil';\nimport { errorNotSupportedOnPlatform, FrameContexts } from './constants';\nimport { DevicePermission, ErrorCode } from './interfaces';\nimport { runtime } from './runtime';\n\n/**\n * Namespace to interact with the barcode scanning-specific part of the SDK.\n *\n * @beta\n */\nexport namespace barCode {\n  /**\n   * Data structure to customize the barcode scanning experience in scanBarCode API.\n   * All properties in BarCodeConfig are optional and have default values in the platform\n   *\n   * @beta\n   */\n  export interface BarCodeConfig {\n    /**\n     * Optional; designates the scan timeout interval in seconds.\n     * Default value is 30 seconds, max allowed value is 60 seconds.\n     */\n    timeOutIntervalInSec?: number;\n  }\n\n  /**\n   * Scan Barcode or QRcode using camera\n   *\n   * @param barCodeConfig - input configuration to customize the barcode scanning experience\n   *\n   * @returns a scanned code\n   *\n   * @beta\n   */\n  export function scanBarCode(barCodeConfig: BarCodeConfig): Promise<string> {\n    return new Promise<string>((resolve) => {\n      ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      if (!validateScanBarCodeInput(barCodeConfig)) {\n        throw { errorCode: ErrorCode.INVALID_ARGUMENTS };\n      }\n\n      resolve(sendAndHandleSdkError('media.scanBarCode', barCodeConfig));\n    });\n  }\n\n  /**\n   * Checks whether or not media has user permission\n   *\n   * @returns true if the user has granted the app permission to media information, false otherwise\n   *\n   * @beta\n   */\n  export function hasPermission(): Promise<boolean> {\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    const permissions: DevicePermission = DevicePermission.Media;\n\n    return new Promise<boolean>((resolve) => {\n      resolve(sendAndHandleSdkError('permissions.has', permissions));\n    });\n  }\n\n  /**\n   * Requests user permission for media\n   *\n   * @returns true if the user has granted the app permission to the media, false otherwise\n   *\n   * @beta\n   */\n  export function requestPermission(): Promise<boolean> {\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    const permissions: DevicePermission = DevicePermission.Media;\n\n    return new Promise<boolean>((resolve) => {\n      resolve(sendAndHandleSdkError('permissions.request', permissions));\n    });\n  }\n\n  /**\n   * Checks if barCode capability is supported by the host\n   * @returns boolean to represent whether the barCode capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   * @beta\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.barCode && runtime.supports.permissions ? true : false;\n  }\n}\n","import { sendAndHandleStatusAndReason } from '../internal/communication';\nimport { createTeamsDeepLinkForChat } from '../internal/deepLinkUtilities';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { errorNotSupportedOnPlatform, FrameContexts } from '../public/constants';\nimport { runtime } from '../public/runtime';\n\n/**\n * Describes information needed to start a chat\n *\n * @beta\n */\ninterface OpenChatRequest {\n  /**\n   * An optional message used when initiating chat\n   */\n  message?: string;\n}\n\n/**\n * Used when starting a chat with one person\n *\n * @see OpenGroupChatRequest for use when a chat with more than one person\n *\n * @beta\n */\nexport interface OpenSingleChatRequest extends OpenChatRequest {\n  /**\n   * The Microsoft Entra UPN (e-mail address) of the user to chat with\n   */\n  user: string;\n}\n\n/**\n * Used when starting a chat with more than one person\n *\n * @see OpenSingleChatRequest for use in a chat with only one person\n *\n * @beta\n */\nexport interface OpenGroupChatRequest extends OpenChatRequest {\n  /**\n   * Array containing Microsoft Entra UPNs (e-mail addresss) of users to open chat with\n   */\n  users: string[];\n  /**\n   * The display name of a conversation for 3 or more users (chats with fewer than three users will ignore this field)\n   */\n  topic?: string;\n}\n\n/**\n * Contains functionality to start chat with others\n *\n * @beta\n */\nexport namespace chat {\n  /**\n   * Allows the user to open a chat with a single user and allows\n   * for the user to specify the message they wish to send.\n   *\n   * @param openChatRequest: {@link OpenSingleChatRequest}- a request object that contains a user's email as well as an optional message parameter.\n   *\n   * @returns Promise resolved upon completion\n   *\n   * @beta\n   */\n  export function openChat(openChatRequest: OpenSingleChatRequest): Promise<void> {\n    return new Promise<void>((resolve) => {\n      ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      if (runtime.isLegacyTeams) {\n        resolve(\n          sendAndHandleStatusAndReason(\n            'executeDeepLink',\n            createTeamsDeepLinkForChat([openChatRequest.user], undefined /*topic*/, openChatRequest.message),\n          ),\n        );\n      } else {\n        const sendPromise = sendAndHandleStatusAndReason('chat.openChat', {\n          members: openChatRequest.user,\n          message: openChatRequest.message,\n        });\n        resolve(sendPromise);\n      }\n    });\n  }\n  /**\n   * Allows the user to create a chat with multiple users (2+) and allows\n   * for the user to specify a message and name the topic of the conversation. If\n   * only 1 user is provided into users array default back to origin openChat.\n   *\n   * @param openChatRequest: {@link OpenGroupChatRequest} - a request object that contains a list of user emails as well as optional parameters for message and topic (display name for the group chat).\n   *\n   * @returns Promise resolved upon completion\n   *\n   * @beta\n   */\n  export function openGroupChat(openChatRequest: OpenGroupChatRequest): Promise<void> {\n    return new Promise<void>((resolve) => {\n      if (openChatRequest.users.length < 1) {\n        throw Error('OpenGroupChat Failed: No users specified');\n      }\n      if (openChatRequest.users.length === 1) {\n        const chatRequest: OpenSingleChatRequest = {\n          user: openChatRequest.users[0],\n          message: openChatRequest.message,\n        };\n        openChat(chatRequest);\n      } else {\n        ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n        if (!isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n        if (runtime.isLegacyTeams) {\n          resolve(\n            sendAndHandleStatusAndReason(\n              'executeDeepLink',\n              createTeamsDeepLinkForChat(openChatRequest.users, openChatRequest.topic, openChatRequest.message),\n            ),\n          );\n        } else {\n          const sendPromise = sendAndHandleStatusAndReason('chat.openChat', {\n            members: openChatRequest.users,\n            message: openChatRequest.message,\n            topic: openChatRequest.topic,\n          });\n          resolve(sendPromise);\n        }\n      }\n    });\n  }\n\n  /**\n   * Checks if the chat capability is supported by the host\n   * @returns boolean to represent whether the chat capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   * @beta\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.chat ? true : false;\n  }\n}\n","import { media } from '../public/media';\nimport { people } from '../public/people';\nimport {\n  imageOutputFormatsAPISupportVersion,\n  nonFullScreenVideoModeAPISupportVersion,\n  videoAndImageMediaAPISupportVersion,\n} from './constants';\nimport { throwExceptionIfMobileApiIsNotSupported } from './internalAPIs';\n\n/**\n * @hidden\n * Helper function to create a blob from media chunks based on their sequence\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function createFile(assembleAttachment: media.AssembleAttachment[], mimeType: string): Blob {\n  if (assembleAttachment == null || mimeType == null || assembleAttachment.length <= 0) {\n    return null;\n  }\n  let file: Blob | undefined;\n  let sequence = 1;\n  assembleAttachment.sort((a, b) => (a.sequence > b.sequence ? 1 : -1));\n  assembleAttachment.forEach((item) => {\n    if (item.sequence == sequence) {\n      if (file) {\n        file = new Blob([file, item.file], { type: mimeType });\n      } else {\n        file = new Blob([item.file], { type: mimeType });\n      }\n      sequence++;\n    }\n  });\n  return file;\n}\n\n/**\n * @hidden\n * Helper function to convert Media chunks into another object type which can be later assemebled\n * Converts base 64 encoded string to byte array and then into an array of blobs\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function decodeAttachment(attachment: media.MediaChunk, mimeType: string): media.AssembleAttachment {\n  if (attachment == null || mimeType == null) {\n    return null;\n  }\n  const decoded = atob(attachment.chunk);\n  const byteNumbers = new Array(decoded.length);\n  for (let i = 0; i < decoded.length; i++) {\n    byteNumbers[i] = decoded.charCodeAt(i);\n  }\n  const byteArray = new Uint8Array(byteNumbers);\n  const blob: Blob = new Blob([byteArray], { type: mimeType });\n  const assemble: media.AssembleAttachment = {\n    sequence: attachment.chunkSequence,\n    file: blob,\n  };\n  return assemble;\n}\n\n/**\n * @hidden\n * Function throws an SdkError if the media call is not supported on current mobile version, else undefined.\n *\n * @throws an SdkError if the media call is not supported\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function throwExceptionIfMediaCallIsNotSupportedOnMobile(mediaInputs: media.MediaInputs): void {\n  if (isMediaCallForVideoAndImageInputs(mediaInputs)) {\n    throwExceptionIfMobileApiIsNotSupported(videoAndImageMediaAPISupportVersion);\n  } else if (isMediaCallForNonFullScreenVideoMode(mediaInputs)) {\n    throwExceptionIfMobileApiIsNotSupported(nonFullScreenVideoModeAPISupportVersion);\n  } else if (isMediaCallForImageOutputFormats(mediaInputs)) {\n    throwExceptionIfMobileApiIsNotSupported(imageOutputFormatsAPISupportVersion);\n  }\n}\n\n/**\n * @hidden\n * Function returns true if the app has registered to listen to video controller events, else false.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function isVideoControllerRegistered(mediaInputs: media.MediaInputs): boolean {\n  if (\n    mediaInputs.mediaType == media.MediaType.Video &&\n    mediaInputs.videoProps &&\n    mediaInputs.videoProps.videoController\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @hidden\n * Returns true if the mediaInput params are valid and false otherwise\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function validateSelectMediaInputs(mediaInputs: media.MediaInputs): boolean {\n  if (mediaInputs == null || mediaInputs.maxMediaCount > 10) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * @hidden\n * Returns true if the mediaInput params are called for mediatype Image and contains Image outputs formats, false otherwise\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function isMediaCallForImageOutputFormats(mediaInputs: media.MediaInputs): boolean {\n  if (mediaInputs?.mediaType == media.MediaType.Image && mediaInputs?.imageProps?.imageOutputFormats) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @hidden\n * Returns true if the mediaInput params are called for mediatype VideoAndImage and false otherwise\n *\n * @internal\n */\nexport function isMediaCallForVideoAndImageInputs(mediaInputs: media.MediaInputs): boolean {\n  if (mediaInputs && (mediaInputs.mediaType == media.MediaType.VideoAndImage || mediaInputs.videoAndImageProps)) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @hidden\n * Returns true if the mediaInput params are called for non-full screen video mode and false otherwise\n *\n * @internal\n */\nexport function isMediaCallForNonFullScreenVideoMode(mediaInputs: media.MediaInputs): boolean {\n  if (\n    mediaInputs &&\n    mediaInputs.mediaType == media.MediaType.Video &&\n    mediaInputs.videoProps &&\n    !mediaInputs.videoProps.isFullScreenMode\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @hidden\n * Returns true if the get Media params are valid and false otherwise\n *\n * @internal\n */\nexport function validateGetMediaInputs(mimeType: string, format: media.FileFormat, content: string): boolean {\n  if (mimeType == null || format == null || format != media.FileFormat.ID || content == null) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * @hidden\n * Returns true if the view images param is valid and false otherwise\n *\n * @internal\n */\nexport function validateViewImagesInput(uriList: media.ImageUri[]): boolean {\n  if (uriList == null || uriList.length <= 0 || uriList.length > 10) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * @hidden\n * Returns true if the scan barcode param is valid and false otherwise\n *\n * @internal\n */\nexport function validateScanBarCodeInput(barCodeConfig: media.BarCodeConfig): boolean {\n  if (barCodeConfig) {\n    if (\n      barCodeConfig.timeOutIntervalInSec === null ||\n      barCodeConfig.timeOutIntervalInSec <= 0 ||\n      barCodeConfig.timeOutIntervalInSec > 60\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @hidden\n * Returns true if the people picker params are valid and false otherwise\n *\n * @internal\n */\nexport function validatePeoplePickerInput(peoplePickerInputs: people.PeoplePickerInputs): boolean {\n  if (peoplePickerInputs) {\n    if (peoplePickerInputs.title) {\n      if (typeof peoplePickerInputs.title !== 'string') {\n        return false;\n      }\n    }\n\n    if (peoplePickerInputs.setSelected) {\n      if (typeof peoplePickerInputs.setSelected !== 'object') {\n        return false;\n      }\n    }\n\n    if (peoplePickerInputs.openOrgWideSearchInChatOrChannel) {\n      if (typeof peoplePickerInputs.openOrgWideSearchInChatOrChannel !== 'boolean') {\n        return false;\n      }\n    }\n    if (peoplePickerInputs.singleSelect) {\n      if (typeof peoplePickerInputs.singleSelect !== 'boolean') {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n","import { sendAndHandleSdkError } from '../internal/communication';\nimport { GlobalVars } from '../internal/globalVars';\nimport { ensureInitialized, isHostClientMobile } from '../internal/internalAPIs';\nimport * as utils from '../internal/utils';\nimport { errorNotSupportedOnPlatform, FrameContexts, HostClientType } from './constants';\nimport { ClipboardParams, ClipboardSupportedMimeType } from './interfaces';\nimport { runtime } from './runtime';\n\n/**\n * Interact with the system clipboard\n *\n * @beta\n */\nexport namespace clipboard {\n  /**\n   * Function to copy data to clipboard.\n   * @remarks\n   * Note: clipboard.write only supports Text, HTML, PNG, and JPEG data format.\n   *       MIME type for Text -> `text/plain`, HTML -> `text/html`, PNG/JPEG -> `image/(png | jpeg)`\n   *       Also, JPEG will be converted to PNG image when copying to clipboard.\n   *\n   * @param blob - A Blob object representing the data to be copied to clipboard.\n   * @returns A string promise which resolves to success message from the clipboard or\n   *          rejects with error stating the reason for failure.\n   */\n  export async function write(blob: Blob): Promise<void> {\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task, FrameContexts.stage, FrameContexts.sidePanel);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    if (!(blob.type && Object.values(ClipboardSupportedMimeType).includes(blob.type as ClipboardSupportedMimeType))) {\n      throw new Error(\n        `Blob type ${blob.type} is not supported. Supported blob types are ${Object.values(\n          ClipboardSupportedMimeType,\n        )}`,\n      );\n    }\n    const base64StringContent = await utils.getBase64StringFromBlob(blob);\n    const writeParams: ClipboardParams = {\n      mimeType: blob.type as ClipboardSupportedMimeType,\n      content: base64StringContent,\n    };\n    return sendAndHandleSdkError('clipboard.writeToClipboard', writeParams);\n  }\n\n  /**\n   * Function to read data from clipboard.\n   *\n   * @returns A promise blob which resolves to the data read from the clipboard or\n   *          rejects stating the reason for failure.\n   *          Note: Returned blob type will contain one of the MIME type `image/png`, `text/plain` or `text/html`.\n   */\n  export async function read(): Promise<Blob> {\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task, FrameContexts.stage, FrameContexts.sidePanel);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    if (isHostClientMobile() || GlobalVars.hostClientType === HostClientType.macos) {\n      const response = JSON.parse(await sendAndHandleSdkError('clipboard.readFromClipboard')) as ClipboardParams;\n      return utils.base64ToBlob(response.mimeType, response.content);\n    } else {\n      return sendAndHandleSdkError('clipboard.readFromClipboard');\n    }\n  }\n\n  /**\n   * Checks if clipboard capability is supported by the host\n   * @returns boolean to represent whether the clipboard capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   * @beta\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && navigator && navigator.clipboard && runtime.supports.clipboard ? true : false;\n  }\n}\n","import { sendAndHandleSdkError } from '../internal/communication';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { errorNotSupportedOnPlatform, FrameContexts } from './constants';\nimport { DevicePermission, ErrorCode } from './interfaces';\nimport { runtime } from './runtime';\n\n/**\n * Namespace to interact with the geoLocation module-specific part of the SDK. This is the newer version of location module.\n *\n * @beta\n */\nexport namespace geoLocation {\n  /**\n   * Data struture to represent the location information\n   *\n   * @beta\n   */\n  export interface Location {\n    /**\n      Latitude of the location\n      */\n    latitude: number;\n    /**\n      Longitude of the location\n      */\n    longitude: number;\n    /**\n      Accuracy describes the maximum distance in meters from the captured coordinates to the possible actual location\n      @remarks\n      This property is only in scope for mobile\n      */\n    accuracy?: number;\n    /**\n      Time stamp when the location was captured\n      */\n    timestamp?: number;\n  }\n  /**\n   * Fetches current user coordinates\n   * @returns Promise that will resolve with {@link geoLocation.Location} object or reject with an error. Function can also throw a NOT_SUPPORTED_ON_PLATFORM error\n   *\n   * @beta\n   */\n  export function getCurrentLocation(): Promise<Location> {\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    return sendAndHandleSdkError('location.getLocation', { allowChooseLocation: false, showMap: false });\n  }\n\n  /**\n   * Checks whether or not location has user permission\n   *\n   * @returns Promise that will resolve with true if the user had granted the app permission to location information, or with false otherwise,\n   * In case of an error, promise will reject with the error. Function can also throw a NOT_SUPPORTED_ON_PLATFORM error\n   *\n   * @beta\n   */\n  export function hasPermission(): Promise<boolean> {\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    const permissions: DevicePermission = DevicePermission.GeoLocation;\n\n    return new Promise<boolean>((resolve) => {\n      resolve(sendAndHandleSdkError('permissions.has', permissions));\n    });\n  }\n\n  /**\n   * Requests user permission for location\n   *\n   * @returns true if the user consented permission for location, false otherwise\n   * @returns Promise that will resolve with true if the user consented permission for location, or with false otherwise,\n   * In case of an error, promise will reject with the error. Function can also throw a NOT_SUPPORTED_ON_PLATFORM error\n   *\n   * @beta\n   */\n  export function requestPermission(): Promise<boolean> {\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    const permissions: DevicePermission = DevicePermission.GeoLocation;\n\n    return new Promise<boolean>((resolve) => {\n      resolve(sendAndHandleSdkError('permissions.request', permissions));\n    });\n  }\n\n  /**\n   * Checks if geoLocation capability is supported by the host\n   * @returns boolean to represent whether geoLocation is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   * @beta\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.geoLocation && runtime.supports.permissions ? true : false;\n  }\n\n  /**\n   * Namespace to interact with the location on map module-specific part of the SDK.\n   *\n   * @beta\n   */\n  export namespace map {\n    /**\n     * Allows user to choose location on map\n     *\n     * @returns Promise that will resolve with {@link geoLocation.Location} object chosen by the user or reject with an error. Function can also throw a NOT_SUPPORTED_ON_PLATFORM error\n     *\n     * @beta\n     */\n    export function chooseLocation(): Promise<Location> {\n      ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      return sendAndHandleSdkError('location.getLocation', { allowChooseLocation: true, showMap: true });\n    }\n\n    /**\n     * Shows the location on map corresponding to the given coordinates\n     *\n     * @param location - Location to be shown on the map\n     * @returns Promise that resolves when the location dialog has been closed or reject with an error. Function can also throw a NOT_SUPPORTED_ON_PLATFORM error\n     *\n     * @beta\n     */\n    export function showLocation(location: Location): Promise<void> {\n      ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      if (!location) {\n        throw { errorCode: ErrorCode.INVALID_ARGUMENTS };\n      }\n      return sendAndHandleSdkError('location.showLocation', location);\n    }\n\n    /**\n     * Checks if geoLocation.map capability is supported by the host\n     * @returns boolean to represent whether geoLocation.map is supported\n     *\n     * @throws Error if {@linkcode app.initialize} has not successfully completed\n     *\n     * @beta\n     */\n    export function isSupported(): boolean {\n      return ensureInitialized(runtime) &&\n        runtime.supports.geoLocation &&\n        runtime.supports.geoLocation.map &&\n        runtime.supports.permissions\n        ? true\n        : false;\n    }\n  }\n}\n","import { AdaptiveCardVersion } from './interfaces';\nimport { runtime } from './runtime';\n\n/**\n * @returns The {@linkcode AdaptiveCardVersion} representing the Adaptive Card schema\n * version supported by the host, or undefined if the host does not support Adaptive Cards\n */\nexport function getAdaptiveCardSchemaVersion(): AdaptiveCardVersion | undefined {\n  if (!runtime.hostVersionsInfo) {\n    return undefined;\n  } else {\n    return runtime.hostVersionsInfo.adaptiveCardSchemaVersion;\n  }\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\n\nimport { sendMessageToParent } from '../internal/communication';\nimport { registerHandler } from '../internal/handlers';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { getGenericOnCompleteHandler } from '../internal/utils';\nimport { FrameContexts } from './constants';\nimport { runtime } from './runtime';\n\n/** onComplete function type */\ntype onCompleteFunctionType = (status: boolean, reason?: string) => void;\n/** addEventListner function type */\ntype addEventListnerFunctionType = (message: any) => void;\n\n/** Represents a window or frame within the host app. */\nexport interface IAppWindow {\n  /**\n   * Send a message to the AppWindow.\n   *\n   * @param message - The message to send\n   * @param onComplete - The callback to know if the postMessage has been success/failed.\n   */\n  postMessage(message: any, onComplete?: onCompleteFunctionType): void;\n\n  /**\n   * Add a listener that will be called when an event is received from this AppWindow.\n   *\n   * @param type - The event to listen to. Currently the only supported type is 'message'.\n   * @param listener - The listener that will be called\n   */\n  addEventListener(type: string, listener: Function): void;\n}\n\n/**\n * An object that application can utilize to establish communication\n * with the child window it opened, which contains the corresponding task.\n */\nexport class ChildAppWindow implements IAppWindow {\n  /**\n   * Send a message to the ChildAppWindow.\n   *\n   * @param message - The message to send\n   * @param onComplete - The callback to know if the postMessage has been success/failed.\n   */\n  public postMessage(message: any, onComplete?: onCompleteFunctionType): void {\n    ensureInitialized(runtime);\n    sendMessageToParent('messageForChild', [message], onComplete ? onComplete : getGenericOnCompleteHandler());\n  }\n  /**\n   * Add a listener that will be called when an event is received from the ChildAppWindow.\n   *\n   * @param type - The event to listen to. Currently the only supported type is 'message'.\n   * @param listener - The listener that will be called\n   */\n  public addEventListener(type: string, listener: addEventListnerFunctionType): void {\n    ensureInitialized(runtime);\n    if (type === 'message') {\n      registerHandler('messageForParent', listener);\n    }\n  }\n}\n\n/**\n * An object that is utilized to facilitate communication with a parent window\n * that initiated the opening of current window. For instance, a dialog or task\n * module would utilize it to transmit messages to the application that launched it.\n */\nexport class ParentAppWindow implements IAppWindow {\n  /** Represents a parent window or frame. */\n  private static _instance: ParentAppWindow;\n  /** Get the parent window instance. */\n  public static get Instance(): IAppWindow {\n    // Do you need arguments? Make it a regular method instead.\n    return this._instance || (this._instance = new this());\n  }\n\n  /**\n   * Send a message to the ParentAppWindow.\n   *\n   * @param message - The message to send\n   * @param onComplete - The callback to know if the postMessage has been success/failed.\n   */\n  public postMessage(message: any, onComplete?: onCompleteFunctionType): void {\n    ensureInitialized(runtime, FrameContexts.task);\n    sendMessageToParent('messageForParent', [message], onComplete ? onComplete : getGenericOnCompleteHandler());\n  }\n\n  /**\n   * Add a listener that will be called when an event is received from the ParentAppWindow.\n   *\n   * @param type - The event to listen to. Currently the only supported type is 'message'.\n   * @param listener - The listener that will be called\n   */\n  public addEventListener(type: string, listener: addEventListnerFunctionType): void {\n    ensureInitialized(runtime, FrameContexts.task);\n    if (type === 'message') {\n      registerHandler('messageForChild', listener);\n    }\n  }\n}\n","import { sendAndHandleSdkError } from '../internal/communication';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { isValidHttpsURL } from '../internal/utils';\nimport { errorNotSupportedOnPlatform, FrameContexts } from './constants';\nimport { ErrorCode } from './interfaces';\nimport { runtime } from './runtime';\n\n/**\n * Namespace to power up the in-app browser experiences in the Host App.\n * For e.g., opening a URL in the Host App inside a browser\n *\n * @beta\n */\nexport namespace secondaryBrowser {\n  /**\n   * Open a URL in the secondary browser aka in-app browser\n   *\n   * @param url Url to open in the browser\n   * @returns Promise that successfully resolves if the URL  opens in the secondaryBrowser\n   * or throws an error {@link SdkError} incase of failure before starting navigation\n   *\n   * @remarks Any error that happens after navigation begins is handled by the platform browser component and not returned from this function.\n   * @beta\n   */\n  export function open(url: URL): Promise<void> {\n    ensureInitialized(runtime, FrameContexts.content);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n\n    if (!url || !isValidHttpsURL(url)) {\n      throw { errorCode: ErrorCode.INVALID_ARGUMENTS, message: 'Invalid Url: Only https URL is allowed' };\n    }\n\n    return sendAndHandleSdkError('secondaryBrowser.open', url.toString());\n  }\n\n  /**\n   * Checks if secondaryBrowser capability is supported by the host\n   * @returns boolean to represent whether secondaryBrowser is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   * @beta\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.secondaryBrowser ? true : false;\n  }\n}\n","import { sendMessageToParent } from '../internal/communication';\nimport { locationAPIsRequiredVersion } from '../internal/constants';\nimport { ensureInitialized, isCurrentSDKVersionAtLeast } from '../internal/internalAPIs';\nimport { errorNotSupportedOnPlatform, FrameContexts } from './constants';\nimport { ErrorCode, SdkError } from './interfaces';\nimport { runtime } from './runtime';\n\n/**\n * @deprecated\n * As of 2.1.0, please use geoLocation namespace.\n *\n * Namespace to interact with the location module-specific part of the SDK.\n */\nexport namespace location {\n  /** Get location callback function type */\n  type getLocationCallbackFunctionType = (error: SdkError, location: Location) => void;\n  /** Show location callback function type */\n  type showLocationCallbackFunctionType = (error: SdkError, status: boolean) => void;\n\n  /**\n   * @deprecated\n   * Data Structure to set the location properties in getLocation call.\n   */\n  export interface LocationProps {\n    /**\n    whether user can alter location or not\n    if false, user will be shown current location \n    and wouldn't be allowed to alter it\n    */\n    allowChooseLocation: boolean;\n    /**\n    whether selected location should be shown to user on map or not.\n    If allowChooseLocation is true, this parameter will be ignored by platform.\n    If allowChooseLocation is false, and this parameter is not provided, default \n    value will be false.\n    */\n    showMap?: boolean;\n  }\n\n  /**\n   * @deprecated\n   * Data struture to represent the location information\n   */\n  export interface Location {\n    /**\n    Latitude of the location\n    */\n    latitude: number;\n    /**\n    Longitude of the location\n    */\n    longitude: number;\n    /**\n    Accuracy of the coordinates captured\n    */\n    accuracy?: number;\n    /**\n    Time stamp when the location was captured\n    */\n    timestamp?: number;\n  }\n\n  /**\n   * @deprecated\n   * As of 2.1.0, please use one of the following functions:\n   * - {@link geoLocation.getCurrentLocation geoLocation.getCurrentLocation(): Promise\\<Location\\>} to get the current location.\n   * - {@link geoLocation.map.chooseLocation geoLocation.map.chooseLocation(): Promise\\<Location\\>} to choose location on map.\n   *\n   * Fetches user location\n   * @param props {@link LocationProps} - Specifying how the location request is handled\n   * @param callback - Callback to invoke when current user location is fetched\n   */\n  export function getLocation(props: LocationProps, callback: getLocationCallbackFunctionType): void {\n    if (!callback) {\n      throw new Error('[location.getLocation] Callback cannot be null');\n    }\n\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n\n    if (!isCurrentSDKVersionAtLeast(locationAPIsRequiredVersion)) {\n      throw { errorCode: ErrorCode.OLD_PLATFORM };\n    }\n    if (!props) {\n      throw { errorCode: ErrorCode.INVALID_ARGUMENTS };\n    }\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    sendMessageToParent('location.getLocation', [props], callback);\n  }\n\n  /**\n   * @deprecated\n   * As of 2.1.0, please use {@link geoLocation.map.showLocation geoLocation.map.showLocation(location: Location): Promise\\<void\\>} instead.\n   *\n   * Shows the location on map corresponding to the given coordinates\n   *\n   * @param location - Location to be shown on the map\n   * @param callback - Callback to invoke when the location is opened on map\n   */\n  export function showLocation(location: Location, callback: showLocationCallbackFunctionType): void {\n    if (!callback) {\n      throw new Error('[location.showLocation] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n    if (!isCurrentSDKVersionAtLeast(locationAPIsRequiredVersion)) {\n      throw { errorCode: ErrorCode.OLD_PLATFORM };\n    }\n    if (!location) {\n      throw { errorCode: ErrorCode.INVALID_ARGUMENTS };\n    }\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n\n    sendMessageToParent('location.showLocation', [location], callback);\n  }\n\n  /**\n   * @deprecated\n   * As of 2.1.0, please use geoLocation namespace, and use {@link geoLocation.isSupported geoLocation.isSupported: boolean} to check if geoLocation is supported.\n   *\n   * Checks if Location capability is supported by the host\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   * @returns boolean to represent whether Location is supported\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.location ? true : false;\n  }\n}\n","import { sendMessageToParent } from '../internal/communication';\nimport { doesHandlerExist, registerHandler, removeHandler } from '../internal/handlers';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { FrameContexts } from './constants';\nimport { SdkError } from './interfaces';\nimport { runtime } from './runtime';\n\n/**\n * Interact with meetings, including retrieving meeting details, getting mic status, and sharing app content.\n * This namespace is used to handle meeting related functionality like\n * get meeting details, get/update state of mic, sharing app content and more.\n */\nexport namespace meeting {\n  /** Error callback function type */\n  type errorCallbackFunctionType = (error: SdkError | null, result: boolean | null) => void;\n  /** Get live stream state callback function type */\n  type getLiveStreamStateCallbackFunctionType = (\n    error: SdkError | null,\n    liveStreamState: LiveStreamState | null,\n  ) => void;\n  /** Live stream error callback function type */\n  type liveStreamErrorCallbackFunctionType = (error: SdkError | null) => void;\n  /** Register live stream changed handler function type */\n  type registerLiveStreamChangedHandlerFunctionType = (liveStreamState: LiveStreamState) => void;\n  /** Get app content stage sharing capabilities callback function type */\n  type getAppContentCallbackFunctionType = (\n    error: SdkError | null,\n    appContentStageSharingCapabilities: IAppContentStageSharingCapabilities | null,\n  ) => void;\n  /** Get app content stage sharing state callback function type */\n  type getAppContentStageCallbackFunctionType = (\n    error: SdkError | null,\n    appContentStageSharingState: IAppContentStageSharingState | null,\n  ) => void;\n  /** Register speaking state change handler function type */\n  type registerSpeakingStateChangeHandlerFunctionType = (speakingState: ISpeakingState) => void;\n  /**\n   * @hidden\n   * Data structure to represent meeting details\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface IMeetingDetailsResponse {\n    /**\n     * @hidden\n     * details object\n     */\n    details: IMeetingDetails | ICallDetails;\n\n    /**\n     * @hidden\n     * conversation object\n     */\n    conversation: IConversation;\n\n    /**\n     * @hidden\n     * organizer object\n     */\n    organizer: IOrganizer;\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   * Base data structure to represent a meeting or call detail\n   */\n  export interface IMeetingOrCallDetailsBase<T> {\n    /**\n     * @hidden\n     * Scheduled start time of the meeting or start time of the call\n     */\n    scheduledStartTime: string;\n\n    /**\n     * @hidden\n     * url to join the current meeting or call\n     */\n    joinUrl?: string;\n\n    /**\n     * @hidden\n     * type of the meeting or call\n     */\n    type?: T;\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   * Data structure to represent call details\n   */\n  export type ICallDetails = IMeetingOrCallDetailsBase<CallType>;\n\n  /**\n   * @hidden\n   * Hide from docs\n   * Data structure to represent meeting details.\n   */\n  export interface IMeetingDetails extends IMeetingOrCallDetailsBase<MeetingType> {\n    /**\n     * @hidden\n     * Scheduled end time of the meeting\n     */\n    scheduledEndTime: string;\n\n    /**\n     * @hidden\n     * meeting title name of the meeting\n     */\n    title?: string;\n  }\n\n  /**\n   * @hidden\n   * Data structure to represent a conversation object.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface IConversation {\n    /**\n     * @hidden\n     * conversation id of the meeting\n     */\n    id: string;\n  }\n\n  /**\n   * @hidden\n   * Data structure to represent an organizer object.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface IOrganizer {\n    /**\n     * @hidden\n     * organizer id of the meeting\n     */\n    id?: string;\n    /**\n     * @hidden\n     * tenant id of the meeting\n     */\n    tenantId?: string;\n  }\n\n  /** Represents the current live streaming state of a meeting */\n  export interface LiveStreamState {\n    /**\n     * indicates whether meeting is streaming\n     */\n    isStreaming: boolean;\n\n    /**\n     * error object in case there is a failure\n     */\n    error?: {\n      /** error code from the streaming service, e.g. IngestionFailure */\n      code: string;\n      /** detailed error message string */\n      message?: string;\n    };\n  }\n\n  /** Represents app permission to share contents to meeting. */\n  export interface IAppContentStageSharingCapabilities {\n    /**\n     * indicates whether app has permission to share contents to meeting stage\n     */\n    doesAppHaveSharePermission: boolean;\n  }\n\n  /** Represents app being shared to stage. */\n  export interface IAppContentStageSharingState {\n    /**\n     * indicates whether app is currently being shared to stage\n     */\n    isAppSharing: boolean;\n  }\n\n  /**\n   * Property bag for the speakingState changed event\n   *\n   */\n  export interface ISpeakingState {\n    /**\n     * Indicates whether one or more participants in a meeting are speaking, or\n     * if no participants are speaking\n     */\n    isSpeakingDetected: boolean;\n\n    /**\n     * error object in case there is a failure\n     */\n    error?: SdkError;\n  }\n\n  /**\n   * Property bag for the meeting reaction received event\n   *\n   * @hidden\n   * Hide from docs.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   *\n   * @beta\n   */\n  export interface MeetingReactionReceivedEventData {\n    /**\n     * Indicates the type of meeting reaction received\n     *\n     * @hidden\n     * Hide from docs.\n     */\n    meetingReactionType?: MeetingReactionType;\n    /**\n     * error object in case there is a failure\n     *\n     * @hidden\n     * Hide from docs.\n     */\n    error?: SdkError;\n  }\n\n  /**\n   * Interface for raiseHandState properties\n   *\n   * @hidden\n   * Hide from docs.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   *\n   * @beta\n   */\n  export interface IRaiseHandState {\n    /** Indicates whether the selfParticipant's hand is raised or not\n     *\n     * @hidden\n     * Hide from docs.\n     */\n\n    isHandRaised: boolean;\n  }\n\n  /**\n   * Property bag for the raiseHandState changed event\n   *\n   * @hidden\n   * Hide from docs.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   *\n   * @beta\n   */\n  export interface RaiseHandStateChangedEventData {\n    /**\n     * entire raiseHandState object for the selfParticipant\n     *\n     * @hidden\n     * Hide from docs.\n     */\n    raiseHandState: IRaiseHandState;\n\n    /**\n     * error object in case there is a failure\n     *\n     * @hidden\n     * Hide from docs.\n     */\n    error?: SdkError;\n  }\n\n  /**\n   * Interface for mic state change\n   *\n   * @hidden\n   * Hide from docs.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   *\n   * @beta\n   */\n  export interface MicState {\n    /**\n     * Indicates the mute status of the mic\n     */\n    isMicMuted: boolean;\n  }\n\n  /**\n   * Reasons for the app's microphone state to change\n   */\n  enum MicStateChangeReason {\n    HostInitiated,\n    AppInitiated,\n    AppDeclinedToChange,\n    AppFailedToChange,\n  }\n\n  /**\n   * Interface for RequestAppAudioHandling properties\n   *\n   * @hidden\n   * Hide from docs.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   *\n   * @beta\n   */\n  export interface RequestAppAudioHandlingParams {\n    /**\n     * Indicates whether the app is requesting to start handling audio, or if\n     * it's giving audio back to the host\n     */\n    isAppHandlingAudio: boolean;\n    /**\n     * Callback for the host to tell the app to change its microphone state\n     * @param micState The microphone state for the app to use\n     * @returns A promise with the updated microphone state\n     */\n    micMuteStateChangedCallback: (micState: MicState) => Promise<MicState>;\n  }\n\n  /**\n   * Different types of meeting reactions that can be sent/received\n   *\n   * @hidden\n   * Hide from docs.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   *\n   * @beta\n   */\n  export enum MeetingReactionType {\n    like = 'like',\n    heart = 'heart',\n    laugh = 'laugh',\n    surprised = 'surprised',\n    applause = 'applause',\n  }\n\n  /** Represents the type of a meeting */\n  export enum MeetingType {\n    /** Used when the meeting type is not known. */\n    Unknown = 'Unknown',\n    /** Used for ad hoc meetings that are created on the fly. */\n    Adhoc = 'Adhoc',\n    /** Used for meetings that have been scheduled in advance. */\n    Scheduled = 'Scheduled',\n    /** Used for meetings that occur on a recurring basis. */\n    Recurring = 'Recurring',\n    /** Used for live events or webinars. */\n    Broadcast = 'Broadcast',\n    /** Used for meetings that are created on the fly, but with a more polished experience than ad hoc meetings. */\n    MeetNow = 'MeetNow',\n  }\n\n  /** Represents the type of a call. */\n  export enum CallType {\n    /** Represents a call between two people. */\n    OneOnOneCall = 'oneOnOneCall',\n    /** Represents a call between more than two people. */\n    GroupCall = 'groupCall',\n  }\n\n  /**\n   * Allows an app to get the incoming audio speaker setting for the meeting user\n   *\n   * @param callback - Callback contains 2 parameters, error and result.\n   *\n   * error can either contain an error of type SdkError, incase of an error, or null when fetch is successful\n   * result can either contain the true/false value, incase of a successful fetch or null when the fetching fails\n   * result: True means incoming audio is muted and false means incoming audio is unmuted\n   */\n  export function getIncomingClientAudioState(callback: errorCallbackFunctionType): void {\n    if (!callback) {\n      throw new Error('[get incoming client audio state] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel, FrameContexts.meetingStage);\n    sendMessageToParent('getIncomingClientAudioState', callback);\n  }\n\n  /**\n   * Allows an app to toggle the incoming audio speaker setting for the meeting user from mute to unmute or vice-versa\n   *\n   * @param callback - Callback contains 2 parameters, error and result.\n   * error can either contain an error of type SdkError, incase of an error, or null when toggle is successful\n   * result can either contain the true/false value, incase of a successful toggle or null when the toggling fails\n   * result: True means incoming audio is muted and false means incoming audio is unmuted\n   */\n  export function toggleIncomingClientAudio(callback: errorCallbackFunctionType): void {\n    if (!callback) {\n      throw new Error('[toggle incoming client audio] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel, FrameContexts.meetingStage);\n    sendMessageToParent('toggleIncomingClientAudio', callback);\n  }\n\n  /**\n   * @hidden\n   * Allows an app to get the meeting details for the meeting\n   *\n   * @param callback - Callback contains 2 parameters, error and meetingDetailsResponse.\n   * error can either contain an error of type SdkError, incase of an error, or null when get is successful\n   * result can either contain a IMeetingDetailsResponse value, in case of a successful get or null when the get fails\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function getMeetingDetails(\n    callback: (error: SdkError | null, meetingDetails: IMeetingDetailsResponse | null) => void,\n  ): void {\n    if (!callback) {\n      throw new Error('[get meeting details] Callback cannot be null');\n    }\n    ensureInitialized(\n      runtime,\n      FrameContexts.sidePanel,\n      FrameContexts.meetingStage,\n      FrameContexts.settings,\n      FrameContexts.content,\n    );\n    sendMessageToParent('meeting.getMeetingDetails', callback);\n  }\n\n  /**\n   * @hidden\n   * Allows an app to get the authentication token for the anonymous or guest user in the meeting\n   *\n   * @param callback - Callback contains 2 parameters, error and authenticationTokenOfAnonymousUser.\n   * error can either contain an error of type SdkError, incase of an error, or null when get is successful\n   * authenticationTokenOfAnonymousUser can either contain a string value, incase of a successful get or null when the get fails\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function getAuthenticationTokenForAnonymousUser(\n    callback: (error: SdkError | null, authenticationTokenOfAnonymousUser: string | null) => void,\n  ): void {\n    if (!callback) {\n      throw new Error('[get Authentication Token For AnonymousUser] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel, FrameContexts.meetingStage, FrameContexts.task);\n    sendMessageToParent('meeting.getAuthenticationTokenForAnonymousUser', callback);\n  }\n\n  /**\n   * Allows an app to get the state of the live stream in the current meeting\n   *\n   * @param callback - Callback contains 2 parameters: error and liveStreamState.\n   * error can either contain an error of type SdkError, in case of an error, or null when get is successful\n   * liveStreamState can either contain a LiveStreamState value, or null when operation fails\n   */\n  export function getLiveStreamState(callback: getLiveStreamStateCallbackFunctionType): void {\n    if (!callback) {\n      throw new Error('[get live stream state] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    sendMessageToParent('meeting.getLiveStreamState', callback);\n  }\n\n  /**\n   * Allows an app to request the live streaming be started at the given streaming url\n   *\n   * @remarks\n   * Use getLiveStreamState or registerLiveStreamChangedHandler to get updates on the live stream state\n   *\n   * @param streamUrl - the url to the stream resource\n   * @param streamKey - the key to the stream resource\n   * @param callback - Callback contains error parameter which can be of type SdkError in case of an error, or null when operation is successful\n   */\n  export function requestStartLiveStreaming(\n    callback: liveStreamErrorCallbackFunctionType,\n    streamUrl: string,\n    streamKey?: string,\n  ): void {\n    if (!callback) {\n      throw new Error('[request start live streaming] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    sendMessageToParent('meeting.requestStartLiveStreaming', [streamUrl, streamKey], callback);\n  }\n\n  /**\n   * Allows an app to request the live streaming be stopped at the given streaming url\n   *\n   * @remarks\n   * Use getLiveStreamState or registerLiveStreamChangedHandler to get updates on the live stream state\n   *\n   * @param callback - Callback contains error parameter which can be of type SdkError in case of an error, or null when operation is successful\n   */\n  export function requestStopLiveStreaming(callback: liveStreamErrorCallbackFunctionType): void {\n    if (!callback) {\n      throw new Error('[request stop live streaming] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    sendMessageToParent('meeting.requestStopLiveStreaming', callback);\n  }\n\n  /**\n   * Registers a handler for changes to the live stream.\n   *\n   * @remarks\n   * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n   *\n   * @param handler - The handler to invoke when the live stream state changes\n   */\n  export function registerLiveStreamChangedHandler(handler: registerLiveStreamChangedHandlerFunctionType): void {\n    if (!handler) {\n      throw new Error('[register live stream changed handler] Handler cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    registerHandler('meeting.liveStreamChanged', handler);\n  }\n\n  /**\n   * Allows an app to share contents in the meeting\n   *\n   * @param callback - Callback contains 2 parameters, error and result.\n   * error can either contain an error of type SdkError, incase of an error, or null when share is successful\n   * result can either contain a true value, incase of a successful share or null when the share fails\n   * @param appContentUrl - is the input URL which needs to be shared on to the stage\n   */\n  export function shareAppContentToStage(callback: errorCallbackFunctionType, appContentUrl: string): void {\n    if (!callback) {\n      throw new Error('[share app content to stage] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel, FrameContexts.meetingStage);\n    sendMessageToParent('meeting.shareAppContentToStage', [appContentUrl], callback);\n  }\n\n  /**\n   * Provides information related app's in-meeting sharing capabilities\n   *\n   * @param callback - Callback contains 2 parameters, error and result.\n   * error can either contain an error of type SdkError (error indication), or null (non-error indication)\n   * appContentStageSharingCapabilities can either contain an IAppContentStageSharingCapabilities object\n   * (indication of successful retrieval), or null (indication of failed retrieval)\n   */\n  export function getAppContentStageSharingCapabilities(callback: getAppContentCallbackFunctionType): void {\n    if (!callback) {\n      throw new Error('[get app content stage sharing capabilities] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel, FrameContexts.meetingStage);\n    sendMessageToParent('meeting.getAppContentStageSharingCapabilities', callback);\n  }\n\n  /**\n   * @hidden\n   * Hide from docs.\n   * Terminates current stage sharing session in meeting\n   *\n   * @param callback - Callback contains 2 parameters, error and result.\n   * error can either contain an error of type SdkError (error indication), or null (non-error indication)\n   * result can either contain a true boolean value (successful termination), or null (unsuccessful fetch)\n   */\n  export function stopSharingAppContentToStage(callback: errorCallbackFunctionType): void {\n    if (!callback) {\n      throw new Error('[stop sharing app content to stage] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel, FrameContexts.meetingStage);\n    sendMessageToParent('meeting.stopSharingAppContentToStage', callback);\n  }\n\n  /**\n   * Provides information related to current stage sharing state for app\n   *\n   * @param callback - Callback contains 2 parameters, error and result.\n   * error can either contain an error of type SdkError (error indication), or null (non-error indication)\n   * appContentStageSharingState can either contain an IAppContentStageSharingState object\n   * (indication of successful retrieval), or null (indication of failed retrieval)\n   */\n  export function getAppContentStageSharingState(callback: getAppContentStageCallbackFunctionType): void {\n    if (!callback) {\n      throw new Error('[get app content stage sharing state] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel, FrameContexts.meetingStage);\n    sendMessageToParent('meeting.getAppContentStageSharingState', callback);\n  }\n\n  /**\n   * Registers a handler for changes to paticipant speaking states. This API returns {@link ISpeakingState}, which will have isSpeakingDetected\n   * and/or an error object. If any participant is speaking, isSpeakingDetected will be true. If no participants are speaking, isSpeakingDetected\n   * will be false. Default value is false. Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n   *\n   * @param handler The handler to invoke when the speaking state of any participant changes (start/stop speaking).\n   */\n  export function registerSpeakingStateChangeHandler(handler: registerSpeakingStateChangeHandlerFunctionType): void {\n    if (!handler) {\n      throw new Error('[registerSpeakingStateChangeHandler] Handler cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel, FrameContexts.meetingStage);\n    registerHandler('meeting.speakingStateChanged', handler);\n  }\n\n  /**\n   * Registers a handler for changes to the selfParticipant's (current user's) raiseHandState. If the selfParticipant raises their hand, isHandRaised\n   * will be true. By default and if the selfParticipant hand is lowered, isHandRaised will be false. This API will return {@link RaiseHandStateChangedEventData}\n   * that will have the raiseHandState or an error object. Only one handler can be registered at a time. A subsequent registration\n   * replaces an existing registration.\n   *\n   * @param handler The handler to invoke when the selfParticipant's (current user's) raiseHandState changes.\n   *\n   * @hidden\n   * Hide from docs.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   *\n   * @beta\n   */\n  export function registerRaiseHandStateChangedHandler(\n    handler: (eventData: RaiseHandStateChangedEventData) => void,\n  ): void {\n    if (!handler) {\n      throw new Error('[registerRaiseHandStateChangedHandler] Handler cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel, FrameContexts.meetingStage);\n    registerHandler('meeting.raiseHandStateChanged', handler);\n  }\n\n  /**\n   * Registers a handler for receiving meeting reactions. When the selfParticipant (current user) successfully sends a meeting reaction and it is being rendered on the UI, the meetingReactionType will be populated. Only one handler can be registered\n   * at a time. A subsequent registration replaces an existing registration.\n   *\n   * @param handler The handler to invoke when the selfParticipant (current user) successfully sends a meeting reaction\n   *\n   * @hidden\n   * Hide from docs.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   *\n   * @beta\n   */\n  export function registerMeetingReactionReceivedHandler(\n    handler: (eventData: MeetingReactionReceivedEventData) => void,\n  ): void {\n    if (!handler) {\n      throw new Error('[registerMeetingReactionReceivedHandler] Handler cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel, FrameContexts.meetingStage);\n    registerHandler('meeting.meetingReactionReceived', handler);\n  }\n\n  /**\n   * Nested namespace for functions to control behavior of the app share button\n   *\n   * @beta\n   */\n  export namespace appShareButton {\n    /**\n     * Property bag for the setVisibilityInfo\n     *\n     * @beta\n     */\n    export interface ShareInformation {\n      /**\n       * boolean flag to set show or hide app share button\n       */\n      isVisible: boolean;\n\n      /**\n       * optional string contentUrl, which will override contentUrl coming from Manifest\n       */\n      contentUrl?: string;\n    }\n    /**\n     * By default app share button will be hidden and this API will govern the visibility of it.\n     *\n     * This function can be used to hide/show app share button in meeting,\n     * along with contentUrl (overrides contentUrl populated in app manifest)\n     * @throws standard Invalid Url error\n     * @param shareInformation has two elements, one isVisible boolean flag and another\n     * optional string contentUrl, which will override contentUrl coming from Manifest\n     * @beta\n     */\n    export function setOptions(shareInformation: ShareInformation): void {\n      ensureInitialized(runtime, FrameContexts.sidePanel);\n      if (shareInformation.contentUrl) {\n        new URL(shareInformation.contentUrl);\n      }\n      sendMessageToParent('meeting.appShareButton.setOptions', [shareInformation]);\n    }\n  }\n\n  /**\n   * Have the app handle audio (mic & speaker) and turn off host audio.\n   *\n   * When {@link RequestAppAudioHandlingParams.isAppHandlingAudio} is true, the host will switch to audioless mode\n   *   Registers for mic mute status change events, which are events that the app can receive from the host asking the app to\n   *   mute or unmute the microphone.\n   *\n   * When {@link RequestAppAudioHandlingParams.isAppHandlingAudio} is false, the host will switch out of audioless mode\n   *   Unregisters the mic mute status change events so the app will no longer receive these events\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   * @throws Error if {@link RequestAppAudioHandlingParams.micMuteStateChangedCallback} parameter is not defined\n   *\n   * @param requestAppAudioHandlingParams - {@link RequestAppAudioHandlingParams} object with values for the audio switchover\n   * @param callback - Callback with one parameter, the result\n   * can either be true (the host is now in audioless mode) or false (the host is not in audioless mode)\n   *\n   * @hidden\n   * Hide from docs.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   *\n   * @beta\n   */\n  export function requestAppAudioHandling(\n    requestAppAudioHandlingParams: RequestAppAudioHandlingParams,\n    callback: (isHostAudioless: boolean) => void,\n  ): void {\n    if (!callback) {\n      throw new Error('[requestAppAudioHandling] Callback response cannot be null');\n    }\n    if (!requestAppAudioHandlingParams.micMuteStateChangedCallback) {\n      throw new Error('[requestAppAudioHandling] Callback Mic mute state handler cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel, FrameContexts.meetingStage);\n\n    if (requestAppAudioHandlingParams.isAppHandlingAudio) {\n      startAppAudioHandling(requestAppAudioHandlingParams, callback);\n    } else {\n      stopAppAudioHandling(requestAppAudioHandlingParams, callback);\n    }\n  }\n\n  function startAppAudioHandling(\n    requestAppAudioHandlingParams: RequestAppAudioHandlingParams,\n    callback: (isHostAudioless: boolean) => void,\n  ): void {\n    const callbackInternalRequest = (error: SdkError | null, isHostAudioless: boolean | null): void => {\n      if (error && isHostAudioless != null) {\n        throw new Error('[requestAppAudioHandling] Callback response - both parameters cannot be set');\n      }\n      if (error) {\n        throw new Error(`[requestAppAudioHandling] Callback response - SDK error ${error.errorCode} ${error.message}`);\n      }\n      if (typeof isHostAudioless !== 'boolean') {\n        throw new Error('[requestAppAudioHandling] Callback response - isHostAudioless must be a boolean');\n      }\n\n      const micStateChangedCallback = async (micState: MicState): Promise<void> => {\n        try {\n          const newMicState = await requestAppAudioHandlingParams.micMuteStateChangedCallback(micState);\n\n          const micStateDidUpdate = newMicState.isMicMuted === micState.isMicMuted;\n          setMicStateWithReason(\n            newMicState,\n            micStateDidUpdate ? MicStateChangeReason.HostInitiated : MicStateChangeReason.AppDeclinedToChange,\n          );\n        } catch {\n          setMicStateWithReason(micState, MicStateChangeReason.AppFailedToChange);\n        }\n      };\n      registerHandler('meeting.micStateChanged', micStateChangedCallback);\n\n      callback(isHostAudioless);\n    };\n    sendMessageToParent(\n      'meeting.requestAppAudioHandling',\n      [requestAppAudioHandlingParams.isAppHandlingAudio],\n      callbackInternalRequest,\n    );\n  }\n\n  function stopAppAudioHandling(\n    requestAppAudioHandlingParams: RequestAppAudioHandlingParams,\n    callback: (isHostAudioless: boolean) => void,\n  ): void {\n    const callbackInternalStop = (error: SdkError | null, isHostAudioless: boolean | null): void => {\n      if (error && isHostAudioless != null) {\n        throw new Error('[requestAppAudioHandling] Callback response - both parameters cannot be set');\n      }\n      if (error) {\n        throw new Error(`[requestAppAudioHandling] Callback response - SDK error ${error.errorCode} ${error.message}`);\n      }\n      if (typeof isHostAudioless !== 'boolean') {\n        throw new Error('[requestAppAudioHandling] Callback response - isHostAudioless must be a boolean');\n      }\n\n      if (doesHandlerExist('meeting.micStateChanged')) {\n        removeHandler('meeting.micStateChanged');\n      }\n\n      callback(isHostAudioless);\n    };\n\n    sendMessageToParent(\n      'meeting.requestAppAudioHandling',\n      [requestAppAudioHandlingParams.isAppHandlingAudio],\n      callbackInternalStop,\n    );\n  }\n\n  /**\n   * Notifies the host that the microphone state has changed in the app.\n   * @param micState - The new state that the microphone is in\n   *   isMicMuted - Boolean to indicate the current mute status of the mic.\n   *\n   * @hidden\n   * Hide from docs.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   *\n   * @beta\n   */\n  export function updateMicState(micState: MicState): void {\n    setMicStateWithReason(micState, MicStateChangeReason.AppInitiated);\n  }\n\n  function setMicStateWithReason(micState: MicState, reason: MicStateChangeReason): void {\n    ensureInitialized(runtime, FrameContexts.sidePanel, FrameContexts.meetingStage);\n    sendMessageToParent('meeting.updateMicState', [micState, reason]);\n  }\n}\n","import { sendAndHandleSdkError } from '../internal/communication';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { callCallbackWithErrorOrResultOrNullFromPromiseAndReturnPromise, InputFunction } from '../internal/utils';\nimport { errorNotSupportedOnPlatform, FrameContexts } from './constants';\nimport { SdkError } from './interfaces';\nimport { runtime } from './runtime';\n\nexport namespace monetization {\n  /**\n   * @hidden\n   * Data structure to represent a subscription plan.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface PlanInfo {\n    /**\n     * @hidden\n     * plan id\n     */\n    planId: string;\n    /**\n     * @hidden\n     * term of the plan\n     */\n    term: string;\n  }\n\n  /**\n   * @hidden\n   * Open dialog to start user's purchase experience\n   *\n   * @param planInfo optional parameter. It contains info of the subscription plan pushed to users.\n   * error can either contain an error of type SdkError, incase of an error, or null when get is successful\n   * @returns Promise that will be resolved when the operation has completed or rejected with SdkError value\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function openPurchaseExperience(planInfo?: PlanInfo): Promise<void>;\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link monetization.openPurchaseExperience monetization.openPurchaseExperience(planInfo?: PlanInfo): Promise\\<void\\>} instead.\n   *\n   * @hidden\n   * Open dialog to start user's purchase experience\n   *\n   * @param callback Callback contains 1 parameters, error.\n   * @param planInfo optional parameter. It contains info of the subscription plan pushed to users.\n   * error can either contain an error of type SdkError, incase of an error, or null when get is successful\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function openPurchaseExperience(callback: (error: SdkError | null) => void, planInfo?: PlanInfo): void;\n  /**\n   * @hidden\n   * This function is the overloaded implementation of openPurchaseExperience.\n   * Since the method signatures of the v1 callback and v2 promise differ in the type of the first parameter,\n   * we need to do an extra check to know the typeof the @param1 to set the proper arguments of the utility function.\n   * @param param1\n   * @param param2\n   * @returns Promise that will be resolved when the operation has completed or rejected with SdkError value\n   */\n  export function openPurchaseExperience(\n    param1: ((error: SdkError | null) => void) | PlanInfo | undefined,\n    param2?: PlanInfo,\n  ): Promise<void> {\n    let callback: ((error: SdkError | null) => void) | undefined;\n    /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n    let planInfo: PlanInfo;\n    if (typeof param1 === 'function') {\n      callback = param1;\n      planInfo = param2;\n    } else {\n      planInfo = param1;\n    }\n    const wrappedFunction: InputFunction<void> = () => {\n      return new Promise<void>((resolve) => {\n        if (!isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n        resolve(sendAndHandleSdkError('monetization.openPurchaseExperience', planInfo));\n      });\n    };\n\n    ensureInitialized(runtime, FrameContexts.content);\n    return callCallbackWithErrorOrResultOrNullFromPromiseAndReturnPromise(wrappedFunction, callback);\n  }\n\n  /**\n   * @hidden\n   *\n   * Checks if the monetization capability is supported by the host\n   * @returns boolean to represent whether the monetization capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.monetization ? true : false;\n  }\n}\n","import { sendAndHandleStatusAndReason } from '../internal/communication';\nimport { createTeamsDeepLinkForCalendar } from '../internal/deepLinkUtilities';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { FrameContexts } from './constants';\nimport { runtime } from './runtime';\n\n/**\n * Interact with the user's calendar, including opening calendar items and composing meetings.\n */\nexport namespace calendar {\n  /**\n   * Opens a calendar item.\n   *\n   * @param openCalendarItemParams - object containing unique ID of the calendar item to be opened.\n   */\n  export function openCalendarItem(openCalendarItemParams: OpenCalendarItemParams): Promise<void> {\n    return new Promise<void>((resolve) => {\n      ensureInitialized(runtime, FrameContexts.content);\n      if (!isSupported()) {\n        throw new Error('Not supported');\n      }\n\n      if (!openCalendarItemParams.itemId || !openCalendarItemParams.itemId.trim()) {\n        throw new Error('Must supply an itemId to openCalendarItem');\n      }\n\n      resolve(sendAndHandleStatusAndReason('calendar.openCalendarItem', openCalendarItemParams));\n    });\n  }\n\n  /**\n   * Compose a new meeting in the user's calendar.\n   *\n   * @param composeMeetingParams - object containing various properties to set up the meeting details.\n   */\n  export function composeMeeting(composeMeetingParams: ComposeMeetingParams): Promise<void> {\n    return new Promise<void>((resolve) => {\n      ensureInitialized(runtime, FrameContexts.content);\n      if (!isSupported()) {\n        throw new Error('Not supported');\n      }\n      if (runtime.isLegacyTeams) {\n        resolve(\n          sendAndHandleStatusAndReason(\n            'executeDeepLink',\n            createTeamsDeepLinkForCalendar(\n              composeMeetingParams.attendees,\n              composeMeetingParams.startTime,\n              composeMeetingParams.endTime,\n              composeMeetingParams.subject,\n              composeMeetingParams.content,\n            ),\n          ),\n        );\n      } else {\n        resolve(sendAndHandleStatusAndReason('calendar.composeMeeting', composeMeetingParams));\n      }\n    });\n  }\n\n  /**\n   * Checks if the calendar capability is supported by the host\n   * @returns boolean to represent whether the calendar capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.calendar ? true : false;\n  }\n\n  /** Open calendar item parameters. */\n  export interface OpenCalendarItemParams {\n    /** An unique base64-encoded string id that represents the event's unique identifier of the calendar item to be opened. */\n    itemId: string;\n  }\n\n  /** Compose meeting parameters */\n\n  export interface ComposeMeetingParams {\n    /** An array of email addresses, user name, or user id of the attendees to invite to the meeting. */\n    attendees?: string[];\n    /** The start time of the meeting in MM/DD/YYYY HH:MM:SS format. */\n    startTime?: string;\n    /** The end time of the meeting in MM/DD/YYYY HH:MM:SS format. */\n    endTime?: string;\n    /** The subject line of the meeting. */\n    subject?: string;\n    /** The body content of the meeting. */\n    content?: string;\n  }\n}\n","import { sendAndHandleStatusAndReason } from '../internal/communication';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { FrameContexts } from './constants';\nimport { runtime } from './runtime';\n\n/**\n * Used to interact with mail capability, including opening and composing mail.\n */\nexport namespace mail {\n  /**\n   * Opens a mail message in the host.\n   *\n   * @param openMailItemParams - Object that specifies the ID of the mail message.\n   */\n  export function openMailItem(openMailItemParams: OpenMailItemParams): Promise<void> {\n    return new Promise<void>((resolve) => {\n      ensureInitialized(runtime, FrameContexts.content);\n      if (!isSupported()) {\n        throw new Error('Not supported');\n      }\n\n      if (!openMailItemParams.itemId || !openMailItemParams.itemId.trim()) {\n        throw new Error('Must supply an itemId to openMailItem');\n      }\n\n      resolve(sendAndHandleStatusAndReason('mail.openMailItem', openMailItemParams));\n    });\n  }\n\n  /**\n   * Compose a new email in the user's mailbox.\n   *\n   * @param composeMailParams - Object that specifies the type of mail item to compose and the details of the mail item.\n   *\n   */\n  export function composeMail(composeMailParams: ComposeMailParams): Promise<void> {\n    return new Promise<void>((resolve) => {\n      ensureInitialized(runtime, FrameContexts.content);\n      if (!isSupported()) {\n        throw new Error('Not supported');\n      }\n\n      resolve(sendAndHandleStatusAndReason('mail.composeMail', composeMailParams));\n    });\n  }\n\n  /**\n   * Checks if the mail capability is supported by the host\n   * @returns boolean to represent whether the mail capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.mail ? true : false;\n  }\n\n  /** Defines the parameters used to open a mail item in the user's mailbox */\n  export interface OpenMailItemParams {\n    /** An unique base64-encoded string id that represents the itemId or messageId. */\n    itemId: string;\n  }\n\n  /** Defines compose mail types. */\n  export enum ComposeMailType {\n    /** Compose a new mail message. */\n    New = 'new',\n    /** Compose a reply to the sender of an existing mail message. */\n    Reply = 'reply',\n    /** Compose a reply to all recipients of an existing mail message. */\n    ReplyAll = 'replyAll',\n    /** Compose a new mail message with the content of an existing mail message forwarded to a new recipient. */\n    Forward = 'forward',\n  }\n\n  /**\n   * Foundational interface for all other mail compose interfaces\n   * Used for holding the type of mail item being composed\n   *\n   * @typeParam T - the identity type.\n   * @see {@link mail.ComposeMailType}\n   */\n  interface ComposeMailBase<T extends ComposeMailType> {\n    /** Type of the mail item being composed. */\n    type: T;\n  }\n\n  /**\n   * Parameters supplied when composing a new mail item\n   */\n  export interface ComposeNewParams extends ComposeMailBase<ComposeMailType.New> {\n    /**\n     * The To: recipients for the message\n     */\n    toRecipients?: string[];\n\n    /**\n     * The Cc: recipients for the message\n     */\n    ccRecipients?: string[];\n\n    /**\n     * The Bcc: recipients for the message\n     */\n    bccRecipients?: string[];\n\n    /**\n     * The subject of the message\n     */\n    subject?: string;\n\n    /**\n     * The body of the message\n     */\n    message?: string;\n  }\n\n  /**\n   * Parameters supplied when composing a reply to or forward of a message\n   *\n   * @see {@link ComposeMailType}\n   */\n  export interface ComposeReplyOrForwardParams<T extends ComposeMailType> extends ComposeMailBase<T> {\n    /** An unique base64-encoded string id that represents the mail message. */\n    itemid: string;\n  }\n\n  /**\n   * Parameters supplied to {@link composeMail} when composing a new mail item\n   *\n   * @see {@link ComposeNewParams}\n   * @see {@link ComposeReplyOrForwardParams}\n   * @see {@link ComposeMailType}\n   */\n  export type ComposeMailParams =\n    | ComposeNewParams\n    | ComposeReplyOrForwardParams<ComposeMailType.Reply>\n    | ComposeReplyOrForwardParams<ComposeMailType.ReplyAll>\n    | ComposeReplyOrForwardParams<ComposeMailType.Forward>;\n}\n","import { sendAndHandleSdkError } from '../internal/communication';\nimport { peoplePickerRequiredVersion } from '../internal/constants';\nimport { ensureInitialized, isCurrentSDKVersionAtLeast } from '../internal/internalAPIs';\nimport { validatePeoplePickerInput } from '../internal/mediaUtil';\nimport { callCallbackWithErrorOrResultFromPromiseAndReturnPromise } from '../internal/utils';\nimport { errorNotSupportedOnPlatform, FrameContexts } from './constants';\nimport { ErrorCode, SdkError } from './interfaces';\nimport { runtime } from './runtime';\n\nexport namespace people {\n  /** Select people callback function type */\n  export type selectPeopleCallbackFunctionType = (error: SdkError, people: PeoplePickerResult[]) => void;\n  /**\n   * Launches a people picker and allows the user to select one or more people from the list\n   * If the app is added to personal app scope the people picker launched is org wide and if the app is added to a chat/channel, people picker launched is also limited to the members of chat/channel\n   \n   * @param callback - Returns list of JSON object of type PeoplePickerResult which consists of Microsoft Entra IDs, display names and emails of the selected users\n   * @param peoplePickerInputs - Input parameters to launch customized people picker\n   * @returns Promise that will be fulfilled when the operation has completed\n   */\n  export function selectPeople(peoplePickerInputs?: PeoplePickerInputs): Promise<PeoplePickerResult[]>;\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link people.selectPeople people.selectPeople(peoplePickerInputs?: PeoplePickerInputs): Promise\\<PeoplePickerResult[]\\>} instead.\n   *\n   * Launches a people picker and allows the user to select one or more people from the list\n   * If the app is added to personal app scope the people picker launched is org wide and if the app is added to a chat/channel, people picker launched is also limited to the members of chat/channel\n   \n   * @param callback - Returns list of JSON object of type PeoplePickerResult which consists of Microsoft Entra IDs, display names and emails of the selected users\n   * @param peoplePickerInputs - Input parameters to launch customized people picker\n   */\n  export function selectPeople(\n    callback: selectPeopleCallbackFunctionType,\n    peoplePickerInputs?: PeoplePickerInputs,\n  ): void;\n  /**\n   * @hidden\n   * This function is the overloaded implementation of selectPeople.\n   * Since the method signatures of the v1 callback and v2 promise differ in the type of the first parameter,\n   * we need to do an extra check to know the typeof the @param1 to set the proper arguments of the utility function.\n   * @param param1\n   * @param param2\n   * @returns Promise of Array of PeoplePickerResult objects.\n   */\n  export function selectPeople(\n    param1: PeoplePickerInputs | selectPeopleCallbackFunctionType | undefined,\n    param2?: PeoplePickerInputs,\n  ): Promise<PeoplePickerResult[]> {\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task, FrameContexts.settings);\n\n    /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n    let callback: selectPeopleCallbackFunctionType;\n    /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n    let peoplePickerInputs: PeoplePickerInputs;\n\n    if (typeof param1 === 'function') {\n      [callback, peoplePickerInputs] = [param1, param2];\n    } else {\n      peoplePickerInputs = param1;\n    }\n\n    return callCallbackWithErrorOrResultFromPromiseAndReturnPromise<PeoplePickerResult[]>(\n      selectPeopleHelper,\n      callback,\n      peoplePickerInputs,\n    );\n  }\n\n  function selectPeopleHelper(peoplePickerInputs?: PeoplePickerInputs): Promise<PeoplePickerResult[]> {\n    return new Promise<PeoplePickerResult[]>((resolve) => {\n      if (!isCurrentSDKVersionAtLeast(peoplePickerRequiredVersion)) {\n        throw { errorCode: ErrorCode.OLD_PLATFORM };\n      }\n\n      /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n      if (!validatePeoplePickerInput(peoplePickerInputs)) {\n        throw { errorCode: ErrorCode.INVALID_ARGUMENTS };\n      }\n\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n      resolve(sendAndHandleSdkError('people.selectPeople', peoplePickerInputs));\n    });\n  }\n\n  /**\n   * Input parameter supplied to the People Picker API\n   */\n  export interface PeoplePickerInputs {\n    /**\n     * Optional; Set title for the people picker\n     * Default value is \"Select people\" for multiselect and \"Select a person\" for single select\n     */\n    title?: string;\n\n    /**\n     * Optional; Microsoft Entra IDs of the users to be pre-populated in the search box of people picker control\n     * If single select is enabled this value, only the first user in the list will be pre-populated\n     * Default value is null\n     */\n    setSelected?: string[];\n\n    /**\n     * Optional; launches the people picker in org wide scope even if the app is added to a chat or channel\n     * Default value is false\n     */\n    openOrgWideSearchInChatOrChannel?: boolean;\n\n    /**\n     * Optional; launches the people picker for which only 1 person can be selected\n     * Default value is false\n     */\n    singleSelect?: boolean;\n  }\n\n  /**\n   * Output user object of people picker API\n   */\n  export interface PeoplePickerResult {\n    /**\n     * user object ID (also known as Microsoft Entra ID) of the selected user\n     */\n    objectId: string;\n\n    /**\n     * Optional; display name of the selected user\n     */\n    displayName?: string;\n\n    /**\n     * Optional; email of the selected user\n     */\n    email?: string;\n  }\n\n  /**\n   * Checks if the people capability is supported by the host\n   * @returns boolean to represent whether the people capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.people ? true : false;\n  }\n}\n","import { sendAndHandleSdkError } from '../internal/communication';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { validateShowProfileRequest } from '../internal/profileUtil';\nimport { FrameContexts } from './constants';\nimport { ErrorCode } from './interfaces';\nimport { runtime } from './runtime';\n\n/**\n * Namespace for profile related APIs.\n *\n * @beta\n */\nexport namespace profile {\n  /**\n   * Opens a profile card at a specified position to show profile information about a persona.\n   * @param showProfileRequest The parameters to position the card and identify the target user.\n   * @returns Promise that will be fulfilled when the operation has completed\n   *\n   * @beta\n   */\n  export function showProfile(showProfileRequest: ShowProfileRequest): Promise<void> {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    return new Promise<void>((resolve) => {\n      const [isValid, message] = validateShowProfileRequest(showProfileRequest);\n      if (!isValid) {\n        throw { errorCode: ErrorCode.INVALID_ARGUMENTS, message };\n      }\n\n      // Convert the app provided parameters to the form suitable for postMessage.\n      const requestInternal: ShowProfileRequestInternal = {\n        modality: showProfileRequest.modality,\n        persona: showProfileRequest.persona,\n        triggerType: showProfileRequest.triggerType,\n        targetRectangle: {\n          x: showProfileRequest.targetElementBoundingRect.x,\n          y: showProfileRequest.targetElementBoundingRect.y,\n          width: showProfileRequest.targetElementBoundingRect.width,\n          height: showProfileRequest.targetElementBoundingRect.height,\n        },\n      };\n\n      resolve(sendAndHandleSdkError('profile.showProfile', requestInternal));\n    });\n  }\n\n  /**\n   * The type of modalities that are supported when showing a profile.\n   * Can be provided as an optional hint with the request and will be\n   * respected if the hosting M365 application supports it.\n   *\n   * @beta\n   */\n  export type Modality = 'Card' | 'Expanded';\n\n  /**\n   * The type of the profile trigger.\n   *  - MouseHover: The user hovered a target.\n   *  - Press: The target was pressed with either a mouse click or keyboard key press.\n   *  - AppRequest: The show profile request is happening programmatically, without direct user interaction.\n   *\n   * @beta\n   */\n  export type TriggerType = 'MouseHover' | 'Press' | 'AppRequest';\n\n  /**\n   * The set of identifiers that are supported for resolving the persona.\n   *\n   * At least one is required, and if multiple are provided then only the highest\n   * priority one will be used (AadObjectId > Upn > Smtp). AAD is now known as \"Microsoft Entra ID\"\n   *\n   * @beta\n   */\n  export type PersonaIdentifiers = {\n    /**\n     * The object id in Microsoft Entra.\n     *\n     * This id is guaranteed to be unique for an object within a tenant,\n     * and so if provided will lead to a more performant lookup. It can\n     * be resolved via MS Graph (see https://learn.microsoft.com/graph/api/resources/users\n     * for examples).\n     */\n    readonly AadObjectId?: string;\n\n    /**\n     * The primary SMTP address.\n     */\n    readonly Smtp?: string;\n\n    /**\n     * The user principle name.\n     */\n    readonly Upn?: string;\n  };\n\n  /**\n   * The persona to show the profile for.\n   *\n   * @beta\n   */\n  export interface Persona {\n    /**\n     * The set of identifiers that are supported for resolving the persona.\n     */\n    identifiers: PersonaIdentifiers;\n\n    /**\n     * Optional display name override. If not specified the user's display name will be resolved normally.\n     */\n    displayName?: string;\n  }\n\n  /**\n   * Input parameters provided to the showProfile API.\n   *\n   * @beta\n   */\n  export interface ShowProfileRequest {\n    /**\n     * An optional hint to the hosting M365 application about which modality of the profile you want to show.\n     */\n    modality?: Modality;\n\n    /**\n     * The information about the persona to show the profile for.\n     */\n    persona: Persona;\n\n    /**\n     * The bounding rectangle of the target.\n     */\n    targetElementBoundingRect: DOMRect;\n\n    /**\n     * Specifies which user interaction was used to trigger the API call.\n     */\n    triggerType: TriggerType;\n  }\n\n  /**\n   * Checks if the profile capability is supported by the host\n   * @returns boolean to represent whether the profile capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   * @beta\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.profile ? true : false;\n  }\n}\n\n/**\n * Internal representation of a DOMRect suitable for sending via postMessage.\n */\nexport type Rectangle = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\n/**\n * @beta\n * @hidden\n * An internal representation of the showProfile parameters suitable for sending via postMessage.\n * The hub expects to receive an object of this type.\n */\nexport interface ShowProfileRequestInternal {\n  modality?: profile.Modality;\n  persona: profile.Persona;\n  targetRectangle: Rectangle;\n  triggerType: profile.TriggerType;\n}\n","import { profile } from '../public/profile';\n\n/**\n * @hidden\n * Validates the request parameters\n * @param showProfileRequest The request parameters\n * @returns true if the parameters are valid, false otherwise\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function validateShowProfileRequest(\n  showProfileRequest: profile.ShowProfileRequest,\n): [boolean, string | undefined] {\n  if (!showProfileRequest) {\n    return [false, 'A request object is required'];\n  }\n\n  // Validate modality\n  if (showProfileRequest.modality && typeof showProfileRequest.modality !== 'string') {\n    return [false, 'modality must be a string'];\n  }\n\n  // Validate targetElementBoundingRect\n  if (\n    !showProfileRequest.targetElementBoundingRect ||\n    typeof showProfileRequest.targetElementBoundingRect !== 'object'\n  ) {\n    return [false, 'targetElementBoundingRect must be a DOMRect'];\n  }\n\n  // Validate triggerType\n  if (!showProfileRequest.triggerType || typeof showProfileRequest.triggerType !== 'string') {\n    return [false, 'triggerType must be a valid string'];\n  }\n\n  return validatePersona(showProfileRequest.persona);\n}\n\n/**\n * @hidden\n * Validates the persona that is used to resolve the profile target\n * @param persona The persona object\n * @returns true if the persona is valid, false otherwise\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nfunction validatePersona(persona: profile.Persona): [boolean, string | undefined] {\n  if (!persona) {\n    return [false, 'persona object must be provided'];\n  }\n\n  if (persona.displayName && typeof persona.displayName !== 'string') {\n    return [false, 'displayName must be a string'];\n  }\n\n  if (!persona.identifiers || typeof persona.identifiers !== 'object') {\n    return [false, 'persona identifiers object must be provided'];\n  }\n\n  if (!persona.identifiers.AadObjectId && !persona.identifiers.Smtp && !persona.identifiers.Upn) {\n    return [false, 'at least one valid identifier must be provided'];\n  }\n\n  if (persona.identifiers.AadObjectId && typeof persona.identifiers.AadObjectId !== 'string') {\n    return [false, 'AadObjectId identifier must be a string'];\n  }\n\n  if (persona.identifiers.Smtp && typeof persona.identifiers.Smtp !== 'string') {\n    return [false, 'Smtp identifier must be a string'];\n  }\n\n  if (persona.identifiers.Upn && typeof persona.identifiers.Upn !== 'string') {\n    return [false, 'Upn identifier must be a string'];\n  }\n\n  return [true, undefined];\n}\n","import { generateGUID } from './utils';\n\nexport class VideoFrameTick {\n  private static readonly setTimeoutCallbacks: {\n    [key: string]: {\n      callback: () => void;\n      startedAtInMs: number;\n      timeoutInMs: number;\n    };\n  } = {};\n\n  public static setTimeout(callback: () => void, timeoutInMs: number): string {\n    const startedAtInMs = performance.now();\n    const id = generateGUID();\n    VideoFrameTick.setTimeoutCallbacks[id] = {\n      callback,\n      timeoutInMs,\n      startedAtInMs,\n    };\n    return id;\n  }\n\n  public static clearTimeout(id: string): void {\n    delete VideoFrameTick.setTimeoutCallbacks[id];\n  }\n\n  public static setInterval(callback: () => void, intervalInMs: number): void {\n    VideoFrameTick.setTimeout(function next() {\n      callback();\n      VideoFrameTick.setTimeout(next, intervalInMs);\n    }, intervalInMs);\n  }\n\n  /**\n   * Call this function whenever a frame comes in, it will check if any timeout is due and call the callback\n   */\n  public static tick(): void {\n    const now = performance.now();\n    const timeoutIds = [];\n    // find all the timeouts that are due,\n    // not to invoke them in the loop to avoid modifying the collection while iterating\n    for (const key in VideoFrameTick.setTimeoutCallbacks) {\n      const callback = VideoFrameTick.setTimeoutCallbacks[key];\n      const start = callback.startedAtInMs;\n      if (now - start >= callback.timeoutInMs) {\n        timeoutIds.push(key);\n      }\n    }\n    // invoke the callbacks\n    for (const id of timeoutIds) {\n      const callback = VideoFrameTick.setTimeoutCallbacks[id];\n      callback.callback();\n      delete VideoFrameTick.setTimeoutCallbacks[id];\n    }\n  }\n}\n","import { videoEx } from '../private/videoEx';\nimport { errorNotSupportedOnPlatform } from '../public/constants';\nimport { video } from '../public/video';\nimport { sendMessageToParent } from './communication';\nimport { registerHandler } from './handlers';\nimport { inServerSideRenderingEnvironment, ssrSafeWindow } from './utils';\nimport {\n  AllowSharedBufferSource,\n  PlaneLayout,\n  VideoFrameBufferInit,\n  VideoFrameCopyToOptions,\n  VideoFrameInit,\n  VideoPixelFormat,\n} from './VideoFrameTypes';\nimport { VideoPerformanceMonitor } from './videoPerformanceMonitor';\n\n/**\n * @hidden\n * Align with the W3C spec: https://www.w3.org/TR/webcodecs/\n */\ninterface VideoFrame {\n  /**\n   * The width of the VideoFrame in pixels, potentially including non-visible padding, and prior to\n   * considering potential ratio adjustments.\n   */\n  readonly codedWidth: number;\n  /**\n   * The height of the VideoFrame in pixels, potentially including non-visible padding, and prior to\n   * considering potential ratio adjustments.\n   */\n  readonly codedHeight: number;\n  /**\n   * The pixel format of the VideoFrame.\n   */\n  readonly format: VideoPixelFormat | null;\n  /**\n   * An integer indicating the timestamp of the video in microseconds.\n   */\n  readonly timestamp: number;\n  /**\n   * Clears all states and releases the reference to the media resource\n   */\n  close(): void;\n  /**\n   * Copies the contents of the VideoFrame to an ArrayBuffer\n   * @param destination An ArrayBuffer, a TypedArray, or a DataView to copy to.\n   * @param options An object containing rect - the rectangle of pixels to copy from the VideoFrame.\n   */\n  copyTo(destination: AllowSharedBufferSource, options?: VideoFrameCopyToOptions): Promise<PlaneLayout[]>;\n}\n\n/**\n * @hidden\n */\n// eslint-disable-next-line strict-null-checks/all\ndeclare const VideoFrame: {\n  prototype: video.VideoFrame;\n  new (source: CanvasImageSource, init?: VideoFrameInit): video.VideoFrame;\n  new (data: AllowSharedBufferSource, init: VideoFrameBufferInit): video.VideoFrame;\n};\n\n/**\n * @hidden\n * Create a MediaStreamTrack from the media stream with the given streamId and processed by videoFrameHandler.\n */\nexport async function processMediaStream(\n  streamId: string,\n  videoFrameHandler: video.VideoFrameHandler,\n  notifyError: (string) => void,\n  videoPerformanceMonitor?: VideoPerformanceMonitor,\n): Promise<void> {\n  const generator = createProcessedStreamGeneratorWithoutSource();\n  !inServerSideRenderingEnvironment() && window['chrome']?.webview?.registerTextureStream(streamId, generator);\n  pipeVideoSourceToGenerator(\n    await getInputVideoTrack(streamId, notifyError, videoPerformanceMonitor),\n    new DefaultTransformer(notifyError, videoFrameHandler),\n    generator.writable,\n  );\n}\n\n/**\n * @hidden\n * Create a MediaStreamTrack from the media stream with the given streamId and processed by videoFrameHandler.\n * The videoFrameHandler will receive metadata of the video frame.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport async function processMediaStreamWithMetadata(\n  streamId: string,\n  videoFrameHandler: videoEx.VideoFrameHandler,\n  notifyError: (string) => void,\n  videoPerformanceMonitor?: VideoPerformanceMonitor,\n): Promise<void> {\n  const generator = createProcessedStreamGeneratorWithoutSource();\n  !inServerSideRenderingEnvironment() && window['chrome']?.webview?.registerTextureStream(streamId, generator);\n  pipeVideoSourceToGenerator(\n    await getInputVideoTrack(streamId, notifyError, videoPerformanceMonitor),\n    new TransformerWithMetadata(notifyError, videoFrameHandler),\n    generator.writable,\n  );\n}\n\n/**\n * Get the video track from the media stream gotten from chrome.webview.getTextureStream(streamId).\n */\nasync function getInputVideoTrack(\n  streamId: string,\n  notifyError: (string) => void,\n  videoPerformanceMonitor?: VideoPerformanceMonitor,\n): Promise<MediaStreamTrack> {\n  if (inServerSideRenderingEnvironment()) {\n    throw errorNotSupportedOnPlatform;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chrome = ssrSafeWindow()['chrome'] as any;\n  try {\n    videoPerformanceMonitor?.reportGettingTextureStream(streamId);\n    const mediaStream = await chrome.webview.getTextureStream(streamId);\n    const tracks = mediaStream.getVideoTracks();\n    if (tracks.length === 0) {\n      throw new Error(`No video track in stream ${streamId}`);\n    }\n    videoPerformanceMonitor?.reportTextureStreamAcquired();\n    return tracks[0];\n  } catch (error) {\n    const errorMsg = `Failed to get video track from stream ${streamId}, error: ${error}`;\n    notifyError(errorMsg);\n    throw new Error(`Internal error: can't get video track from stream ${streamId}`);\n  }\n}\n\n/**\n * The function to create a MediaStreamTrack generator.\n * The generator can then get the processed frames as media stream source.\n * The generator can be registered back to the media stream so that the host can get the processed frames.\n */\nfunction createProcessedStreamGeneratorWithoutSource(): MediaStreamTrack & { writable: WritableStream } {\n  if (inServerSideRenderingEnvironment()) {\n    throw errorNotSupportedOnPlatform;\n  }\n  const MediaStreamTrackGenerator = window['MediaStreamTrackGenerator'];\n  if (!MediaStreamTrackGenerator) {\n    throw errorNotSupportedOnPlatform;\n  }\n  return new MediaStreamTrackGenerator({ kind: 'video' });\n}\n\n/**\n * The function to create a processed video track from the original video track.\n * It reads frames from the video track and pipes them to the video frame callback to process the frames.\n * The processed frames are then enqueued to the generator.\n */\nfunction pipeVideoSourceToGenerator(\n  videoTrack: unknown,\n  transformer: TransformerWithMetadata | DefaultTransformer,\n  sink: WritableStream,\n): void {\n  const MediaStreamTrackProcessor = ssrSafeWindow()['MediaStreamTrackProcessor'];\n  const processor = new MediaStreamTrackProcessor({ track: videoTrack });\n  const source = processor.readable;\n\n  source.pipeThrough(new TransformStream(transformer)).pipeTo(sink);\n}\n\n/**\n * @hidden\n * Error messages during video frame transformation.\n */\nenum VideoFrameTransformErrors {\n  TimestampIsNull = 'timestamp of the original video frame is null',\n  UnsupportedVideoFramePixelFormat = 'Unsupported video frame pixel format',\n}\n\nclass DefaultTransformer {\n  public constructor(private notifyError: (string) => void, private videoFrameHandler: video.VideoFrameHandler) {}\n\n  public transform = async (originalFrame, controller): Promise<void> => {\n    const timestamp = originalFrame.timestamp;\n    if (timestamp !== null) {\n      try {\n        const frameProcessedByApp = await this.videoFrameHandler({ videoFrame: originalFrame });\n        // the current typescript version(4.6.4) dosn't support webcodecs API fully, we have to do type conversion here.\n        const processedFrame = new VideoFrame(frameProcessedByApp as unknown as CanvasImageSource, {\n          // we need the timestamp to be unchanged from the oirginal frame, so we explicitly set it here.\n          timestamp: timestamp,\n        });\n        controller.enqueue(processedFrame);\n        originalFrame.close();\n        (frameProcessedByApp as VideoFrame).close();\n      } catch (error) {\n        originalFrame.close();\n        this.notifyError(error);\n      }\n    } else {\n      this.notifyError(VideoFrameTransformErrors.TimestampIsNull);\n    }\n  };\n}\n\n/**\n * @hidden\n * Utility class to parse the header of a one-texture-input texture.\n */\nclass OneTextureHeader {\n  private readonly headerDataView: Uint32Array;\n  // Identifier for the texture layout, which is the 4-byte ASCII string \"oti1\" hardcoded by the host\n  // (oti1 stands for \"one texture input version 1\")\n  private readonly ONE_TEXTURE_INPUT_ID = 0x6f746931;\n  private readonly INVALID_HEADER_ERROR = 'Invalid video frame header';\n  private readonly UNSUPPORTED_LAYOUT_ERROR = 'Unsupported texture layout';\n  public constructor(private readonly headerBuffer: ArrayBuffer, private readonly notifyError: (string) => void) {\n    this.headerDataView = new Uint32Array(headerBuffer);\n    // headerDataView will contain the following data:\n    // 0: oneTextureLayoutId\n    // 1: version\n    // 2: frameRowOffset\n    // 3: frameFormat\n    // 4: frameWidth\n    // 5: frameHeight\n    // 6: multiStreamHeaderRowOffset\n    // 7: multiStreamCount\n    if (this.headerDataView.length < 8) {\n      this.notifyError(this.INVALID_HEADER_ERROR);\n      throw new Error(this.INVALID_HEADER_ERROR);\n    }\n    // ensure the texture layout is supported\n    if (this.headerDataView[0] !== this.ONE_TEXTURE_INPUT_ID) {\n      this.notifyError(this.UNSUPPORTED_LAYOUT_ERROR);\n      throw new Error(this.UNSUPPORTED_LAYOUT_ERROR);\n    }\n  }\n\n  public get oneTextureLayoutId(): number {\n    return this.headerDataView[0];\n  }\n\n  public get version(): number {\n    return this.headerDataView[1];\n  }\n\n  public get frameRowOffset(): number {\n    return this.headerDataView[2];\n  }\n\n  public get frameFormat(): number {\n    return this.headerDataView[3];\n  }\n\n  public get frameWidth(): number {\n    return this.headerDataView[4];\n  }\n\n  public get frameHeight(): number {\n    return this.headerDataView[5];\n  }\n\n  public get multiStreamHeaderRowOffset(): number {\n    return this.headerDataView[6];\n  }\n\n  public get multiStreamCount(): number {\n    return this.headerDataView[7];\n  }\n}\n\n/**\n * @hidden\n * Utility class to parse the metadata of a one-texture-input texture.\n */\nclass OneTextureMetadata {\n  private readonly metadataMap: Map<number, Uint8Array> = new Map();\n  // Stream id for audio inference metadata, which is the 4-byte ASCII string \"1dia\" hardcoded by the host\n  // (1dia stands for \"audio inference data version 1\")\n  private readonly AUDIO_INFERENCE_RESULT_STREAM_ID = 0x31646961;\n  public constructor(metadataBuffer: ArrayBuffer, streamCount: number) {\n    const metadataDataView = new Uint32Array(metadataBuffer);\n    for (let i = 0, index = 0; i < streamCount; i++) {\n      const streamId = metadataDataView[index++];\n      const streamDataOffset = metadataDataView[index++];\n      const streamDataSize = metadataDataView[index++];\n      const streamData = new Uint8Array(metadataBuffer, streamDataOffset, streamDataSize);\n      this.metadataMap.set(streamId, streamData);\n    }\n  }\n\n  public get audioInferenceResult(): Uint8Array | undefined {\n    return this.metadataMap.get(this.AUDIO_INFERENCE_RESULT_STREAM_ID);\n  }\n}\n\nclass TransformerWithMetadata {\n  private shouldDiscardAudioInferenceResult = false;\n\n  public constructor(private notifyError: (string) => void, private videoFrameHandler: videoEx.VideoFrameHandler) {\n    registerHandler(\n      'video.mediaStream.audioInferenceDiscardStatusChange',\n      ({ discardAudioInferenceResult }: { discardAudioInferenceResult: boolean }) => {\n        this.shouldDiscardAudioInferenceResult = discardAudioInferenceResult;\n      },\n    );\n  }\n\n  public transform = async (originalFrame, controller): Promise<void> => {\n    const timestamp = originalFrame.timestamp;\n    if (timestamp !== null) {\n      try {\n        const { videoFrame, metadata: { audioInferenceResult } = {} } = await this.extractVideoFrameAndMetadata(\n          originalFrame,\n        );\n        const frameProcessedByApp = await this.videoFrameHandler({ videoFrame, audioInferenceResult });\n        // the current typescript version(4.6.4) dosn't support webcodecs API fully, we have to do type conversion here.\n        const processedFrame = new VideoFrame(frameProcessedByApp as unknown as CanvasImageSource, {\n          // we need the timestamp to be unchanged from the oirginal frame, so we explicitly set it here.\n          timestamp: timestamp,\n        });\n        controller.enqueue(processedFrame);\n        videoFrame.close();\n        originalFrame.close();\n        (frameProcessedByApp as VideoFrame).close();\n      } catch (error) {\n        originalFrame.close();\n        this.notifyError(error);\n      }\n    } else {\n      this.notifyError(VideoFrameTransformErrors.TimestampIsNull);\n    }\n  };\n\n  /**\n   * @hidden\n   * Extract video frame and metadata from the given texture.\n   * The given texure should be in NV12 format and the layout of the texture should be:\n   * | Texture layout        |\n   * | :---                  |\n   * | Header                |\n   * | Real video frame data |\n   * | Metadata              |\n   *\n   * The header data is in the first two rows with the following format:\n   * | oneTextureLayoutId | version | frameRowOffset | frameFormat | frameWidth | frameHeight | multiStreamHeaderRowOffset | multiStreamCount | ...   |\n   * |    :---:           | :---:   | :---:          |  :---:      |  :---:     |  :---:      |  :---:                     |  :---:           | :---: |\n   * | 4 bytes            | 4 bytes | 4 bytes        | 4 bytes     | 4 bytes    | 4 bytes     | 4 bytes                    | 4 bytes          | ...   |\n   *\n   * After header, it comes with the real video frame data.\n   * At the end of the texture, it comes with the metadata. The metadata section can contain multiple types of metadata.\n   * Each type of metadata is called a stream. The section is in the following format:\n   * | stream1.id | stream1.dataOffset | stream1.dataSize | stream2.id | stream2.dataOffset | stream2.dataSize | ... | stream1.data | stream2.data | ... |\n   * | :---:      | :---:              | :---:            |  :---:     |  :---:             |  :---:           |:---:|  :---:       | :---:        |:---:|\n   * | 4 bytes    | 4 bytes            | 4 bytes          | 4 bytes    | 4 bytes            | 4 bytes          | ... | ...          | ...          | ... |\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  private extractVideoFrameAndMetadata = async (\n    texture: VideoFrame,\n  ): Promise<{ videoFrame: VideoFrame; metadata: { audioInferenceResult?: Uint8Array } }> => {\n    if (inServerSideRenderingEnvironment()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    if (texture.format !== 'NV12') {\n      this.notifyError(VideoFrameTransformErrors.UnsupportedVideoFramePixelFormat);\n      throw new Error(VideoFrameTransformErrors.UnsupportedVideoFramePixelFormat);\n    }\n\n    // The rectangle of pixels to copy from the texture. The first two rows are the header.\n    const headerRect = { x: 0, y: 0, width: texture.codedWidth, height: 2 };\n    // allocate buffer for the header\n    // The texture is in NV12 format (https://learn.microsoft.com/en-us/windows/win32/medfound/recommended-8-bit-yuv-formats-for-video-rendering#nv12).\n    // NV12 has one luma \"luminance\" plane Y and one UV plane with U and V values interleaved.\n    // In NV12, chroma planes (blue and red) are subsampled in both the horizontal and vertical dimensions by a factor of 2.\n    // So for a 2×2 group of pixels, you have 4 Y samples and 1 U and 1 V sample, each sample being 1 byte.\n    // for a 10×10 NV12 frame: there are 100 Y samples followed by 25 U and 25 V samples interleaved.\n    // The graphical representation of the memory layout of a 2×2 NV12 frame is as follows:\n    // | Y0 | Y1 | Y2 | Y3 | U0 | V0 |\n    // The number of pixels of the header is (headerRect.width * headerRect.height), so the number of bytes of the header is\n    // (the size of the Y plane + the size of the UV plane)\n    // which is (headerRect.width * headerRect.height) + (headerRect.width * headerRect.height) / 2\n    //            = (headerRect.width * headerRect.height * 3) / 2\n    const headerBuffer = new ArrayBuffer((headerRect.width * headerRect.height * 3) / 2);\n    await texture.copyTo(headerBuffer, { rect: headerRect });\n    const header = new OneTextureHeader(headerBuffer, this.notifyError);\n\n    // The rectangle of pixels to copy from the texture. Metadata are at the bottom.\n    const metadataRect = {\n      x: 0,\n      y: header.multiStreamHeaderRowOffset,\n      width: texture.codedWidth,\n      height: texture.codedHeight - header.multiStreamHeaderRowOffset,\n    };\n    // Allocate buffer for the metadata. The number of pixels of the metadata section is\n    // (metadataRect.width * metadataRect.height), so the number of bytes of the metadata section is\n    // (the size of the Y plane + the size of the UV plane), which is\n    // (metadataRect.width * metadataRect.height) + (metadataRect.width * metadataRect.height) / 2\n    //   = (metadataRect.width * metadataRect.height * 3) / 2\n    const metadataBuffer = new ArrayBuffer((metadataRect.width * metadataRect.height * 3) / 2);\n    await texture.copyTo(metadataBuffer, { rect: metadataRect });\n    const metadata = new OneTextureMetadata(metadataBuffer, header.multiStreamCount);\n    return {\n      videoFrame: new VideoFrame(texture as unknown as CanvasImageSource, {\n        timestamp: texture.timestamp,\n        visibleRect: {\n          x: 0,\n          y: header.frameRowOffset,\n          width: header.frameWidth,\n          height: header.frameHeight,\n        },\n      }) as VideoFrame,\n      metadata: {\n        audioInferenceResult: this.shouldDiscardAudioInferenceResult ? undefined : metadata.audioInferenceResult,\n      },\n    };\n  };\n}\n\n/**\n * @hidden\n * Video effect change call back function definition\n * @beta\n *\n * @internal\n * Limited to Microsoft-internal use\n */\ntype VideoEffectCallBack = (effectId: string | undefined, effectParam?: string) => Promise<void>;\n\n/**\n * @hidden\n */\nexport function createEffectParameterChangeCallback(\n  callback: VideoEffectCallBack,\n  videoPerformanceMonitor?: VideoPerformanceMonitor,\n) {\n  return (effectId: string | undefined, effectParam?: string): void => {\n    videoPerformanceMonitor?.reportApplyingVideoEffect(effectId || '', effectParam);\n\n    callback(effectId, effectParam)\n      .then(() => {\n        videoPerformanceMonitor?.reportVideoEffectChanged(effectId || '', effectParam);\n        sendMessageToParent('video.videoEffectReadiness', [true, effectId, undefined, effectParam]);\n      })\n      .catch((reason) => {\n        const validReason =\n          reason in video.EffectFailureReason ? reason : video.EffectFailureReason.InitializationFailure;\n        sendMessageToParent('video.videoEffectReadiness', [false, effectId, validReason, effectParam]);\n      });\n  };\n}\n\nexport { VideoEffectCallBack as DefaultVideoEffectCallBack };\n","import { VideoFrameTick } from './videoFrameTick';\n\nexport type VideoPerformanceStatisticsResult = {\n  effectId: string;\n  effectParam?: string;\n  frameWidth: number;\n  frameHeight: number;\n  /**\n   * The duration in milliseconds that the data were collected\n   */\n  duration: number;\n  /**\n   * The number of frames that were processed in the duration\n   */\n  sampleCount: number;\n  /**\n   * An array that presents counts of frames that were finished in n milliseconds:\n   * distributionBins[frameProcessingDurationInMs]=frameCount.\n   * For example, distributionBins[10] = 5 means that 5 frames were processed in 10 milliseconds.\n   */\n  distributionBins: Uint32Array;\n};\n\nexport class VideoPerformanceStatistics {\n  private static readonly initialSessionTimeoutInMs = 1000;\n  private static readonly maxSessionTimeoutInMs = 1000 * 30;\n\n  private currentSession: {\n    startedAtInMs: number;\n    timeoutInMs: number;\n    effectId: string;\n    effectParam?: string;\n    frameWidth: number;\n    frameHeight: number;\n  };\n\n  private frameProcessingStartedAt: number;\n  private distributionBins: Uint32Array;\n  private sampleCount = 0;\n  private timeoutId: string;\n\n  public constructor(\n    distributionBinSize: number,\n    /**\n     * Function to report the statistics result\n     */\n    private reportStatisticsResult: (result: VideoPerformanceStatisticsResult) => void,\n  ) {\n    this.distributionBins = new Uint32Array(distributionBinSize);\n  }\n\n  /**\n   * Call this function before processing every frame\n   */\n  public processStarts(effectId: string, frameWidth: number, frameHeight: number, effectParam?: string): void {\n    VideoFrameTick.tick();\n    if (!this.suitableForThisSession(effectId, frameWidth, frameHeight, effectParam)) {\n      this.reportAndResetSession(this.getStatistics(), effectId, effectParam, frameWidth, frameHeight);\n    }\n    this.start();\n  }\n\n  public processEnds(): void {\n    // calculate duration of the process and record it\n    const durationInMillisecond = performance.now() - this.frameProcessingStartedAt;\n    const binIndex = Math.floor(Math.max(0, Math.min(this.distributionBins.length - 1, durationInMillisecond)));\n    this.distributionBins[binIndex] += 1;\n    this.sampleCount += 1;\n  }\n\n  private getStatistics(): VideoPerformanceStatisticsResult {\n    if (!this.currentSession) {\n      return null;\n    }\n    return {\n      effectId: this.currentSession.effectId,\n      effectParam: this.currentSession.effectParam,\n      frameHeight: this.currentSession.frameHeight,\n      frameWidth: this.currentSession.frameWidth,\n      duration: performance.now() - this.currentSession.startedAtInMs,\n      sampleCount: this.sampleCount,\n      distributionBins: this.distributionBins.slice(),\n    };\n  }\n\n  private start(): void {\n    this.frameProcessingStartedAt = performance.now();\n  }\n\n  private suitableForThisSession(\n    effectId: string,\n    frameWidth: number,\n    frameHeight: number,\n    effectParam?: string,\n  ): boolean {\n    return (\n      this.currentSession &&\n      this.currentSession.effectId === effectId &&\n      this.currentSession.effectParam === effectParam &&\n      this.currentSession.frameWidth === frameWidth &&\n      this.currentSession.frameHeight === frameHeight\n    );\n  }\n\n  private reportAndResetSession(result, effectId, effectParam, frameWidth, frameHeight): void {\n    result && this.reportStatisticsResult(result);\n    this.resetCurrentSession(\n      this.getNextTimeout(effectId, this.currentSession),\n      effectId,\n      effectParam,\n      frameWidth,\n      frameHeight,\n    );\n    if (this.timeoutId) {\n      VideoFrameTick.clearTimeout(this.timeoutId);\n    }\n    this.timeoutId = VideoFrameTick.setTimeout(\n      (() => this.reportAndResetSession(this.getStatistics(), effectId, effectParam, frameWidth, frameHeight)).bind(\n        this,\n      ),\n      this.currentSession.timeoutInMs,\n    );\n  }\n\n  private resetCurrentSession(\n    timeoutInMs: number,\n    effectId: string,\n    effectParam: string,\n    frameWidth: number,\n    frameHeight: number,\n  ): void {\n    this.currentSession = {\n      startedAtInMs: performance.now(),\n      timeoutInMs,\n      effectId,\n      effectParam,\n      frameWidth,\n      frameHeight,\n    };\n    this.sampleCount = 0;\n    this.distributionBins.fill(0);\n  }\n\n  // send the statistics result every n second, where n starts from 1, 2, 4...and finally stays at every 30 seconds.\n  private getNextTimeout(effectId: string, currentSession?: { timeoutInMs: number; effectId: string }): number {\n    // only reset timeout when new session or effect changed\n    if (!currentSession || currentSession.effectId !== effectId) {\n      return VideoPerformanceStatistics.initialSessionTimeoutInMs;\n    }\n    return Math.min(VideoPerformanceStatistics.maxSessionTimeoutInMs, currentSession.timeoutInMs * 2);\n  }\n}\n","import { VideoFrameTick } from './videoFrameTick';\nimport { VideoPerformanceStatistics } from './videoPerformanceStatistics';\n\n/**\n * This class is used to monitor the performance of video processing, and report performance events.\n */\nexport class VideoPerformanceMonitor {\n  private static readonly distributionBinSize = 1000;\n  private static readonly calculateFPSInterval = 1000;\n\n  private isFirstFrameProcessed = false;\n\n  // The effect that the user last selected:\n  private applyingEffect: {\n    effectId: string;\n    effectParam?: string;\n  };\n\n  // The effect that is currently applied to the video:\n  private appliedEffect: {\n    effectId: string;\n    effectParam?: string;\n  };\n\n  private frameProcessTimeLimit = 100;\n  private gettingTextureStreamStartedAt: number;\n  private currentStreamId: string;\n  private frameProcessingStartedAt = 0;\n  private frameProcessingTimeCost = 0;\n  private processedFrameCount = 0;\n\n  private performanceStatistics: VideoPerformanceStatistics;\n\n  public constructor(private reportPerformanceEvent: (actionName: string, args: unknown[]) => void) {\n    this.performanceStatistics = new VideoPerformanceStatistics(VideoPerformanceMonitor.distributionBinSize, (result) =>\n      this.reportPerformanceEvent('video.performance.performanceDataGenerated', [result]),\n    );\n  }\n\n  /**\n   * Start to check frame processing time intervally\n   * and report performance event if the average frame processing time is too long.\n   */\n  public startMonitorSlowFrameProcessing(): void {\n    VideoFrameTick.setInterval(() => {\n      if (this.processedFrameCount === 0) {\n        return;\n      }\n      const averageFrameProcessingTime = this.frameProcessingTimeCost / this.processedFrameCount;\n      if (averageFrameProcessingTime > this.frameProcessTimeLimit) {\n        this.reportPerformanceEvent('video.performance.frameProcessingSlow', [averageFrameProcessingTime]);\n      }\n      this.frameProcessingTimeCost = 0;\n      this.processedFrameCount = 0;\n    }, VideoPerformanceMonitor.calculateFPSInterval);\n  }\n\n  /**\n   * Define the time limit of frame processing.\n   * When the average frame processing time is longer than the time limit, a \"video.performance.frameProcessingSlow\" event will be reported.\n   * @param timeLimit\n   */\n  public setFrameProcessTimeLimit(timeLimit: number): void {\n    this.frameProcessTimeLimit = timeLimit;\n  }\n\n  /**\n   * Call this function when the app starts to switch to the new video effect\n   */\n  public reportApplyingVideoEffect(effectId: string, effectParam?: string): void {\n    if (this.applyingEffect?.effectId === effectId && this.applyingEffect?.effectParam === effectParam) {\n      return;\n    }\n    this.applyingEffect = {\n      effectId,\n      effectParam,\n    };\n    this.appliedEffect = undefined;\n  }\n\n  /**\n   * Call this function when the new video effect is ready\n   */\n  public reportVideoEffectChanged(effectId: string, effectParam?: string): void {\n    if (\n      this.applyingEffect === undefined ||\n      (this.applyingEffect.effectId !== effectId && this.applyingEffect.effectParam !== effectParam)\n    ) {\n      // don't handle obsoleted event\n      return;\n    }\n    this.appliedEffect = {\n      effectId,\n      effectParam,\n    };\n    this.applyingEffect = undefined;\n    this.isFirstFrameProcessed = false;\n  }\n\n  /**\n   * Call this function when the app starts to process a video frame\n   */\n  public reportStartFrameProcessing(frameWidth: number, frameHeight: number): void {\n    VideoFrameTick.tick();\n    if (!this.appliedEffect) {\n      return;\n    }\n    this.frameProcessingStartedAt = performance.now();\n    this.performanceStatistics.processStarts(\n      this.appliedEffect.effectId,\n      frameWidth,\n      frameHeight,\n      this.appliedEffect.effectParam,\n    );\n  }\n\n  /**\n   * Call this function when the app finishes successfully processing a video frame\n   */\n  public reportFrameProcessed(): void {\n    if (!this.appliedEffect) {\n      return;\n    }\n    this.processedFrameCount++;\n    this.frameProcessingTimeCost += performance.now() - this.frameProcessingStartedAt;\n    this.performanceStatistics.processEnds();\n    if (!this.isFirstFrameProcessed) {\n      this.isFirstFrameProcessed = true;\n      this.reportPerformanceEvent('video.performance.firstFrameProcessed', [\n        Date.now(),\n        this.appliedEffect.effectId,\n        this.appliedEffect?.effectParam,\n      ]);\n    }\n  }\n\n  /**\n   * Call this function when the app starts to get the texture stream\n   */\n  public reportGettingTextureStream(streamId: string): void {\n    this.gettingTextureStreamStartedAt = performance.now();\n    this.currentStreamId = streamId;\n  }\n\n  /**\n   * Call this function when the app finishes successfully getting the texture stream\n   */\n  public reportTextureStreamAcquired(): void {\n    if (this.gettingTextureStreamStartedAt !== undefined) {\n      const timeTaken = performance.now() - this.gettingTextureStreamStartedAt;\n      this.reportPerformanceEvent('video.performance.textureStreamAcquired', [this.currentStreamId, timeTaken]);\n    }\n  }\n}\n","import { sendMessageToParent } from '../internal/communication';\nimport { registerHandler } from '../internal/handlers';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { inServerSideRenderingEnvironment, ssrSafeWindow } from '../internal/utils';\nimport { VideoPerformanceMonitor } from '../internal/videoPerformanceMonitor';\nimport { createEffectParameterChangeCallback, processMediaStream } from '../internal/videoUtils';\nimport { errorNotSupportedOnPlatform, FrameContexts } from './constants';\nimport { runtime } from './runtime';\n\n/**\n * Namespace to video extensibility of the SDK\n * @beta\n */\nexport namespace video {\n  const videoPerformanceMonitor = inServerSideRenderingEnvironment()\n    ? undefined\n    : new VideoPerformanceMonitor(sendMessageToParent);\n\n  /** Notify video frame processed function type */\n  type notifyVideoFrameProcessedFunctionType = () => void;\n  /** Notify error function type */\n  type notifyErrorFunctionType = (errorMessage: string) => void;\n\n  /**\n   * Represents a video frame\n   * @beta\n   */\n  export interface VideoBufferData {\n    /**\n     * Video frame width\n     */\n    width: number;\n    /**\n     * Video frame height\n     */\n    height: number;\n    /**\n     * Video frame buffer\n     */\n    videoFrameBuffer: Uint8ClampedArray;\n    /**\n     * NV12 luma stride, valid only when video frame format is NV12\n     */\n    lumaStride?: number;\n    /**\n     * NV12 chroma stride, valid only when video frame format is NV12\n     */\n    chromaStride?: number;\n    /**\n     * RGB stride, valid only when video frame format is RGB\n     */\n    stride?: number;\n    /**\n     * The time stamp of the current video frame\n     */\n    timestamp?: number;\n  }\n\n  /**\n   * Video frame format enum, currently only support NV12\n   * @beta\n   */\n  export enum VideoFrameFormat {\n    /** Video format used for encoding and decoding YUV color data in video streaming and storage applications. */\n    NV12 = 'NV12',\n  }\n\n  /**\n   * Video frame configuration supplied to the host to customize the generated video frame parameters, like format\n   * @beta\n   */\n  export interface VideoFrameConfig {\n    /**\n     * Video format\n     */\n    format: VideoFrameFormat;\n  }\n\n  /**\n   * Video effect change type enum\n   * @beta\n   */\n  export enum EffectChangeType {\n    /**\n     * Current video effect changed\n     */\n    EffectChanged = 'EffectChanged',\n    /**\n     * Disable the video effect\n     */\n    EffectDisabled = 'EffectDisabled',\n  }\n\n  /**\n   * Predefined failure reasons for preparing the selected video effect\n   * @beta\n   */\n  export enum EffectFailureReason {\n    /**\n     * A wrong effect id is provide.\n     * Use this reason when the effect id is not found or empty, this may indicate a mismatch between the app and its manifest or a bug of the host.\n     */\n    InvalidEffectId = 'InvalidEffectId',\n    /**\n     * The effect can't be initialized\n     */\n    InitializationFailure = 'InitializationFailure',\n  }\n\n  /**\n   * Video effect change call back function definition\n   * Return a Promise which will be resolved when the effect is prepared, or throw an {@link EffectFailureReason} on error.\n   * @beta\n   */\n  export type VideoEffectCallback = (effectId: string | undefined) => Promise<void>;\n\n  /**\n   * @beta\n   * Video frame call back function definition\n   * The callback will be called on every frame when running on the supported host.\n   * We require the frame rate of the video to be at least 22fps for 720p, thus the callback should process a frame timely.\n   * The video app should call `notifyVideoFrameProcessed` to notify a successfully processed video frame.\n   * The video app should call `notifyError` to notify a failure. When the failures accumulate to a certain number, the host will see the app is \"frozen\" and ask the user to close it or not.\n   */\n  export type VideoBufferHandler = (\n    videoBufferData: VideoBufferData,\n    notifyVideoFrameProcessed: notifyVideoFrameProcessedFunctionType,\n    notifyError: notifyErrorFunctionType,\n  ) => void;\n\n  /**\n   * @beta\n   * VideoFrame definition, align with the W3C spec: https://www.w3.org/TR/webcodecs/#videoframe-interface.\n   * The current version of typescript doesn't have the definition of VideoFrame so we have to define it here.\n   * At runtime it can be cast to VideoFrame directly: `(videoFrame as VideoFrame)`.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  export interface VideoFrame {}\n\n  /**\n   * @beta\n   * Video frame data extracted from the media stream. More properties may be added in the future.\n   */\n  export type VideoFrameData = {\n    /**\n     * The video frame from the media stream.\n     */\n    videoFrame: VideoFrame;\n  };\n\n  /**\n   * @beta\n   * Video frame call back function definition.\n   * The callback will be called on every frame when running on the supported host.\n   * We require the frame rate of the video to be at least 22fps for 720p, thus the callback should process a frame timely.\n   * The video app should resolve the promise to notify a successfully processed video frame.\n   * The video app should reject the promise to notify a failure. When the failures accumulate to a certain number, the host will see the app is \"frozen\" and ask the user to close it or not.\n   */\n  export type VideoFrameHandler = (receivedVideoFrame: VideoFrameData) => Promise<VideoFrame>;\n\n  /**\n   * @beta\n   * Callbacks and configuration supplied to the host to process the video frames.\n   */\n  export type RegisterForVideoFrameParameters = {\n    /**\n     * Callback function to process the video frames extracted from a media stream.\n     */\n    videoFrameHandler: VideoFrameHandler;\n    /**\n     * Callback function to process the video frames shared by the host.\n     */\n    videoBufferHandler: VideoBufferHandler;\n    /**\n     * Video frame configuration supplied to the host to customize the generated video frame parameters, like format\n     */\n    config: VideoFrameConfig;\n  };\n\n  /**\n   * Register callbacks to process the video frames if the host supports it.\n   * @beta\n   * @param parameters - Callbacks and configuration to process the video frames. A host may support either {@link VideoFrameHandler} or {@link VideoBufferHandler}, but not both.\n   * To ensure the video effect works on all supported hosts, the video app must provide both {@link VideoFrameHandler} and {@link VideoBufferHandler}.\n   * The host will choose the appropriate callback based on the host's capability.\n   *\n   * @example\n   * ```typescript\n   * video.registerForVideoFrame({\n   *   videoFrameHandler: async (videoFrameData) => {\n   *     const originalFrame = videoFrameData.videoFrame as VideoFrame;\n   *     try {\n   *       const processedFrame = await processFrame(originalFrame);\n   *       return processedFrame;\n   *     } catch (e) {\n   *       throw e;\n   *     }\n   *   },\n   *   videoBufferHandler: (\n   *     bufferData: VideoBufferData,\n   *     notifyVideoFrameProcessed: notifyVideoFrameProcessedFunctionType,\n   *     notifyError: notifyErrorFunctionType\n   *     ) => {\n   *       try {\n   *         processFrameInplace(bufferData);\n   *         notifyVideoFrameProcessed();\n   *       } catch (e) {\n   *         notifyError(e);\n   *       }\n   *     },\n   *   config: {\n   *     format: video.VideoPixelFormat.NV12,\n   *   }\n   * });\n   * ```\n   */\n  export function registerForVideoFrame(parameters: RegisterForVideoFrameParameters): void {\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    if (!parameters.videoFrameHandler || !parameters.videoBufferHandler) {\n      throw new Error('Both videoFrameHandler and videoBufferHandler must be provided');\n    }\n    registerHandler(\n      'video.setFrameProcessTimeLimit',\n      (timeLimitInfo: { timeLimit: number }) =>\n        videoPerformanceMonitor?.setFrameProcessTimeLimit(timeLimitInfo.timeLimit),\n      false,\n    );\n    if (doesSupportMediaStream()) {\n      registerForMediaStream(parameters.videoFrameHandler, parameters.config);\n    } else if (doesSupportSharedFrame()) {\n      registerForVideoBuffer(parameters.videoBufferHandler, parameters.config);\n    } else {\n      // should not happen if isSupported() is true\n      throw errorNotSupportedOnPlatform;\n    }\n    videoPerformanceMonitor?.startMonitorSlowFrameProcessing();\n  }\n\n  /**\n   * Video extension should call this to notify host that the current selected effect parameter changed.\n   * If it's pre-meeting, host will call videoEffectCallback immediately then use the videoEffect.\n   * If it's the in-meeting scenario, we will call videoEffectCallback when apply button clicked.\n   * @beta\n   * @param effectChangeType - the effect change type.\n   * @param effectId - Newly selected effect id.\n   */\n  export function notifySelectedVideoEffectChanged(\n    effectChangeType: EffectChangeType,\n    effectId: string | undefined,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    sendMessageToParent('video.videoEffectChanged', [effectChangeType, effectId]);\n  }\n\n  /**\n   * Register a callback to be notified when a new video effect is applied.\n   * @beta\n   * @param callback - Function to be called when new video effect is applied.\n   */\n  export function registerForVideoEffect(callback: VideoEffectCallback): void {\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    registerHandler(\n      'video.effectParameterChange',\n      createEffectParameterChangeCallback(callback, videoPerformanceMonitor),\n      false,\n    );\n    sendMessageToParent('video.registerForVideoEffect');\n  }\n\n  /**\n   * Sending notification to host finished the video frame processing, now host can render this video frame\n   * or pass the video frame to next one in video pipeline\n   * @beta\n   */\n  function notifyVideoFrameProcessed(timestamp?: number): void {\n    sendMessageToParent('video.videoFrameProcessed', [timestamp]);\n  }\n\n  /**\n   * Sending error notification to host\n   * @beta\n   * @param errorMessage - The error message that will be sent to the host\n   */\n  function notifyError(errorMessage: string): void {\n    sendMessageToParent('video.notifyError', [errorMessage]);\n  }\n\n  /**\n   * Checks if video capability is supported by the host.\n   * @beta\n   * @returns boolean to represent whether the video capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   */\n  export function isSupported(): boolean {\n    return (\n      ensureInitialized(runtime) &&\n      !!runtime.supports.video &&\n      /** A host should support either mediaStream or sharedFrame sub-capability to support the video capability */\n      (!!runtime.supports.video.mediaStream || !!runtime.supports.video.sharedFrame)\n    );\n  }\n\n  function registerForMediaStream(videoFrameHandler: VideoFrameHandler, config: VideoFrameConfig): void {\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    if (!isSupported() || !doesSupportMediaStream()) {\n      throw errorNotSupportedOnPlatform;\n    }\n\n    registerHandler(\n      'video.startVideoExtensibilityVideoStream',\n      async (mediaStreamInfo: { streamId: string }) => {\n        // when a new streamId is ready:\n        const { streamId } = mediaStreamInfo;\n        const monitoredVideoFrameHandler = createMonitoredVideoFrameHandler(videoFrameHandler, videoPerformanceMonitor);\n        await processMediaStream(streamId, monitoredVideoFrameHandler, notifyError, videoPerformanceMonitor);\n      },\n      false,\n    );\n\n    sendMessageToParent('video.mediaStream.registerForVideoFrame', [config]);\n  }\n\n  function createMonitoredVideoFrameHandler(\n    videoFrameHandler: VideoFrameHandler,\n    videoPerformanceMonitor?: VideoPerformanceMonitor,\n  ): VideoFrameHandler {\n    return async (videoFrameData: VideoFrameData): Promise<VideoFrame> => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const originalFrame = videoFrameData.videoFrame as any;\n      videoPerformanceMonitor?.reportStartFrameProcessing(originalFrame.codedWidth, originalFrame.codedHeight);\n      const processedFrame = await videoFrameHandler(videoFrameData);\n      videoPerformanceMonitor?.reportFrameProcessed();\n      return processedFrame;\n    };\n  }\n\n  /**\n   * Old video frame data structure, almost identical to the {@link VideoBufferData} except `videoFrameBuffer` is named as `data`.\n   * Old host like the old Teams passes this data to the SDK. It will be deprecated in the future.\n   */\n  type LegacyVideoBufferData = Omit<VideoBufferData, 'videoFrameBuffer'> & {\n    /**\n     * Video frame buffer\n     */\n    data: Uint8ClampedArray;\n  };\n\n  function registerForVideoBuffer(videoBufferHandler: VideoBufferHandler, config: VideoFrameConfig): void {\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    if (!isSupported() || !doesSupportSharedFrame()) {\n      throw errorNotSupportedOnPlatform;\n    }\n\n    registerHandler(\n      'video.newVideoFrame',\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (videoBufferData: VideoBufferData | LegacyVideoBufferData) => {\n        if (videoBufferData) {\n          const timestamp = videoBufferData.timestamp;\n          videoPerformanceMonitor?.reportStartFrameProcessing(videoBufferData.width, videoBufferData.height);\n          videoBufferHandler(\n            normalizeVideoBufferData(videoBufferData),\n            () => {\n              videoPerformanceMonitor?.reportFrameProcessed();\n              notifyVideoFrameProcessed(timestamp);\n            },\n            notifyError,\n          );\n        }\n      },\n      false,\n    );\n    sendMessageToParent('video.registerForVideoFrame', [config]);\n  }\n\n  function normalizeVideoBufferData(videoBufferData: VideoBufferData | LegacyVideoBufferData): VideoBufferData {\n    if ('videoFrameBuffer' in videoBufferData) {\n      return videoBufferData;\n    } else {\n      // The host may pass the VideoFrame with the old definition which has `data` instead of `videoFrameBuffer`\n      const { data, ...newVideoBufferData } = videoBufferData;\n      return {\n        ...newVideoBufferData,\n        videoFrameBuffer: data,\n      };\n    }\n  }\n\n  function doesSupportMediaStream(): boolean {\n    return (\n      ensureInitialized(runtime, FrameContexts.sidePanel) &&\n      isTextureStreamAvailable() &&\n      !!runtime.supports.video?.mediaStream\n    );\n  }\n\n  function isTextureStreamAvailable(): boolean {\n    return !!(\n      ssrSafeWindow()['chrome']?.webview?.getTextureStream && ssrSafeWindow()['chrome']?.webview?.registerTextureStream\n    );\n  }\n\n  function doesSupportSharedFrame(): boolean {\n    return ensureInitialized(runtime, FrameContexts.sidePanel) && !!runtime.supports.video?.sharedFrame;\n  }\n} //end of video namespace\n","import { sendAndHandleStatusAndReason, sendMessageToParent } from '../internal/communication';\nimport { registerHandler, removeHandler } from '../internal/handlers';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { errorNotSupportedOnPlatform, FrameContexts } from './constants';\nimport { runtime } from './runtime';\n\n/**\n * Allows your application to interact with the host M365 application's search box.\n * By integrating your application with the host's search box, users can search\n * your app using the same search box they use elsewhere in Teams, Outlook, or Office.\n *\n * This functionality is in Beta.\n * @beta\n */\nexport namespace search {\n  const onChangeHandlerName = 'search.queryChange';\n  const onClosedHandlerName = 'search.queryClose';\n  const onExecutedHandlerName = 'search.queryExecute';\n\n  /**\n   * This interface contains information pertaining to the contents of the host M365 application's search box\n   *\n   * @beta\n   */\n  export interface SearchQuery {\n    /** The current search term in the host search experience */\n    searchTerm: string;\n\n    /** Timestamp sequence value to ensure messages are processed in correct order / combine them. */\n    timestamp: number;\n  }\n\n  /**\n   * This type will store the SearchQuery and allow other logic to be made inside the handler.\n   *\n   * @beta\n   */\n  export type SearchQueryHandler = (query: SearchQuery) => void;\n\n  /**\n   * Allows the caller to register for various events fired by the host search experience.\n   * Calling this function indicates that your application intends to plug into the host's search box and handle search events,\n   * when the user is actively using your page/tab.\n   * \n   * The host may visually update its search box, e.g. with the name or icon of your application.\n   * \n   * Your application should *not* re-render inside of these callbacks, there may be a large number\n   * of onChangeHandler calls if the user is typing rapidly in the search box.\n   *\n   * @param onClosedHandler - This handler will be called when the user exits or cancels their search.\n   * Should be used to return your application to its most recent, non-search state. The value of {@link SearchQuery.searchTerm} \n   * will be whatever the last query was before ending search. \n   * \n   * @param onExecuteHandler - The handler will be called when the user executes their \n   * search (by pressing Enter for example). Should be used to display the full list of search results. \n   * The value of {@link SearchQuery.searchTerm} is the complete query the user entered in the search box.\n   *\n   * @param onChangeHandler - This optional handler will be called when the user first starts using the\n   * host's search box and as the user types their query. Can be used to put your application into a \n   * word-wheeling state or to display suggestions as the user is typing. \n   * \n   * This handler will be called with an empty {@link SearchQuery.searchTerm} when search is beginning, and subsequently,\n   * with the current contents of the search box.\n   * @example\n   * ``` ts\n   * search.registerHandlers(\n      query => {\n        console.log('Update your application to handle the search experience being closed. Last query: ${query.searchTerm}');\n      },\n      query => {\n        console.log(`Update your application to handle an executed search result: ${query.searchTerm}`);\n      },\n      query => {\n        console.log(`Update your application with the changed search query: ${query.searchTerm}`);\n      },\n     );\n   * ```\n   *\n   * @beta\n   */\n  export function registerHandlers(\n    onClosedHandler: SearchQueryHandler,\n    onExecuteHandler: SearchQueryHandler,\n    onChangeHandler?: SearchQueryHandler,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n\n    registerHandler(onClosedHandlerName, onClosedHandler);\n    registerHandler(onExecutedHandlerName, onExecuteHandler);\n    if (onChangeHandler) {\n      registerHandler(onChangeHandlerName, onChangeHandler);\n    }\n  }\n\n  /**\n   * Allows the caller to unregister for all events fired by the host search experience. Calling\n   * this function will cause your app to stop appearing in the set of search scopes in the hosts\n   *\n   * @beta\n   */\n  export function unregisterHandlers(): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    // This should let the host know to stop making the app scope show up in the search experience\n    // Can also be used to clean up handlers on the host if desired\n    sendMessageToParent('search.unregister');\n    removeHandler(onChangeHandlerName);\n    removeHandler(onClosedHandlerName);\n    removeHandler(onExecutedHandlerName);\n  }\n\n  /**\n   * Checks if search capability is supported by the host\n   * @returns boolean to represent whether the search capability is supported\n   *\n   * @throws Error if {@link app.initialize} has not successfully completed\n   *\n   * @beta\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.search ? true : false;\n  }\n\n  /**\n   * Clear the host M365 application's search box\n   *\n   * @beta\n   */\n  export function closeSearch(): Promise<void> {\n    return new Promise<void>((resolve) => {\n      ensureInitialized(runtime, FrameContexts.content);\n      if (!isSupported()) {\n        throw new Error('Not supported');\n      }\n\n      resolve(sendAndHandleStatusAndReason('search.closeSearch'));\n    });\n  }\n}\n","import { sendAndHandleSdkError } from '../internal/communication';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { callCallbackWithSdkErrorFromPromiseAndReturnPromise, InputFunction } from '../internal/utils';\nimport { errorNotSupportedOnPlatform, FrameContexts } from './constants';\nimport { ErrorCode, SdkError } from './interfaces';\nimport { runtime } from './runtime';\n\n/**\n * Namespace to open a share dialog for web content.\n * For more info, see [Share to Teams from personal app or tab](https://learn.microsoft.com/microsoftteams/platform/concepts/build-and-test/share-to-teams-from-personal-app-or-tab)\n */\nexport namespace sharing {\n  /** shareWebContent callback function type */\n  type shareWebContentCallbackFunctionType = (err?: SdkError) => void;\n\n  /** Type of message that can be sent or received by the sharing APIs */\n  export const SharingAPIMessages = {\n    /**\n     * Share web content message.\n     * @internal\n     */\n    shareWebContent: 'sharing.shareWebContent',\n  };\n\n  // More types can be added as we expand share capability\n  type ContentType = 'URL';\n\n  /** Represents parameters for base shared content. */\n  interface IBaseSharedContent {\n    /** Shared content type  */\n    type: ContentType;\n  }\n\n  // More types can be added as we expand share capability\n  /** IShareRequestContentType defines share request type. */\n  export type IShareRequestContentType = IURLContent;\n\n  /** Represents IShareRequest parameters interface.\n   * @typeparam T - The identity type\n   */\n  export interface IShareRequest<T> {\n    /** Content of the share request. */\n    content: T[];\n  }\n\n  /** Represents IURLContent parameters. */\n  export interface IURLContent extends IBaseSharedContent {\n    /** Type */\n    type: 'URL';\n\n    /**\n     * Required URL\n     */\n    url: string;\n\n    /**\n     * Default initial message text\n     */\n    message?: string;\n\n    /**\n     * Show URL preview, defaults to true\n     */\n    preview?: boolean;\n  }\n\n  /**\n   * Feature is under development\n   * Opens a share dialog for web content\n   *\n   * @param shareWebContentRequest - web content info\n   * @returns Promise that will be fulfilled when the operation has completed\n   */\n  export function shareWebContent(shareWebContentRequest: IShareRequest<IShareRequestContentType>): Promise<void>;\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link sharing.shareWebContent sharing.shareWebContent(shareWebContentRequest: IShareRequest\\<IShareRequestContentType\\>): Promise\\<void\\>} instead.\n   *\n   * Feature is under development\n   * Opens a share dialog for web content\n   *\n   * @param shareWebContentRequest - web content info\n   * @param callback - optional callback\n   */\n  export function shareWebContent(\n    shareWebContentRequest: IShareRequest<IShareRequestContentType>,\n    callback: shareWebContentCallbackFunctionType,\n  ): void;\n  export function shareWebContent(\n    shareWebContentRequest: IShareRequest<IShareRequestContentType>,\n    callback?: shareWebContentCallbackFunctionType,\n  ): Promise<void> {\n    // validate the given input (synchronous check)\n    try {\n      validateNonEmptyContent(shareWebContentRequest);\n      validateTypeConsistency(shareWebContentRequest);\n      validateContentForSupportedTypes(shareWebContentRequest);\n    } catch (err) {\n      //return the error via callback(v1) or rejected promise(v2)\n      const wrappedFunction: InputFunction<void> = () => Promise.reject(err);\n      return callCallbackWithSdkErrorFromPromiseAndReturnPromise(wrappedFunction, callback);\n    }\n    ensureInitialized(\n      runtime,\n      FrameContexts.content,\n      FrameContexts.sidePanel,\n      FrameContexts.task,\n      FrameContexts.stage,\n      FrameContexts.meetingStage,\n    );\n    return callCallbackWithSdkErrorFromPromiseAndReturnPromise(shareWebContentHelper, callback, shareWebContentRequest);\n  }\n\n  function shareWebContentHelper(shareWebContentRequest: IShareRequest<IShareRequestContentType>): Promise<void> {\n    return new Promise<void>((resolve) => {\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      resolve(sendAndHandleSdkError(SharingAPIMessages.shareWebContent, shareWebContentRequest));\n    });\n  }\n\n  /**\n   * Functions for validating the shareRequest input parameter\n   */\n  function validateNonEmptyContent(shareRequest: IShareRequest<IShareRequestContentType>): void {\n    if (!(shareRequest && shareRequest.content && shareRequest.content.length)) {\n      const err: SdkError = {\n        errorCode: ErrorCode.INVALID_ARGUMENTS,\n        message: 'Shared content is missing',\n      };\n      throw err;\n    }\n  }\n\n  function validateTypeConsistency(shareRequest: IShareRequest<IShareRequestContentType>): void {\n    let err: SdkError | undefined;\n    if (shareRequest.content.some((item) => !item.type)) {\n      err = {\n        errorCode: ErrorCode.INVALID_ARGUMENTS,\n        message: 'Shared content type cannot be undefined',\n      };\n      throw err;\n    }\n    if (shareRequest.content.some((item) => item.type !== shareRequest.content[0].type)) {\n      err = {\n        errorCode: ErrorCode.INVALID_ARGUMENTS,\n        message: 'Shared content must be of the same type',\n      };\n      throw err;\n    }\n  }\n\n  function validateContentForSupportedTypes(shareRequest: IShareRequest<IShareRequestContentType>): void {\n    let err: SdkError | undefined;\n    if (shareRequest.content[0].type === 'URL') {\n      if (shareRequest.content.some((item) => !item.url)) {\n        err = {\n          errorCode: ErrorCode.INVALID_ARGUMENTS,\n          message: 'URLs are required for URL content types',\n        };\n        throw err;\n      }\n    } else {\n      err = {\n        errorCode: ErrorCode.INVALID_ARGUMENTS,\n        message: 'Content type is unsupported',\n      };\n      throw err;\n    }\n  }\n\n  /**\n   * Checks if the sharing capability is supported by the host\n   * @returns boolean to represent whether the sharing capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.sharing ? true : false;\n  }\n}\n","import { sendAndHandleSdkError } from '../internal/communication';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { errorNotSupportedOnPlatform, FrameContexts } from './constants';\nimport { runtime } from './runtime';\n\n/**\n * Namespace to interact with the stage view specific part of the SDK.\n *\n *  @beta\n */\nexport namespace stageView {\n  /**\n   * Parameters to open a stage view.\n   */\n  export interface StageViewParams {\n    /**\n     * The ID of the Teams application to be opened.\n     */\n    appId: string;\n\n    /**\n     * The URL of the content to display.\n     */\n    contentUrl: string;\n\n    /**\n     * The chat or channel ID.\n     */\n    threadId: string;\n\n    /**\n     * The title to give the stage view.\n     */\n    title?: string;\n\n    /**\n     * The Teams application website URL.\n     */\n    websiteUrl?: string;\n\n    /**\n     * The entity ID of the Teams application content being opened.\n     */\n    entityId?: string;\n  }\n\n  /**\n   * @hidden\n   * Feature is under development\n   *\n   * Opens a stage view to display a Teams application\n   * @beta\n   * @param stageViewParams - The parameters to pass into the stage view.\n   * @returns Promise that resolves or rejects with an error once the stage view is closed.\n   */\n  export function open(stageViewParams: StageViewParams): Promise<void> {\n    return new Promise((resolve) => {\n      ensureInitialized(runtime, FrameContexts.content);\n\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n\n      if (!stageViewParams) {\n        throw new Error('[stageView.open] Stage view params cannot be null');\n      }\n\n      resolve(sendAndHandleSdkError('stageView.open', stageViewParams));\n    });\n  }\n\n  /**\n   * Checks if stageView capability is supported by the host\n   * @beta\n   * @returns boolean to represent whether the stageView capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.stageView ? true : false;\n  }\n}\n","import { ensureInitialized } from '../internal/internalAPIs';\nimport { runtime } from './runtime';\n\n/**\n * Contains functionality to allow web apps to store data in webview cache\n *\n * @beta\n */\nexport namespace webStorage {\n  /**\n   * Checks if web storage gets cleared when a user logs out from host client\n   *\n   * @returns true is web storage gets cleared on logout and false if it does not\n   *\n   * @beta\n   */\n  export function isWebStorageClearedOnUserLogOut(): boolean {\n    ensureInitialized(runtime);\n    return isSupported();\n  }\n\n  /**\n   * Checks if webStorage capability is supported by the host\n   * @returns boolean to represent whether the webStorage capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   * @beta\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.webStorage ? true : false;\n  }\n}\n","import { sendAndUnwrap, sendMessageToParent } from '../internal/communication';\nimport { errorCallNotStarted } from '../internal/constants';\nimport { createTeamsDeepLinkForCall } from '../internal/deepLinkUtilities';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { errorNotSupportedOnPlatform, FrameContexts } from './constants';\nimport { runtime } from './runtime';\n\n/**\n * Used to interact with call functionality, including starting calls with other users.\n */\nexport namespace call {\n  /** Modalities that can be associated with a call. */\n  export enum CallModalities {\n    /** Indicates that the modality is unknown or undefined. */\n    Unknown = 'unknown',\n    /** Indicates that the call includes audio. */\n    Audio = 'audio',\n    /** Indicates that the call includes video. */\n    Video = 'video',\n    /** Indicates that the call includes video-based screen sharing. */\n    VideoBasedScreenSharing = 'videoBasedScreenSharing',\n    /** Indicates that the call includes data sharing or messaging. */\n    Data = 'data',\n  }\n\n  /** Represents parameters for {@link startCall | StartCall}. */\n  export interface StartCallParams {\n    /**\n     * Comma-separated list of user IDs representing the participants of the call.\n     *\n     * @remarks\n     * Currently the User ID field supports the Microsoft Entra UserPrincipalName,\n     * typically an email address, or in case of a PSTN call, it supports a pstn\n     * mri 4:\\<phonenumber>.\n     */\n    targets: string[];\n    /**\n     * List of modalities for the call. Defaults to [“audio”].\n     */\n    requestedModalities?: CallModalities[];\n    /**\n     * An optional parameter that informs about the source of the deep link\n     */\n    source?: string;\n  }\n\n  /**\n   * Starts a call with other users\n   *\n   * @param startCallParams - Parameters for the call\n   *\n   * @throws Error if call capability is not supported\n   * @throws Error if host notifies of a failed start call attempt in a legacy Teams environment\n   * @returns always true if the host notifies of a successful call inititation\n   */\n  export function startCall(startCallParams: StartCallParams): Promise<boolean> {\n    return new Promise((resolve) => {\n      ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      if (runtime.isLegacyTeams) {\n        resolve(\n          sendAndUnwrap(\n            'executeDeepLink',\n            createTeamsDeepLinkForCall(\n              startCallParams.targets,\n              startCallParams.requestedModalities?.includes(CallModalities.Video),\n              startCallParams.source,\n            ),\n          ).then((result: boolean) => {\n            if (!result) {\n              throw new Error(errorCallNotStarted);\n            }\n            return result;\n          }),\n        );\n      } else {\n        return sendMessageToParent('call.startCall', [startCallParams], resolve);\n      }\n    });\n  }\n\n  /**\n   * Checks if the call capability is supported by the host\n   * @returns boolean to represent whether the call capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.call ? true : false;\n  }\n}\n","import { app } from './app';\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link app} namespace instead.\n */\nexport namespace appInitialization {\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.Messages} instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  export import Messages = app.Messages;\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.FailedReason} instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  export import FailedReason = app.FailedReason;\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.ExpectedFailureReason} instead.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  export import ExpectedFailureReason = app.ExpectedFailureReason;\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.IFailedRequest} instead.\n   */\n  export import IFailedRequest = app.IFailedRequest;\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.IExpectedFailureRequest} instead.\n   */\n  export import IExpectedFailureRequest = app.IExpectedFailureRequest;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.notifyAppLoaded app.notifyAppLoaded(): void} instead.\n   *\n   * Notifies the frame that app has loaded and to hide the loading indicator if one is shown.\n   */\n  export function notifyAppLoaded(): void {\n    app.notifyAppLoaded();\n  }\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.notifySuccess app.notifySuccess(): void} instead.\n   *\n   * Notifies the frame that app initialization is successful and is ready for user interaction.\n   */\n  export function notifySuccess(): void {\n    app.notifySuccess();\n  }\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.notifyFailure app.notifyFailure(appInitializationFailedRequest: IFailedRequest): void} instead.\n   *\n   * Notifies the frame that app initialization has failed and to show an error page in its place.\n   * @param appInitializationFailedRequest - The failure request containing the reason for why the app failed\n   * during initialization as well as an optional message.\n   */\n  export function notifyFailure(appInitializationFailedRequest: IFailedRequest): void {\n    app.notifyFailure(appInitializationFailedRequest);\n  }\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link app.notifyExpectedFailure app.notifyExpectedFailure(expectedFailureRequest: IExpectedFailureRequest): void} instead.\n   *\n   * Notifies the frame that app initialized with some expected errors.\n   * @param expectedFailureRequest - The expected failure request containing the reason and an optional message\n   */\n  export function notifyExpectedFailure(expectedFailureRequest: IExpectedFailureRequest): void {\n    app.notifyExpectedFailure(expectedFailureRequest);\n  }\n}\n","import { ensureInitialized } from '../internal/internalAPIs';\nimport { getGenericOnCompleteHandler } from '../internal/utils';\nimport { FrameContexts } from './constants';\nimport { pages } from './pages';\nimport { runtime } from './runtime';\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.config} namespace instead.\n *\n * Namespace to interact with the settings-specific part of the SDK.\n * This object is usable only on the settings frame.\n */\nexport namespace settings {\n  /** Register on remove handler function type */\n  type registerOnRemoveHandlerFunctionType = (evt: RemoveEvent) => void;\n  /** Register on save handler function type */\n  type registerOnSaveHandlerFunctionType = (evt: SaveEvent) => void;\n  /** Set settings on complete function type */\n  type setSettingsOnCompleteFunctionType = (status: boolean, reason?: string) => void;\n  /** Get settings callback function type */\n  type getSettingsCallbackFunctionType = (instanceSettings: Settings) => void;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link pages.config.Config} instead.\n   * @remarks\n   * Renamed to config in pages.Config\n   */\n  export import Settings = pages.InstanceConfig;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link pages.config.SaveEvent} instead.\n   * @remarks\n   * See pages.SaveEvent\n   */\n  export import SaveEvent = pages.config.SaveEvent;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link pages.config.RemoveEvent} instead.\n   * @remarks\n   * See pages.RemoveEvent\n   */\n  export import RemoveEvent = pages.config.RemoveEvent;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link pages.config.SaveParameters} instead.\n   * @remarks\n   * See pages.SaveParameters\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  export import SaveParameters = pages.config.SaveParameters;\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link pages.config.setValidityState pages.config.setValidityState(validityState: boolean): void} instead.\n   *\n   * Sets the validity state for the settings.\n   * The initial value is false, so the user cannot save the settings until this is called with true.\n   *\n   * @param validityState - Indicates whether the save or remove button is enabled for the user.\n   */\n  export function setValidityState(validityState: boolean): void {\n    pages.config.setValidityState(validityState);\n  }\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link pages.getConfig pages.getConfig(): Promise\\<InstanceConfig\\>} instead.\n   *\n   * Gets the settings for the current instance.\n   *\n   * @param callback - The callback to invoke when the {@link Settings} object is retrieved.\n   */\n  export function getSettings(callback: getSettingsCallbackFunctionType): void {\n    ensureInitialized(\n      runtime,\n      FrameContexts.content,\n      FrameContexts.settings,\n      FrameContexts.remove,\n      FrameContexts.sidePanel,\n    );\n    pages.getConfig().then((config: pages.InstanceConfig) => {\n      callback(config);\n    });\n  }\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link pages.config.setConfig pages.config.setConfig(instanceSettings: Config): Promise\\<void\\>} instead.\n   *\n   * Sets the settings for the current instance.\n   * This is an asynchronous operation; calls to getSettings are not guaranteed to reflect the changed state.\n   *\n   * @param - Set the desired settings for this instance.\n   */\n  export function setSettings(instanceSettings: Settings, onComplete?: setSettingsOnCompleteFunctionType): void {\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.settings, FrameContexts.sidePanel);\n    onComplete = onComplete ? onComplete : getGenericOnCompleteHandler();\n    pages.config\n      .setConfig(instanceSettings)\n      .then(() => {\n        onComplete(true);\n      })\n      .catch((error: Error) => {\n        onComplete(false, error.message);\n      });\n  }\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link pages.config.registerOnSaveHandler pages.config.registerOnSaveHandler(handler: registerOnSaveHandlerFunctionType): void} instead.\n   *\n   * Registers a handler for when the user attempts to save the settings. This handler should be used\n   * to create or update the underlying resource powering the content.\n   * The object passed to the handler must be used to notify whether to proceed with the save.\n   * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n   *\n   * @param handler - The handler to invoke when the user selects the save button.\n   */\n  export function registerOnSaveHandler(handler: registerOnSaveHandlerFunctionType): void {\n    pages.config.registerOnSaveHandlerHelper(handler);\n  }\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link pages.config.registerOnRemoveHandler pages.config.registerOnRemoveHandler(handler: registerOnRemoveHandlerFunctionType): void} instead.\n   *\n   * Registers a handler for user attempts to remove content. This handler should be used\n   * to remove the underlying resource powering the content.\n   * The object passed to the handler must be used to indicate whether to proceed with the removal.\n   * Only one handler may be registered at a time. Subsequent registrations will override the first.\n   *\n   * @param handler - The handler to invoke when the user selects the remove button.\n   */\n  export function registerOnRemoveHandler(handler: registerOnRemoveHandlerFunctionType): void {\n    pages.config.registerOnRemoveHandlerHelper(handler);\n  }\n}\n","import { sendMessageToParent } from '../internal/communication';\nimport { GlobalVars } from '../internal/globalVars';\nimport { registerHandlerHelper } from '../internal/handlers';\nimport { ensureInitializeCalled, ensureInitialized } from '../internal/internalAPIs';\nimport { getGenericOnCompleteHandler } from '../internal/utils';\nimport { app } from './app';\nimport { FrameContexts } from './constants';\nimport {\n  Context,\n  DeepLinkParameters,\n  FrameContext,\n  LoadContext,\n  TabInformation,\n  TabInstanceParameters,\n} from './interfaces';\nimport { pages } from './pages';\nimport { runtime } from './runtime';\nimport { teamsCore } from './teamsAPIs';\n\n/** Execute deep link on complete function type */\ntype executeDeepLinkOnCompleteFunctionType = (status: boolean, reason?: string) => void;\n/** Callback function type */\ntype callbackFunctionType = () => void;\n/** Get context callback function type */\ntype getContextCallbackFunctionType = (context: Context) => void;\n/** Get tab instances callback function type */\ntype getTabInstancesCallbackFunctionType = (tabInfo: TabInformation) => void;\n/** Register back button handler function type */\ntype registerBackButtonHandlerFunctionType = () => boolean;\n/** Register full screen handler function type */\ntype registerFullScreenHandlerFunctionType = (isFullScreen: boolean) => void;\n/** Register on theme change handler function type */\ntype registerOnThemeChangeHandlerFunctionType = (theme: string) => void;\n/**\n * @deprecated\n * As of 2.0.0, please use {@link app.initialize app.initialize(validMessageOrigins?: string[]): Promise\\<void\\>} instead.\n *\n * Initializes the library. This must be called before any other SDK calls\n * but after the frame is loaded successfully.\n * @param callback - Optionally specify a callback to invoke when Teams SDK has successfully initialized\n * @param validMessageOrigins - Optionally specify a list of cross frame message origins. There must have\n * https: protocol otherwise they will be ignored. Example: https://www.example.com\n */\nexport function initialize(callback?: callbackFunctionType, validMessageOrigins?: string[]): void {\n  app.initialize(validMessageOrigins).then(() => {\n    if (callback) {\n      callback();\n    }\n  });\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link teamsCore.enablePrintCapability teamsCore.enablePrintCapability(): void} instead.\n *\n * Enable print capability to support printing page using Ctrl+P and cmd+P\n */\nexport function enablePrintCapability(): void {\n  teamsCore.enablePrintCapability();\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link teamsCore.print teamsCore.print(): void} instead.\n *\n * Default print handler\n */\nexport function print(): void {\n  teamsCore.print();\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link app.getContext app.getContext(): Promise\\<app.Context\\>} instead.\n *\n * Retrieves the current context the frame is running in.\n *\n * @param callback - The callback to invoke when the {@link Context} object is retrieved.\n */\nexport function getContext(callback: getContextCallbackFunctionType): void {\n  ensureInitializeCalled();\n  sendMessageToParent('getContext', (context: Context) => {\n    if (!context.frameContext) {\n      // Fallback logic for frameContext properties\n      context.frameContext = GlobalVars.frameContext;\n    }\n    callback(context);\n  });\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link app.registerOnThemeChangeHandler app.registerOnThemeChangeHandler(handler: registerOnThemeChangeHandlerFunctionType): void} instead.\n *\n * Registers a handler for theme changes.\n * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n *\n * @param handler - The handler to invoke when the user changes their theme.\n */\nexport function registerOnThemeChangeHandler(handler: registerOnThemeChangeHandlerFunctionType): void {\n  app.registerOnThemeChangeHandler(handler);\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.registerFullScreenHandler pages.registerFullScreenHandler(handler: registerFullScreenHandlerFunctionType): void} instead.\n *\n * Registers a handler for changes from or to full-screen view for a tab.\n * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n *\n * @param handler - The handler to invoke when the user toggles full-screen view for a tab.\n */\nexport function registerFullScreenHandler(handler: registerFullScreenHandlerFunctionType): void {\n  registerHandlerHelper('fullScreenChange', handler, []);\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.appButton.onClick pages.appButton.onClick(handler: callbackFunctionType): void} instead.\n *\n * Registers a handler for clicking the app button.\n * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n *\n * @param handler - The handler to invoke when the personal app button is clicked in the app bar.\n */\nexport function registerAppButtonClickHandler(handler: callbackFunctionType): void {\n  registerHandlerHelper('appButtonClick', handler, [FrameContexts.content]);\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.appButton.onHoverEnter pages.appButton.onHoverEnter(handler: callbackFunctionType): void} instead.\n *\n * Registers a handler for entering hover of the app button.\n * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n *\n * @param handler - The handler to invoke when entering hover of the personal app button in the app bar.\n */\nexport function registerAppButtonHoverEnterHandler(handler: callbackFunctionType): void {\n  registerHandlerHelper('appButtonHoverEnter', handler, [FrameContexts.content]);\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.appButton.onHoverLeave pages.appButton.onHoverLeave(handler: callbackFunctionType): void} instead.\n *\n * Registers a handler for exiting hover of the app button.\n * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n * @param handler - The handler to invoke when exiting hover of the personal app button in the app bar.\n *\n */\nexport function registerAppButtonHoverLeaveHandler(handler: callbackFunctionType): void {\n  registerHandlerHelper('appButtonHoverLeave', handler, [FrameContexts.content]);\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.backStack.registerBackButtonHandler pages.backStack.registerBackButtonHandler(handler: registerBackButtonHandlerFunctionType): void} instead.\n *\n * Registers a handler for user presses of the Team client's back button. Experiences that maintain an internal\n * navigation stack should use this handler to navigate the user back within their frame. If an app finds\n * that after running its back button handler it cannot handle the event it should call the navigateBack\n * method to ask the Teams client to handle it instead.\n *\n * @param handler - The handler to invoke when the user presses their Team client's back button.\n */\nexport function registerBackButtonHandler(handler: registerBackButtonHandlerFunctionType): void {\n  pages.backStack.registerBackButtonHandlerHelper(handler);\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link teamsCore.registerOnLoadHandler teamsCore.registerOnLoadHandler(handler: (context: LoadContext) => void): void} instead.\n *\n * @hidden\n * Registers a handler to be called when the page has been requested to load.\n *\n * @param handler - The handler to invoke when the page is loaded.\n */\nexport function registerOnLoadHandler(handler: (context: LoadContext) => void): void {\n  teamsCore.registerOnLoadHandlerHelper(handler);\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link teamsCore.registerBeforeUnloadHandler teamsCore.registerBeforeUnloadHandler(handler: (readyToUnload: callbackFunctionType) => boolean): void} instead.\n *\n * @hidden\n * Registers a handler to be called before the page is unloaded.\n *\n * @param handler - The handler to invoke before the page is unloaded. If this handler returns true the page should\n * invoke the readyToUnload function provided to it once it's ready to be unloaded.\n */\nexport function registerBeforeUnloadHandler(handler: (readyToUnload: callbackFunctionType) => boolean): void {\n  teamsCore.registerBeforeUnloadHandlerHelper(handler);\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.registerFocusEnterHandler pages.registerFocusEnterHandler(handler: (navigateForward: boolean) => void): void} instead.\n *\n * @hidden\n * Registers a handler when focus needs to be passed from teams to the place of choice on app.\n *\n * @param handler - The handler to invoked by the app when they want the focus to be in the place of their choice.\n */\nexport function registerFocusEnterHandler(handler: (navigateForward: boolean) => boolean): void {\n  registerHandlerHelper('focusEnter', handler, []);\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.config.registerChangeConfigHandler pages.config.registerChangeConfigHandler(handler: callbackFunctionType): void} instead.\n *\n * Registers a handler for when the user reconfigurated tab.\n *\n * @param handler - The handler to invoke when the user click on Settings.\n */\nexport function registerChangeSettingsHandler(handler: callbackFunctionType): void {\n  registerHandlerHelper('changeSettings', handler, [FrameContexts.content]);\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.tabs.getTabInstances pages.tabs.getTabInstances(tabInstanceParameters?: TabInstanceParameters): Promise\\<TabInformation\\>} instead.\n *\n * Allows an app to retrieve for this user tabs that are owned by this app.\n * If no TabInstanceParameters are passed, the app defaults to favorite teams and favorite channels.\n *\n * @param callback - The callback to invoke when the {@link TabInstanceParameters} object is retrieved.\n * @param tabInstanceParameters - OPTIONAL Flags that specify whether to scope call to favorite teams or channels.\n */\nexport function getTabInstances(\n  callback: getTabInstancesCallbackFunctionType,\n  tabInstanceParameters?: TabInstanceParameters,\n): void {\n  ensureInitialized(runtime);\n  pages.tabs.getTabInstances(tabInstanceParameters).then((tabInfo: TabInformation) => {\n    callback(tabInfo);\n  });\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.tabs.getMruTabInstances pages.tabs.getMruTabInstances(tabInstanceParameters?: TabInstanceParameters): Promise\\<TabInformation\\>} instead.\n *\n * Allows an app to retrieve the most recently used tabs for this user.\n *\n * @param callback - The callback to invoke when the {@link TabInformation} object is retrieved.\n * @param tabInstanceParameters - OPTIONAL Ignored, kept for future use\n */\nexport function getMruTabInstances(\n  callback: getTabInstancesCallbackFunctionType,\n  tabInstanceParameters?: TabInstanceParameters,\n): void {\n  ensureInitialized(runtime);\n  pages.tabs.getMruTabInstances(tabInstanceParameters).then((tabInfo: TabInformation) => {\n    callback(tabInfo);\n  });\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.shareDeepLink pages.shareDeepLink(deepLinkParameters: DeepLinkParameters): void} instead.\n *\n * Shares a deep link that a user can use to navigate back to a specific state in this page.\n *\n * @param deepLinkParameters - ID and label for the link and fallback URL.\n */\nexport function shareDeepLink(deepLinkParameters: DeepLinkParameters): void {\n  pages.shareDeepLink({\n    subPageId: deepLinkParameters.subEntityId,\n    subPageLabel: deepLinkParameters.subEntityLabel,\n    subPageWebUrl: deepLinkParameters.subEntityWebUrl,\n  });\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link app.openLink app.openLink(deepLink: string): Promise\\<void\\>} instead.\n *\n * Execute deep link API.\n *\n * @param deepLink - deep link.\n */\nexport function executeDeepLink(deepLink: string, onComplete?: executeDeepLinkOnCompleteFunctionType): void {\n  ensureInitialized(\n    runtime,\n    FrameContexts.content,\n    FrameContexts.sidePanel,\n    FrameContexts.settings,\n    FrameContexts.task,\n    FrameContexts.stage,\n    FrameContexts.meetingStage,\n  );\n  onComplete = onComplete ? onComplete : getGenericOnCompleteHandler();\n  app\n    .openLink(deepLink)\n    .then(() => {\n      onComplete(true);\n    })\n    .catch((err: Error) => {\n      onComplete(false, err.message);\n    });\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.setCurrentFrame pages.setCurrentFrame(frameInfo: FrameInfo): void} instead.\n *\n * Set the current Frame Context\n *\n * @param frameContext - FrameContext information to be set\n */\nexport function setFrameContext(frameContext: FrameContext): void {\n  pages.setCurrentFrame(frameContext);\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.initializeWithFrameContext pages.initializeWithFrameContext(frameInfo: FrameInfo, callback?: callbackFunctionType, validMessageOrigins?: string[],): void} instead.\n *\n * Initialize with FrameContext\n *\n * @param frameContext - FrameContext information to be set\n * @param callback - The optional callback to be invoked be invoked after initilizing the frame context\n * @param validMessageOrigins -  Optionally specify a list of cross frame message origins.\n * They must have https: protocol otherwise they will be ignored. Example: https:www.example.com\n */\nexport function initializeWithFrameContext(\n  frameContext: FrameContext,\n  callback?: callbackFunctionType,\n  validMessageOrigins?: string[],\n): void {\n  pages.initializeWithFrameContext(frameContext, callback, validMessageOrigins);\n}\n","import { ensureInitialized } from '../internal/internalAPIs';\nimport { getGenericOnCompleteHandler } from '../internal/utils';\nimport { FrameContexts } from './constants';\nimport { TabInstance } from './interfaces';\nimport { pages } from './pages';\nimport { runtime } from './runtime';\n/**\n * Navigation specific part of the SDK.\n */\n\n/** Navigation on complete handler function type */\ntype onCompleteHandlerFunctionType = (status: boolean, reason?: string) => void;\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.returnFocus pages.returnFocus(navigateForward?: boolean): void} instead.\n *\n * Return focus to the main Teams app. Will focus search bar if navigating foward and app bar if navigating back.\n *\n * @param navigateForward - Determines the direction to focus in teams app.\n */\nexport function returnFocus(navigateForward?: boolean): void {\n  pages.returnFocus(navigateForward);\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.tabs.navigateToTab pages.tabs.navigateToTab(tabInstance: TabInstance): Promise\\<void\\>} instead.\n *\n * Navigates the Microsoft Teams app to the specified tab instance.\n *\n * @param tabInstance - The tab instance to navigate to.\n * @param onComplete - The callback to invoke when the action is complete.\n */\nexport function navigateToTab(tabInstance: TabInstance, onComplete?: onCompleteHandlerFunctionType): void {\n  ensureInitialized(runtime);\n  onComplete = onComplete ? onComplete : getGenericOnCompleteHandler();\n  pages.tabs\n    .navigateToTab(tabInstance)\n    .then(() => {\n      onComplete(true);\n    })\n    .catch((error: Error) => {\n      onComplete(false, error.message);\n    });\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.navigateCrossDomain pages.navigateCrossDomain(url: string): Promise\\<void\\>} instead.\n *\n * Navigates the frame to a new cross-domain URL. The domain of this URL must match at least one of the\n * valid domains specified in the validDomains block of the manifest; otherwise, an exception will be\n * thrown. This function needs to be used only when navigating the frame to a URL in a different domain\n * than the current one in a way that keeps the app informed of the change and allows the SDK to\n * continue working.\n *\n * @param url - The URL to navigate the frame to.\n * @param onComplete - The callback to invoke when the action is complete.\n */\nexport function navigateCrossDomain(url: string, onComplete?: onCompleteHandlerFunctionType): void {\n  ensureInitialized(\n    runtime,\n    FrameContexts.content,\n    FrameContexts.sidePanel,\n    FrameContexts.settings,\n    FrameContexts.remove,\n    FrameContexts.task,\n    FrameContexts.stage,\n    FrameContexts.meetingStage,\n  );\n  onComplete = onComplete ? onComplete : getGenericOnCompleteHandler();\n  pages\n    .navigateCrossDomain(url)\n    .then(() => {\n      onComplete(true);\n    })\n    .catch((error: Error) => {\n      onComplete(false, error.message);\n    });\n}\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link pages.backStack.navigateBack pages.backStack.navigateBack(): Promise\\<void\\>} instead.\n *\n * Navigates back in the Teams client.\n * See registerBackButtonHandler for more information on when it's appropriate to use this method.\n *\n * @param onComplete - The callback to invoke when the action is complete.\n */\nexport function navigateBack(onComplete?: onCompleteHandlerFunctionType): void {\n  ensureInitialized(runtime);\n  onComplete = onComplete ? onComplete : getGenericOnCompleteHandler();\n  pages.backStack\n    .navigateBack()\n    .then(() => {\n      onComplete(true);\n    })\n    .catch((error: Error) => {\n      onComplete(false, error.message);\n    });\n}\n","/* eslint-disable @typescript-eslint/ban-types */\n\nimport { sendMessageToParent } from '../internal/communication';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { ChildAppWindow, IAppWindow } from './appWindow';\nimport { FrameContexts, TaskModuleDimension } from './constants';\nimport { dialog } from './dialog';\nimport { BotUrlDialogInfo, DialogInfo, DialogSize, TaskInfo, UrlDialogInfo } from './interfaces';\nimport { runtime } from './runtime';\n\n/**\n * @deprecated\n * As of 2.0.0, please use {@link dialog} namespace instead.\n *\n * Namespace to interact with the task module-specific part of the SDK.\n * This object is usable only on the content frame.\n * The tasks namespace will be deprecated. Please use dialog for future developments.\n */\nexport namespace tasks {\n  /** Start task submit handler function type.  */\n  type startTaskSubmitHandlerFunctionType = (err: string, result: string | object) => void;\n\n  /**\n   * @deprecated\n   * As of 2.8.0:\n   * - For url-based dialogs, please use {@link dialog.url.open dialog.url.open(urlDialogInfo: UrlDialogInfo, submitHandler?: DialogSubmitHandler, messageFromChildHandler?: PostMessageChannel): void} .\n   * - For url-based dialogs with bot interaction, please use {@link dialog.url.bot.open dialog.url.bot.open(botUrlDialogInfo: BotUrlDialogInfo, submitHandler?: DialogSubmitHandler, messageFromChildHandler?: PostMessageChannel): void}\n   * - For Adaptive Card-based dialogs:\n   *   - In Teams, please continue to use this function until the new functions in {@link dialog.adaptiveCard} have been fully implemented. You can tell at runtime when they are implemented in Teams by checking\n   *     the return value of the {@link dialog.adaptiveCard.isSupported} function. This documentation line will also be removed once they have been fully implemented in Teams.\n   *   - In all other hosts, please use {@link dialog.adaptiveCard.open dialog.adaptiveCard.open(cardDialogInfo: CardDialogInfo, submitHandler?: DialogSubmitHandler, messageFromChildHandler?: PostMessageChannel): void}\n   *\n   * Allows an app to open the task module.\n   *\n   * @param taskInfo - An object containing the parameters of the task module\n   * @param submitHandler - Handler to call when the task module is completed\n   */\n  export function startTask(taskInfo: TaskInfo, submitHandler?: startTaskSubmitHandlerFunctionType): IAppWindow {\n    const dialogSubmitHandler = submitHandler\n      ? /* eslint-disable-next-line strict-null-checks/all */ /* fix tracked by 5730662 */\n        (sdkResponse: dialog.ISdkResponse) => submitHandler(sdkResponse.err, sdkResponse.result)\n      : undefined;\n    if (taskInfo.card === undefined && taskInfo.url === undefined) {\n      ensureInitialized(runtime, FrameContexts.content, FrameContexts.sidePanel, FrameContexts.meetingStage);\n      sendMessageToParent('tasks.startTask', [taskInfo as DialogInfo], submitHandler);\n    } else if (taskInfo.card) {\n      ensureInitialized(runtime, FrameContexts.content, FrameContexts.sidePanel, FrameContexts.meetingStage);\n      sendMessageToParent('tasks.startTask', [taskInfo as DialogInfo], submitHandler);\n    } else if (taskInfo.completionBotId !== undefined) {\n      dialog.url.bot.open(getBotUrlDialogInfoFromTaskInfo(taskInfo), dialogSubmitHandler);\n    } else {\n      dialog.url.open(getUrlDialogInfoFromTaskInfo(taskInfo), dialogSubmitHandler);\n    }\n    return new ChildAppWindow();\n  }\n\n  /**\n   * @deprecated\n   * As of 2.0.0, please use {@link dialog.update.resize dialog.update.resize(dimensions: DialogSize): void} instead.\n   *\n   * Update height/width task info properties.\n   *\n   * @param taskInfo - An object containing width and height properties\n   */\n  export function updateTask(taskInfo: TaskInfo): void {\n    taskInfo = getDefaultSizeIfNotProvided(taskInfo);\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { width, height, ...extra } = taskInfo;\n\n    if (Object.keys(extra).length) {\n      throw new Error('resize requires a TaskInfo argument containing only width and height');\n    }\n    dialog.update.resize(taskInfo as DialogSize);\n  }\n\n  /**\n   * @deprecated\n   * As of 2.8.0, please use {@link dialog.url.submit} instead.\n   *\n   * Submit the task module.\n   *\n   * @param result - Contains the result to be sent to the bot or the app. Typically a JSON object or a serialized version of it\n   * @param appIds - Valid application(s) that can receive the result of the submitted dialogs. Specifying this parameter helps prevent malicious apps from retrieving the dialog result. Multiple app IDs can be specified because a web app from a single underlying domain can power multiple apps across different environments and branding schemes.\n   */\n  export function submitTask(result?: string | object, appIds?: string | string[]): void {\n    dialog.url.submit(result, appIds);\n  }\n\n  /**\n   * Converts {@link TaskInfo} to {@link UrlDialogInfo}\n   * @param taskInfo - TaskInfo object to convert\n   * @returns - Converted UrlDialogInfo object\n   */\n  function getUrlDialogInfoFromTaskInfo(taskInfo: TaskInfo): UrlDialogInfo {\n    /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n    const urldialogInfo: UrlDialogInfo = {\n      url: taskInfo.url,\n      size: {\n        height: taskInfo.height ? taskInfo.height : TaskModuleDimension.Small,\n        width: taskInfo.width ? taskInfo.width : TaskModuleDimension.Small,\n      },\n      title: taskInfo.title,\n      fallbackUrl: taskInfo.fallbackUrl,\n    };\n    return urldialogInfo;\n  }\n\n  /**\n   * Converts {@link TaskInfo} to {@link BotUrlDialogInfo}\n   * @param taskInfo - TaskInfo object to convert\n   * @returns - converted BotUrlDialogInfo object\n   */\n  function getBotUrlDialogInfoFromTaskInfo(taskInfo: TaskInfo): BotUrlDialogInfo {\n    /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n    const botUrldialogInfo: BotUrlDialogInfo = {\n      url: taskInfo.url,\n      size: {\n        height: taskInfo.height ? taskInfo.height : TaskModuleDimension.Small,\n        width: taskInfo.width ? taskInfo.width : TaskModuleDimension.Small,\n      },\n      title: taskInfo.title,\n      fallbackUrl: taskInfo.fallbackUrl,\n      completionBotId: taskInfo.completionBotId,\n    };\n    return botUrldialogInfo;\n  }\n\n  /**\n   * Sets the height and width of the {@link TaskInfo} object to the original height and width, if initially specified,\n   * otherwise uses the height and width values corresponding to {@link DialogDimension | TaskModuleDimension.Small}\n   * @param taskInfo TaskInfo object from which to extract size info, if specified\n   * @returns TaskInfo with height and width specified\n   */\n  export function getDefaultSizeIfNotProvided(taskInfo: TaskInfo): TaskInfo {\n    taskInfo.height = taskInfo.height ? taskInfo.height : TaskModuleDimension.Small;\n    taskInfo.width = taskInfo.width ? taskInfo.width : TaskModuleDimension.Small;\n    return taskInfo;\n  }\n}\n","import { sendAndHandleSdkError } from '../internal/communication';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { FrameContexts } from './constants';\nimport { runtime } from './runtime';\n\n/**\n * APIs involving Live Share, a framework for building real-time collaborative apps.\n * For more information, visit https://aka.ms/teamsliveshare\n *\n * @see LiveShareHost\n */\nexport namespace liveShare {\n  /**\n   * @hidden\n   * The meeting roles of a user.\n   * Used in Live Share for its role verification feature.\n   * For more information, visit https://learn.microsoft.com/microsoftteams/platform/apps-in-teams-meetings/teams-live-share-capabilities?tabs=javascript#role-verification-for-live-data-structures\n   */\n  export enum UserMeetingRole {\n    /**\n     * Guest role.\n     */\n    guest = 'Guest',\n    /**\n     * Attendee role.\n     */\n    attendee = 'Attendee',\n    /**\n     * Presenter role.\n     */\n    presenter = 'Presenter',\n    /**\n     * Organizer role.\n     */\n    organizer = 'Organizer',\n  }\n\n  /**\n   * @hidden\n   * State of the current Live Share session's Fluid container.\n   * This is used internally by the `LiveShareClient` when joining a Live Share session.\n   */\n  export enum ContainerState {\n    /**\n     * The call to `LiveShareHost.setContainerId()` successfully created the container mapping\n     * for the current Live Share session.\n     */\n    added = 'Added',\n\n    /**\n     * A container mapping for the current Live Share session already exists.\n     * This indicates to Live Share that a new container does not need be created.\n     */\n    alreadyExists = 'AlreadyExists',\n\n    /**\n     * The call to `LiveShareHost.setContainerId()` failed to create the container mapping.\n     * This happens when another client has already set the container ID for the session.\n     */\n    conflict = 'Conflict',\n\n    /**\n     * A container mapping for the current Live Share session does not yet exist.\n     * This indicates to Live Share that a new container should be created.\n     */\n    notFound = 'NotFound',\n  }\n\n  /**\n   * @hidden\n   * Returned from `LiveShareHost.getFluidContainerId()` and `LiveShareHost.setFluidContainerId`.\n   * This response specifies the container mapping information for the current Live Share session.\n   */\n  export interface IFluidContainerInfo {\n    /**\n     * State of the containerId mapping.\n     */\n    containerState: ContainerState;\n\n    /**\n     * ID of the container to join for the meeting. Undefined if the container hasn't been\n     * created yet.\n     */\n    containerId: string | undefined;\n\n    /**\n     * If true, the local client should create the container and then save the created containers\n     * ID to the mapping service.\n     */\n    shouldCreate: boolean;\n\n    /**\n     * If `containerId` is undefined and `shouldCreate` is false, the container isn't ready\n     * but another client is creating it. In this case, the local client should wait the specified\n     * amount of time before calling `LiveShareHost.getFluidContainerId()` again.\n     */\n    retryAfter: number;\n  }\n\n  /**\n   * @hidden\n   * Returned from `LiveShareHost.getNtpTime()` to specify the global timestamp for the current\n   * Live Share session.\n   */\n  export interface INtpTimeInfo {\n    /**\n     * ISO 8601 formatted server time. For example: '2019-09-07T15:50-04:00'\n     */\n    ntpTime: string;\n\n    /**\n     * Server time expressed as the number of milliseconds since the ECMAScript epoch.\n     */\n    ntpTimeInUTC: number;\n  }\n\n  /**\n   * @hidden\n   * Returned from `LiveShareHost.getFluidTenantInfo()` to specify the Fluid service to use for the\n   * current Live Share session.\n   */\n  export interface IFluidTenantInfo {\n    /**\n     * The Fluid Tenant ID Live Share should use.\n     */\n    tenantId: string;\n\n    /**\n     * The Fluid service endpoint Live Share should use.\n     */\n    serviceEndpoint: string;\n  }\n\n  /**\n   * @hidden\n   * Returned from `LiveShareHost.getClientInfo()` to specify the client info for a\n   * particular client in a Live Share session.\n   */\n  export interface IClientInfo {\n    /**\n     * The host user's `userId` associated with a given `clientId`\n     */\n    userId: string;\n    /**\n     * User's meeting roles associated with a given `clientId`\n     */\n    roles: UserMeetingRole[];\n    /**\n     * The user's display name associated with a given `clientId`.\n     * If this returns as `undefined`, the user may need to update their host client.\n     */\n    displayName?: string;\n  }\n\n  /**\n   * Checks if the interactive capability is supported by the host\n   * @returns boolean to represent whether the interactive capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime, FrameContexts.meetingStage, FrameContexts.sidePanel) &&\n      runtime.supports.interactive\n      ? true\n      : false;\n  }\n}\n\n/**\n * Live Share host implementation for connecting to real-time collaborative sessions.\n * Designed for use with the `LiveShareClient` class in the `@microsoft/live-share` package.\n * Learn more at https://aka.ms/teamsliveshare\n *\n * @remarks\n * The `LiveShareClient` class from Live Share uses the hidden API's to join/manage the session.\n * To create a new `LiveShareHost` instance use the static `LiveShareHost.create()` function.\n */\nexport class LiveShareHost {\n  /**\n   * @hidden\n   * Returns the Fluid Tenant connection info for user's current context.\n   */\n  public getFluidTenantInfo(): Promise<liveShare.IFluidTenantInfo> {\n    ensureSupported();\n    return new Promise<liveShare.IFluidTenantInfo>((resolve) => {\n      resolve(sendAndHandleSdkError('interactive.getFluidTenantInfo'));\n    });\n  }\n\n  /**\n   * @hidden\n   * Returns the fluid access token for mapped container Id.\n   *\n   * @param containerId Fluid's container Id for the request. Undefined for new containers.\n   * @returns token for connecting to Fluid's session.\n   */\n  public getFluidToken(containerId?: string): Promise<string> {\n    ensureSupported();\n    return new Promise<string>((resolve) => {\n      // eslint-disable-next-line strict-null-checks/all\n      resolve(sendAndHandleSdkError('interactive.getFluidToken', containerId));\n    });\n  }\n\n  /**\n   * @hidden\n   * Returns the ID of the fluid container associated with the user's current context.\n   */\n  public getFluidContainerId(): Promise<liveShare.IFluidContainerInfo> {\n    ensureSupported();\n    return new Promise<liveShare.IFluidContainerInfo>((resolve) => {\n      resolve(sendAndHandleSdkError('interactive.getFluidContainerId'));\n    });\n  }\n\n  /**\n   * @hidden\n   * Sets the ID of the fluid container associated with the current context.\n   *\n   * @remarks\n   * If this returns false, the client should delete the container they created and then call\n   * `getFluidContainerId()` to get the ID of the container being used.\n   * @param containerId ID of the fluid container the client created.\n   * @returns A data structure with a `containerState` indicating the success or failure of the request.\n   */\n  public setFluidContainerId(containerId: string): Promise<liveShare.IFluidContainerInfo> {\n    ensureSupported();\n    return new Promise<liveShare.IFluidContainerInfo>((resolve) => {\n      resolve(sendAndHandleSdkError('interactive.setFluidContainerId', containerId));\n    });\n  }\n\n  /**\n   * @hidden\n   * Returns the shared clock server's current time.\n   */\n  public getNtpTime(): Promise<liveShare.INtpTimeInfo> {\n    ensureSupported();\n    return new Promise<liveShare.INtpTimeInfo>((resolve) => {\n      resolve(sendAndHandleSdkError('interactive.getNtpTime'));\n    });\n  }\n\n  /**\n   * @hidden\n   * Associates the fluid client ID with a set of user roles.\n   *\n   * @param clientId The ID for the current user's Fluid client. Changes on reconnects.\n   * @returns The roles for the current user.\n   */\n  public registerClientId(clientId: string): Promise<liveShare.UserMeetingRole[]> {\n    ensureSupported();\n    return new Promise<liveShare.UserMeetingRole[]>((resolve) => {\n      resolve(sendAndHandleSdkError('interactive.registerClientId', clientId));\n    });\n  }\n\n  /**\n   * @hidden\n   * Returns the roles associated with a client ID.\n   *\n   * @param clientId The Client ID the message was received from.\n   * @returns The roles for a given client. Returns `undefined` if the client ID hasn't been registered yet.\n   */\n  public getClientRoles(clientId: string): Promise<liveShare.UserMeetingRole[] | undefined> {\n    ensureSupported();\n    return new Promise<liveShare.UserMeetingRole[] | undefined>((resolve) => {\n      resolve(sendAndHandleSdkError('interactive.getClientRoles', clientId));\n    });\n  }\n\n  /**\n   * @hidden\n   * Returns the `IClientInfo` associated with a client ID.\n   *\n   * @param clientId The Client ID the message was received from.\n   * @returns The info for a given client. Returns `undefined` if the client ID hasn't been registered yet.\n   */\n  public getClientInfo(clientId: string): Promise<liveShare.IClientInfo | undefined> {\n    ensureSupported();\n    return new Promise<liveShare.IClientInfo | undefined>((resolve) => {\n      resolve(sendAndHandleSdkError('interactive.getClientInfo', clientId));\n    });\n  }\n\n  /**\n   * Factories a new `LiveShareHost` instance for use with the `LiveShareClient` class\n   * in the `@microsoft/live-share` package.\n   *\n   * @remarks\n   * `app.initialize()` must first be called before using this API.\n   * This API can only be called from `meetingStage` or `sidePanel` contexts.\n   */\n  public static create(): LiveShareHost {\n    ensureSupported();\n\n    return new LiveShareHost();\n  }\n}\n\nfunction ensureSupported(): void {\n  if (!liveShare.isSupported()) {\n    throw new Error('LiveShareHost Not supported');\n  }\n}\n","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { validate } from 'uuid';\n\nimport { marketplace } from '../public';\n\n/**\n * @hidden\n * deserialize the cart data:\n * - convert url properties from string to URL\n * @param cartItems The cart items\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function deserializeCart(cartData: any): marketplace.Cart {\n  try {\n    cartData.cartItems = deserializeCartItems(cartData.cartItems);\n    return cartData as marketplace.Cart;\n  } catch (e) {\n    throw new Error('Error deserializing cart');\n  }\n}\n\n/**\n * @hidden\n * deserialize the cart items:\n * - convert url properties from string to URL\n * @param cartItems The cart items\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function deserializeCartItems(cartItemsData: any): marketplace.CartItem {\n  return cartItemsData.map((cartItem) => {\n    if (cartItem.imageURL) {\n      const url = new URL(cartItem.imageURL);\n      cartItem.imageURL = url;\n    }\n    if (cartItem.accessories) {\n      cartItem.accessories = deserializeCartItems(cartItem.accessories);\n    }\n    return cartItem;\n  }) as marketplace.CartItem;\n}\n\n/**\n * @hidden\n * serialize the cart items:\n * - make URL properties to string\n * @param cartItems The cart items\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport const serializeCartItems = (cartItems: marketplace.CartItem[]): any => {\n  try {\n    return cartItems.map((cartItem) => {\n      const { imageURL, accessories, ...rest } = cartItem;\n      const cartItemsData: any = { ...rest };\n      if (imageURL) {\n        cartItemsData.imageURL = imageURL.href;\n      }\n      if (accessories) {\n        cartItemsData.accessories = serializeCartItems(accessories);\n      }\n      return cartItemsData;\n    });\n  } catch (e) {\n    throw new Error('Error serializing cart items');\n  }\n};\n\n/**\n * @hidden\n * Validate the cart item properties are valid\n * @param cartItems The cart items\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function validateCartItems(cartItems: marketplace.CartItem[]): void {\n  if (!Array.isArray(cartItems) || cartItems.length === 0) {\n    throw new Error('cartItems must be a non-empty array');\n  }\n  for (const cartItem of cartItems) {\n    validateBasicCartItem(cartItem);\n    validateAccessoryItems(cartItem.accessories);\n  }\n}\n\n/**\n * @hidden\n * Validate accessories\n * @param accessoryItems The accessories to be validated\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function validateAccessoryItems(accessoryItems: marketplace.Item[] | undefined | null): void {\n  if (accessoryItems === null || accessoryItems === undefined) {\n    return;\n  }\n  if (!Array.isArray(accessoryItems) || accessoryItems.length === 0) {\n    throw new Error('CartItem.accessories must be a non-empty array');\n  }\n  for (const accessoryItem of accessoryItems) {\n    if (accessoryItem['accessories']) {\n      throw new Error('Item in CartItem.accessories cannot have accessories');\n    }\n    validateBasicCartItem(accessoryItem);\n  }\n}\n\n/**\n * @hidden\n * Validate the basic cart item properties are valid\n * @param basicCartItem The basic cart item\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function validateBasicCartItem(basicCartItem: marketplace.Item): void {\n  if (!basicCartItem.id) {\n    throw new Error('cartItem.id must not be empty');\n  }\n  if (!basicCartItem.name) {\n    throw new Error('cartItem.name must not be empty');\n  }\n  validatePrice(basicCartItem.price);\n  validateQuantity(basicCartItem.quantity);\n}\n\n/**\n * @hidden\n * Validate the id is valid\n * @param id A uuid string\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function validateUuid(id: string | undefined | null): void {\n  if (id === undefined || id === null) {\n    return;\n  }\n  if (!id) {\n    throw new Error('id must not be empty');\n  }\n  if (validate(id) === false) {\n    throw new Error('id must be a valid UUID');\n  }\n}\n\n/**\n * @hidden\n * Validate the cart item properties are valid\n * @param price The price to be validated\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function validatePrice(price: number): void {\n  if (typeof price !== 'number' || price < 0) {\n    throw new Error(`price ${price} must be a number not less than 0`);\n  }\n  if (parseFloat(price.toFixed(3)) !== price) {\n    throw new Error(`price ${price} must have at most 3 decimal places`);\n  }\n}\n\n/**\n * @hidden\n * Validate quantity\n * @param quantity The quantity to be validated\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function validateQuantity(quantity: number): void {\n  if (typeof quantity !== 'number' || quantity <= 0 || parseInt(quantity.toString()) !== quantity) {\n    throw new Error(`quantity ${quantity} must be an integer greater than 0`);\n  }\n}\n\n/**\n * @hidden\n * Validate cart status\n * @param cartStatus The cartStatus to be validated\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport function validateCartStatus(cartStatus: marketplace.CartStatus): void {\n  if (!Object.values(marketplace.CartStatus).includes(cartStatus)) {\n    throw new Error(`cartStatus ${cartStatus} is not valid`);\n  }\n}\n","import { sendAndHandleSdkError } from '../internal/communication';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport {\n  deserializeCart,\n  serializeCartItems,\n  validateCartItems,\n  validateCartStatus,\n  validateUuid,\n} from '../internal/marketplaceUtils';\nimport { errorNotSupportedOnPlatform, FrameContexts } from './constants';\nimport { runtime } from './runtime';\n\n/**\n * @hidden\n * Namespace for an app to support a checkout flow by interacting with the marketplace cart in the host.\n * @beta\n */\nexport namespace marketplace {\n  /**\n   * @hidden\n   * the version of the current cart interface\n   * which is forced to send to the host in the calls.\n   * @internal\n   * Limited to Microsoft-internal use\n   * @beta\n   */\n  export const cartVersion: CartVersion = {\n    /**\n     * @hidden\n     * Represents the major version of the current cart interface,\n     * it is increased when incompatible interface update happens.\n     */\n    majorVersion: 1,\n    /**\n     * @hidden\n     * The minor version of the current cart interface, which is compatible\n     * with the previous minor version in the same major version.\n     */\n    minorVersion: 1,\n  };\n\n  /**\n   * @hidden\n   * Represents the cart object for the app checkout flow.\n   * @beta\n   */\n  export interface Cart {\n    /**\n     * @hidden\n     * Version of the cart.\n     */\n    readonly version: CartVersion;\n    /**\n     * @hidden\n     * The uuid of the cart.\n     */\n    readonly id: string;\n    /**\n     * @hidden\n     * The cart info.\n     */\n    readonly cartInfo: CartInfo;\n    /**\n     * @hidden\n     * The cart items.\n     */\n    readonly cartItems: CartItem[];\n  }\n\n  /**\n   * @hidden\n   * Version of the cart that is used by the app.\n   * @internal\n   * Limited to Microsoft-internal use\n   * @beta\n   */\n  interface CartVersion {\n    /**\n     * @hidden\n     * Represents the major version of a cart, it\n     * not compatible with the previous major version.\n     */\n    readonly majorVersion: number;\n    /**\n     * @hidden\n     * The minor version of a cart, which is compatible\n     * with the previous minor version in the same major version.\n     */\n    readonly minorVersion: number;\n  }\n\n  /**\n   * @hidden\n   * Represents the cart information\n   * @beta\n   */\n  interface CartInfo {\n    /**\n     * @hidden\n     * The country market where the products are selling.\n     * Should be country code in ISO 3166-1 alpha-2 format, e.g. CA for Canada.\n     * https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n     */\n    readonly market: string;\n    /**\n     * @hidden\n     * The identifier to tell the cart is checked out by admin or end user.\n     */\n    readonly intent: Intent;\n    /**\n     * @hidden\n     * Locale the app should render for the user\n     * Should be a BCP 47 language tag, e.g. en-US ([primary tag]-[ISO 3166-1 alpha-2 code]).\n     * https://en.wikipedia.org/wiki/IETF_language_tag\n     */\n    readonly locale: string;\n    /**\n     * @hidden\n     * The status of the cart.\n     */\n    readonly status: CartStatus;\n    /**\n     * @hidden\n     * ISO 4217 currency code for the cart item price, e.g. USD for US Dollar.\n     * https://en.wikipedia.org/wiki/ISO_4217\n     */\n    readonly currency: string;\n    /**\n     * @hidden\n     * ISO 8601 timestamp string in UTC, indicates when the cart is created.\n     * e.g. 2023-06-19T22:06:59Z\n     * https://en.wikipedia.org/wiki/ISO_8601\n     */\n    readonly createdAt: string;\n    /**\n     * @hidden\n     * ISO 8601 timestamp string in UTC, indicates when the cart is updated.\n     * e.g. 2023-06-19T22:06:59Z\n     * https://en.wikipedia.org/wiki/ISO_8601\n     */\n    readonly updatedAt: string;\n  }\n\n  /**\n   * @hidden\n   * Represents the basic cart item information.\n   * @beta\n   */\n  export interface Item {\n    /**\n     * @hidden\n     * The id of the cart item.\n     */\n    readonly id: string;\n    /**\n     * @hidden\n     * The display name of the cart item.\n     */\n    readonly name: string;\n    /**\n     * @hidden\n     * The quantity of the cart item.\n     */\n    readonly quantity: number;\n    /**\n     * @hidden\n     * The price of the single cart item.\n     */\n    readonly price: number;\n    /**\n     * @hidden\n     * The thumbnail imageURL of the cart item.\n     */\n    readonly imageURL?: URL;\n  }\n\n  /**\n   * @hidden\n   * Represents the cart item that could have accessories\n   * @beta\n   */\n  export interface CartItem extends Item {\n    /**\n     * @hidden\n     * Accessories to the item if existing.\n     */\n    readonly accessories?: Item[];\n    /**\n     * @hidden\n     * The thumbnail imageURL of the cart item.\n     */\n    readonly imageURL?: URL;\n  }\n\n  /**\n   * @hidden\n   * Represents the persona creating the cart.\n   * @beta\n   */\n  export enum Intent {\n    /**\n     * @hidden\n     * The cart is created by admin of an organization in Teams Admin Center.\n     */\n    TACAdminUser = 'TACAdminUser',\n    /**\n     * @hidden\n     * The cart is created by admin of an organization in Teams.\n     */\n    TeamsAdminUser = 'TeamsAdminUser',\n    /**\n     * @hidden\n     * The cart is created by end user of an organization in Teams.\n     */\n    TeamsEndUser = 'TeamsEndUser',\n  }\n\n  /**\n   * @hidden\n   * Represents the status of the cart.\n   * @beta\n   */\n  export enum CartStatus {\n    /**\n     * @hidden\n     * Cart is created but not checked out yet.\n     */\n    Open = 'Open',\n    /**\n     * @hidden\n     * Cart is checked out but not completed yet.\n     */\n    Processing = 'Processing',\n    /**\n     * @hidden\n     * Indicate checking out is completed and the host should\n     * return a new cart in the next getCart call.\n     */\n    Processed = 'Processed',\n    /**\n     * @hidden\n     * Indicate checking out process is manually cancelled by the user\n     */\n    Closed = 'Closed',\n    /**\n     * @hidden\n     * Indicate checking out is failed and the host should\n     * return a new cart in the next getCart call.\n     */\n    Error = 'Error',\n  }\n  /**\n   * @hidden\n   * Represents the parameters to update the cart items.\n   * @beta\n   */\n  export interface AddOrUpdateCartItemsParams {\n    /**\n     * @hidden\n     * The uuid of the cart to be updated, target on the cart\n     * being checked out  if cartId is not provided.\n     */\n    cartId?: string;\n    /**\n     * @hidden\n     * A list of cart items object, for each item,\n     * if item id exists in the cart, overwrite the item price and quantity,\n     * otherwise add new items to cart.\n     */\n    cartItems: CartItem[];\n  }\n  /**\n   * @hidden\n   * Represents the parameters to remove the cart items.\n   * @beta\n   */\n  export interface RemoveCartItemsParams {\n    /**\n     * @hidden\n     * The uuid of the cart to be updated, target on the cart\n     * being checked out if cartId is not provided.\n     */\n    cartId?: string;\n    /**\n     * @hidden\n     * A list of cart id, delete the cart item accordingly.\n     */\n    cartItemIds: string[];\n  }\n  /**\n   * @hidden\n   * Represents the parameters to update the cart status.\n   * @beta\n   */\n  export interface UpdateCartStatusParams {\n    /**\n     * @hidden\n     * The uuid of the cart to be updated, target on the cart\n     * being checked out if cartId is not provided.\n     */\n    cartId?: string;\n    /**\n     * @hidden\n     * Status of the cart.\n     */\n    cartStatus: CartStatus;\n    /**\n     * @hidden\n     * Extra info to the status.\n     */\n    statusInfo?: string;\n  }\n\n  /**\n   * @hidden\n   * Get the cart object owned by the host to checkout.\n   * @returns A promise of the cart object in the cartVersion.\n   * @beta\n   */\n  export function getCart(): Promise<Cart> {\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    return sendAndHandleSdkError('marketplace.getCart', cartVersion).then(deserializeCart);\n  }\n  /**\n   * @hidden\n   * Add or update cart items in the cart owned by the host.\n   * @param addOrUpdateCartItemsParams Represents the parameters to update the cart items.\n   * @returns A promise of the updated cart object in the cartVersion.\n   * @beta\n   */\n  export function addOrUpdateCartItems(addOrUpdateCartItemsParams: AddOrUpdateCartItemsParams): Promise<Cart> {\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    if (!addOrUpdateCartItemsParams) {\n      throw new Error('addOrUpdateCartItemsParams must be provided');\n    }\n    validateUuid(addOrUpdateCartItemsParams?.cartId);\n    validateCartItems(addOrUpdateCartItemsParams?.cartItems);\n    return sendAndHandleSdkError('marketplace.addOrUpdateCartItems', {\n      ...addOrUpdateCartItemsParams,\n      cartItems: serializeCartItems(addOrUpdateCartItemsParams.cartItems),\n      cartVersion,\n    }).then(deserializeCart);\n  }\n\n  /**\n   * @hidden\n   * Remove cart items from the cart owned by the host.\n   * @param removeCartItemsParams The parameters to remove the cart items.\n   * @returns A promise of the updated cart object in the cartVersion.\n   * @beta\n   */\n  export function removeCartItems(removeCartItemsParams: RemoveCartItemsParams): Promise<Cart> {\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    if (!removeCartItemsParams) {\n      throw new Error('removeCartItemsParams must be provided');\n    }\n    validateUuid(removeCartItemsParams?.cartId);\n    if (!Array.isArray(removeCartItemsParams?.cartItemIds) || removeCartItemsParams?.cartItemIds.length === 0) {\n      throw new Error('cartItemIds must be a non-empty array');\n    }\n    return sendAndHandleSdkError('marketplace.removeCartItems', {\n      ...removeCartItemsParams,\n      cartVersion,\n    }).then(deserializeCart);\n  }\n  /**\n   * @hidden\n   * Update cart status in the cart owned by the host.\n   * @param updateCartStatusParams The parameters to update the cart status.\n   * @returns A promise of the updated cart object in the cartVersion.\n   * @beta\n   */\n  export function updateCartStatus(updateCartStatusParams: UpdateCartStatusParams): Promise<Cart> {\n    ensureInitialized(runtime, FrameContexts.content, FrameContexts.task);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    if (!updateCartStatusParams) {\n      throw new Error('updateCartStatusParams must be provided');\n    }\n    validateUuid(updateCartStatusParams?.cartId);\n    validateCartStatus(updateCartStatusParams?.cartStatus);\n    return sendAndHandleSdkError('marketplace.updateCartStatus', {\n      ...updateCartStatusParams,\n      cartVersion,\n    }).then(deserializeCart);\n  }\n  /**\n   * @hidden\n   * Checks if the marketplace capability is supported by the host.\n   * @returns Boolean to represent whether the marketplace capability is supported.\n   * @throws Error if {@linkcode app.initialize} has not successfully completed.\n   * @beta\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.marketplace ? true : false;\n  }\n}\n","import { sendMessageToParent } from '../internal/communication';\nimport { registerHandler } from '../internal/handlers';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { ErrorCode, FileOpenPreference, FrameContexts, SdkError } from '../public';\nimport { runtime } from '../public/runtime';\n\n/**\n * @hidden\n *\n * Namespace to interact with the files specific part of the SDK.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport namespace files {\n  /**\n   * @hidden\n   *\n   * Cloud storage providers registered with Microsoft Teams\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export enum CloudStorageProvider {\n    Dropbox = 'DROPBOX',\n    Box = 'BOX',\n    Sharefile = 'SHAREFILE',\n    GoogleDrive = 'GOOGLEDRIVE',\n    Egnyte = 'EGNYTE',\n    SharePoint = 'SharePoint',\n  }\n  interface IWopiThumbnail {\n    size: number;\n    url: string;\n  }\n\n  interface IWopiService {\n    name: string;\n    description: string;\n    thumbnails: IWopiThumbnail[];\n  }\n\n  /**\n   * @hidden\n   *\n   * External third-party cloud storages providers interface\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface IExternalProvider extends IWopiService {\n    providerType: CloudStorageProviderType;\n    providerCode: CloudStorageProvider;\n  }\n\n  /**\n   * @hidden\n   *\n   * Cloud storage provider type enums\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export enum CloudStorageProviderType {\n    Sharepoint = 0,\n    WopiIntegration,\n    Google,\n    OneDrive,\n    Recent,\n    Aggregate,\n    FileSystem, // Used for Downloaded files on Desktop\n    Search, // Used by P2P files with OSearch\n    AllFiles, // Used by P2P files with AllFiles API\n    SharedWithMe,\n  }\n\n  /**\n   * @hidden\n   *\n   * Cloud storage folder interface\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface CloudStorageFolder {\n    /**\n     * @hidden\n     * ID of the cloud storage folder\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    id: string;\n    /**\n     * @hidden\n     * Display Name/Title of the cloud storage folder\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    title: string;\n    /**\n     * @hidden\n     * ID of the cloud storage folder in the provider\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    folderId: string;\n    /**\n     * @hidden\n     * Type of the cloud storage folder provider integration\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    providerType: CloudStorageProviderType;\n    /**\n     * @hidden\n     * Code of the supported cloud storage folder provider\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    providerCode: CloudStorageProvider;\n    /**\n     * @hidden\n     * Display name of the owner of the cloud storage folder provider\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    ownerDisplayName: string;\n    /**\n     * @hidden\n     * Sharepoint specific siteURL of the folder\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    siteUrl?: string;\n    /**\n     * @hidden\n     * Sharepoint specific serverRelativeUrl of the folder\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    serverRelativeUrl?: string;\n    /**\n     * @hidden\n     * Sharepoint specific libraryType of the folder\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    libraryType?: string;\n    /**\n     * @hidden\n     * Sharepoint specific accessType of the folder\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    accessType?: string;\n  }\n\n  /**\n   * @hidden\n   *\n   * Cloud storage item interface\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface CloudStorageFolderItem {\n    /**\n     * @hidden\n     * ID of the item in the provider\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    id: string;\n    /**\n     * @hidden\n     * Display name/title\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    title: string;\n    /**\n     * @hidden\n     * Key to differentiate files and subdirectory\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    isSubdirectory: boolean;\n    /**\n     * @hidden\n     * File extension\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    type: string;\n    /**\n     * @hidden\n     * Last modifed time of the item\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    lastModifiedTime: string;\n    /**\n     * @hidden\n     * Display size of the items in bytes\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    size: number;\n    /**\n     * @hidden\n     * URL of the file\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    objectUrl: string;\n    /**\n     * @hidden\n     * Temporary access token for the item\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    accessToken?: string;\n  }\n\n  /**\n   * @hidden\n   *\n   * Files entity user interface\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface IFilesEntityUser {\n    /**\n     * @hidden\n     * User name.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    displayName: string;\n    /**\n     * @hidden\n     * User email.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    email: string;\n\n    /**\n     * @hidden\n     * User MRI.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    mri: string;\n  }\n\n  /**\n   * @hidden\n   *\n   * Special Document Library enum\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export enum SpecialDocumentLibraryType {\n    ClassMaterials = 'classMaterials',\n  }\n\n  /**\n   * @hidden\n   *\n   * Document Library Access enum\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export enum DocumentLibraryAccessType {\n    Readonly = 'readonly',\n  }\n\n  /**\n   * @hidden\n   *\n   * SharePoint file interface\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface ISharePointFile {\n    siteId?: string;\n    siteUrl: string;\n    objectId: string;\n    objectUrl: string;\n    openInWindowFileUrl: string;\n    title: string;\n    isFolder: boolean;\n    serverRelativeUrl: string;\n    lastModifiedByUser: IFilesEntityUser;\n    lastModifiedTime: string;\n    sentByUser: IFilesEntityUser;\n    createdByUser: IFilesEntityUser;\n    createdTime: string;\n    size: number;\n    type: string;\n    spItemUrl?: string;\n    libraryType?: SpecialDocumentLibraryType;\n    accessType?: DocumentLibraryAccessType;\n    etag?: string;\n    remoteItem?: string;\n    listUrl?: string;\n  }\n\n  /**\n   * @hidden\n   *\n   * Download status enum\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export enum FileDownloadStatus {\n    Downloaded = 'Downloaded',\n    Downloading = 'Downloading',\n    Failed = 'Failed',\n  }\n\n  /**\n   * @hidden\n   *\n   * Download Files interface\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface IFileItem {\n    /**\n     * @hidden\n     * ID of the file metadata\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    objectId?: string;\n    /**\n     * @hidden\n     * Path of the file\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    path?: string;\n    /**\n     * @hidden\n     * Size of the file in bytes\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    sizeInBytes?: number;\n    /**\n     * @hidden\n     * Download status\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    status?: FileDownloadStatus;\n    /**\n     * @hidden\n     * Download timestamp\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    timestamp: Date;\n    /**\n     * @hidden\n     * File name\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    title: string;\n    /**\n     * @hidden\n     * Type of file i.e. the file extension.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    extension: string;\n  }\n\n  /**\n   * @hidden\n   * Object used to represent a file\n   * @beta\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface File extends Blob {\n    /**\n     * A number that represents the number of milliseconds since the Unix epoch\n     */\n    lastModified: number;\n    /**\n     * Name of the file\n     */\n    name: string;\n    /**\n     * A string containing the path of the file relative to the ancestor directory the user selected\n     */\n    webkitRelativePath?: string;\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Actions specific to 3P cloud storage provider file and / or account\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export enum CloudStorageProviderFileAction {\n    Download = 'DOWNLOAD',\n    Upload = 'UPLOAD',\n    Delete = 'DELETE',\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Interface for 3P cloud storage provider request content type\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface CloudStorageProviderRequest<T> {\n    content: T;\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Base interface for 3P cloud storage provider action request content\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface CloudStorageProviderContent {\n    providerCode: CloudStorageProvider;\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Interface representing 3P cloud storage provider add new file action.\n   * The file extension represents type of file e.g. docx, pptx etc. and need not be prefixed with dot(.)\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface CloudStorageProviderNewFileContent extends CloudStorageProviderContent {\n    newFileName: string;\n    newFileExtension: string;\n    destinationFolder: CloudStorageFolderItem | ISharePointFile;\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Interface representing 3P cloud storage provider rename existing file action\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface CloudStorageProviderRenameFileContent extends CloudStorageProviderContent {\n    existingFile: CloudStorageFolderItem | ISharePointFile;\n    newFile: CloudStorageFolderItem | ISharePointFile;\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Interface representing 3P cloud storage provider delete existing file(s) action\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface CloudStorageProviderDeleteFileContent extends CloudStorageProviderContent {\n    itemList: CloudStorageFolderItem[] | ISharePointFile[];\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Interface representing 3P cloud storage provider download existing file(s) action\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface CloudStorageProviderDownloadFileContent extends CloudStorageProviderContent {\n    itemList: CloudStorageFolderItem[] | ISharePointFile[];\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   * @beta\n   *\n   * Interface representing 3P cloud storage provider upload existing file(s) action\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface CloudStorageProviderUploadFileContent extends CloudStorageProviderContent {\n    itemList: File[];\n    destinationFolder: CloudStorageFolderItem | ISharePointFile;\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Gets a list of cloud storage folders added to the channel\n   * @param channelId - ID of the channel whose cloud storage folders should be retrieved\n   * @param callback - Callback that will be triggered post folders load\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function getCloudStorageFolders(\n    channelId: string,\n    callback: (error: SdkError, folders: CloudStorageFolder[]) => void,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!channelId || channelId.length === 0) {\n      throw new Error('[files.getCloudStorageFolders] channelId name cannot be null or empty');\n    }\n    if (!callback) {\n      throw new Error('[files.getCloudStorageFolders] Callback cannot be null');\n    }\n\n    sendMessageToParent('files.getCloudStorageFolders', [channelId], callback);\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   * ------\n   * Initiates the add cloud storage folder flow\n   *\n   * @param channelId - ID of the channel to add cloud storage folder\n   * @param callback - Callback that will be triggered post add folder flow is compelete\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function addCloudStorageFolder(\n    channelId: string,\n    callback: (error: SdkError, isFolderAdded: boolean, folders: CloudStorageFolder[]) => void,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!channelId || channelId.length === 0) {\n      throw new Error('[files.addCloudStorageFolder] channelId name cannot be null or empty');\n    }\n    if (!callback) {\n      throw new Error('[files.addCloudStorageFolder] Callback cannot be null');\n    }\n\n    sendMessageToParent('files.addCloudStorageFolder', [channelId], callback);\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   * ------\n   *\n   * Deletes a cloud storage folder from channel\n   *\n   * @param channelId - ID of the channel where folder is to be deleted\n   * @param folderToDelete - cloud storage folder to be deleted\n   * @param callback - Callback that will be triggered post delete\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function deleteCloudStorageFolder(\n    channelId: string,\n    folderToDelete: CloudStorageFolder,\n    callback: (error: SdkError, isFolderDeleted: boolean) => void,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!channelId) {\n      throw new Error('[files.deleteCloudStorageFolder] channelId name cannot be null or empty');\n    }\n    if (!folderToDelete) {\n      throw new Error('[files.deleteCloudStorageFolder] folderToDelete cannot be null or empty');\n    }\n    if (!callback) {\n      throw new Error('[files.deleteCloudStorageFolder] Callback cannot be null');\n    }\n\n    sendMessageToParent('files.deleteCloudStorageFolder', [channelId, folderToDelete], callback);\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   * ------\n   *\n   * Fetches the contents of a Cloud storage folder (CloudStorageFolder) / sub directory\n   *\n   * @param folder - Cloud storage folder (CloudStorageFolder) / sub directory (CloudStorageFolderItem)\n   * @param providerCode - Code of the cloud storage folder provider\n   * @param callback - Callback that will be triggered post contents are loaded\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function getCloudStorageFolderContents(\n    folder: CloudStorageFolder | CloudStorageFolderItem,\n    providerCode: CloudStorageProvider,\n    callback: (error: SdkError, items: CloudStorageFolderItem[]) => void,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!folder || !providerCode) {\n      throw new Error('[files.getCloudStorageFolderContents] folder/providerCode name cannot be null or empty');\n    }\n\n    if (!callback) {\n      throw new Error('[files.getCloudStorageFolderContents] Callback cannot be null');\n    }\n\n    if ('isSubdirectory' in folder && !folder.isSubdirectory) {\n      throw new Error('[files.getCloudStorageFolderContents] provided folder is not a subDirectory');\n    }\n\n    sendMessageToParent('files.getCloudStorageFolderContents', [folder, providerCode], callback);\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   * ------\n   *\n   * Open a cloud storage file in Teams\n   *\n   * @param file - cloud storage file that should be opened\n   * @param providerCode - Code of the cloud storage folder provider\n   * @param fileOpenPreference - Whether file should be opened in web/inline\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function openCloudStorageFile(\n    file: CloudStorageFolderItem,\n    providerCode: CloudStorageProvider,\n    fileOpenPreference?: FileOpenPreference.Web | FileOpenPreference.Inline,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!file || !providerCode) {\n      throw new Error('[files.openCloudStorageFile] file/providerCode cannot be null or empty');\n    }\n\n    if (file.isSubdirectory) {\n      throw new Error('[files.openCloudStorageFile] provided file is a subDirectory');\n    }\n\n    sendMessageToParent('files.openCloudStorageFile', [file, providerCode, fileOpenPreference]);\n  }\n\n  /**\n   * @hidden\n   * Allow 1st party apps to call this function to get the external\n   * third party cloud storage accounts that the tenant supports\n   * @param excludeAddedProviders: return a list of support third party\n   * cloud storages that hasn't been added yet.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function getExternalProviders(\n    excludeAddedProviders = false,\n    callback: (error: SdkError, providers: IExternalProvider[]) => void,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!callback) {\n      throw new Error('[files.getExternalProviders] Callback cannot be null');\n    }\n\n    sendMessageToParent('files.getExternalProviders', [excludeAddedProviders], callback);\n  }\n\n  /**\n   * @hidden\n   * Allow 1st party apps to call this function to move files\n   * among SharePoint and third party cloud storages.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function copyMoveFiles(\n    selectedFiles: CloudStorageFolderItem[] | ISharePointFile[],\n    providerCode: CloudStorageProvider,\n    destinationFolder: CloudStorageFolderItem | ISharePointFile,\n    destinationProviderCode: CloudStorageProvider,\n    isMove = false,\n    callback: (error?: SdkError) => void,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.content);\n    if (!selectedFiles || selectedFiles.length === 0) {\n      throw new Error('[files.copyMoveFiles] selectedFiles cannot be null or empty');\n    }\n    if (!providerCode) {\n      throw new Error('[files.copyMoveFiles] providerCode cannot be null or empty');\n    }\n    if (!destinationFolder) {\n      throw new Error('[files.copyMoveFiles] destinationFolder cannot be null or empty');\n    }\n    if (!destinationProviderCode) {\n      throw new Error('[files.copyMoveFiles] destinationProviderCode cannot be null or empty');\n    }\n    if (!callback) {\n      throw new Error('[files.copyMoveFiles] callback cannot be null');\n    }\n    sendMessageToParent(\n      'files.copyMoveFiles',\n      [selectedFiles, providerCode, destinationFolder, destinationProviderCode, isMove],\n      callback,\n    );\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *  ------\n   *\n   * Gets list of downloads for current user\n   * @param callback Callback that will be triggered post downloads load\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function getFileDownloads(callback: (error?: SdkError, files?: IFileItem[]) => void): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!callback) {\n      throw new Error('[files.getFileDownloads] Callback cannot be null');\n    }\n\n    sendMessageToParent('files.getFileDownloads', [], callback);\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Open download preference folder if fileObjectId value is undefined else open folder containing the file with id fileObjectId\n   * @param fileObjectId - Id of the file whose containing folder should be opened\n   * @param callback Callback that will be triggered post open download folder/path\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function openDownloadFolder(fileObjectId: string = undefined, callback: (error?: SdkError) => void): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!callback) {\n      throw new Error('[files.openDownloadFolder] Callback cannot be null');\n    }\n\n    sendMessageToParent('files.openDownloadFolder', [fileObjectId], callback);\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Initiates add 3P cloud storage provider flow, where a pop up window opens for user to select required\n   * 3P provider from the configured policy supported 3P provider list, following which user authentication\n   * for selected 3P provider is performed on success of which the selected 3P provider support is added for user\n   * @beta\n   *\n   * @param callback Callback that will be triggered post add 3P cloud storage provider action.\n   * If the error is encountered (and hence passed back), no provider value is sent back.\n   * For success scenarios, error value will be passed as null and a valid provider value is sent.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function addCloudStorageProvider(callback: (error?: SdkError, provider?: CloudStorageProvider) => void): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!callback) {\n      throw getSdkError(ErrorCode.INVALID_ARGUMENTS, '[files.addCloudStorageProvider] callback cannot be null');\n    }\n\n    sendMessageToParent('files.addCloudStorageProvider', [], callback);\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Initiates signout of 3P cloud storage provider flow, which will remove the selected\n   * 3P cloud storage provider from the list of added providers. No other user input and / or action\n   * is required except the 3P cloud storage provider to signout from\n   *\n   * @param logoutRequest 3P cloud storage provider remove action request content\n   * @param callback Callback that will be triggered post signout of 3P cloud storage provider action\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function removeCloudStorageProvider(\n    logoutRequest: CloudStorageProviderRequest<CloudStorageProviderContent>,\n    callback: (error?: SdkError) => void,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!callback) {\n      throw getSdkError(ErrorCode.INVALID_ARGUMENTS, '[files.removeCloudStorageProvider] callback cannot be null');\n    }\n\n    if (!(logoutRequest && logoutRequest.content)) {\n      throw getSdkError(\n        ErrorCode.INVALID_ARGUMENTS,\n        '[files.removeCloudStorageProvider] 3P cloud storage provider request content is missing',\n      );\n    }\n\n    sendMessageToParent('files.removeCloudStorageProvider', [logoutRequest], callback);\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Initiates the add 3P cloud storage file flow, which will add a new file for the given 3P provider\n   *\n   * @param addNewFileRequest 3P cloud storage provider add action request content\n   * @param callback Callback that will be triggered post adding a new file flow is finished\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function addCloudStorageProviderFile(\n    addNewFileRequest: CloudStorageProviderRequest<CloudStorageProviderNewFileContent>,\n    callback: (error?: SdkError, actionStatus?: boolean) => void,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!callback) {\n      throw getSdkError(ErrorCode.INVALID_ARGUMENTS, '[files.addCloudStorageProviderFile] callback cannot be null');\n    }\n\n    if (!(addNewFileRequest && addNewFileRequest.content)) {\n      throw getSdkError(\n        ErrorCode.INVALID_ARGUMENTS,\n        '[files.addCloudStorageProviderFile] 3P cloud storage provider request content is missing',\n      );\n    }\n\n    sendMessageToParent('files.addCloudStorageProviderFile', [addNewFileRequest], callback);\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Initiates the rename 3P cloud storage file flow, which will rename an existing file in the given 3P provider\n   *\n   * @param renameFileRequest 3P cloud storage provider rename action request content\n   * @param callback Callback that will be triggered post renaming an existing file flow is finished\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function renameCloudStorageProviderFile(\n    renameFileRequest: CloudStorageProviderRequest<CloudStorageProviderRenameFileContent>,\n    callback: (error?: SdkError, actionStatus?: boolean) => void,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!callback) {\n      throw getSdkError(ErrorCode.INVALID_ARGUMENTS, '[files.renameCloudStorageProviderFile] callback cannot be null');\n    }\n\n    if (!(renameFileRequest && renameFileRequest.content)) {\n      throw getSdkError(\n        ErrorCode.INVALID_ARGUMENTS,\n        '[files.renameCloudStorageProviderFile] 3P cloud storage provider request content is missing',\n      );\n    }\n\n    sendMessageToParent('files.renameCloudStorageProviderFile', [renameFileRequest], callback);\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Initiates the delete 3P cloud storage file(s) / folder (folder has to be empty) flow,\n   * which will delete existing file(s) / folder from the given 3P provider\n   *\n   * @param deleteFileRequest 3P cloud storage provider delete action request content\n   * @param callback Callback that will be triggered post deleting existing file(s) flow is finished\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function deleteCloudStorageProviderFile(\n    deleteFileRequest: CloudStorageProviderRequest<CloudStorageProviderDeleteFileContent>,\n    callback: (error?: SdkError, actionStatus?: boolean) => void,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!callback) {\n      throw getSdkError(ErrorCode.INVALID_ARGUMENTS, '[files.deleteCloudStorageProviderFile] callback cannot be null');\n    }\n\n    if (\n      !(\n        deleteFileRequest &&\n        deleteFileRequest.content &&\n        deleteFileRequest.content.itemList &&\n        deleteFileRequest.content.itemList.length > 0\n      )\n    ) {\n      throw getSdkError(\n        ErrorCode.INVALID_ARGUMENTS,\n        '[files.deleteCloudStorageProviderFile] 3P cloud storage provider request content details are missing',\n      );\n    }\n\n    sendMessageToParent('files.deleteCloudStorageProviderFile', [deleteFileRequest], callback);\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Initiates the download 3P cloud storage file(s) flow,\n   * which will download existing file(s) from the given 3P provider in the teams client side without sharing any file info in the callback\n   *\n   * @param downloadFileRequest 3P cloud storage provider download file(s) action request content\n   * @param callback Callback that will be triggered post downloading existing file(s) flow is finished\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function downloadCloudStorageProviderFile(\n    downloadFileRequest: CloudStorageProviderRequest<CloudStorageProviderDownloadFileContent>,\n    callback: (error?: SdkError, actionStatus?: boolean) => void,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!callback) {\n      throw getSdkError(\n        ErrorCode.INVALID_ARGUMENTS,\n        '[files.downloadCloudStorageProviderFile] callback cannot be null',\n      );\n    }\n\n    if (\n      !(\n        downloadFileRequest &&\n        downloadFileRequest.content &&\n        downloadFileRequest.content.itemList &&\n        downloadFileRequest.content.itemList.length > 0\n      )\n    ) {\n      throw getSdkError(\n        ErrorCode.INVALID_ARGUMENTS,\n        '[files.downloadCloudStorageProviderFile] 3P cloud storage provider request content details are missing',\n      );\n    }\n\n    sendMessageToParent('files.downloadCloudStorageProviderFile', [downloadFileRequest], callback);\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Initiates the upload 3P cloud storage file(s) flow, which will upload file(s) to the given 3P provider\n   * @beta\n   *\n   * @param uploadFileRequest 3P cloud storage provider upload file(s) action request content\n   * @param callback Callback that will be triggered post uploading file(s) flow is finished\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function uploadCloudStorageProviderFile(\n    uploadFileRequest: CloudStorageProviderRequest<CloudStorageProviderUploadFileContent>,\n    callback: (error?: SdkError, actionStatus?: boolean) => void,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!callback) {\n      throw getSdkError(ErrorCode.INVALID_ARGUMENTS, '[files.uploadCloudStorageProviderFile] callback cannot be null');\n    }\n\n    if (\n      !(\n        uploadFileRequest &&\n        uploadFileRequest.content &&\n        uploadFileRequest.content.itemList &&\n        uploadFileRequest.content.itemList.length > 0\n      )\n    ) {\n      throw getSdkError(\n        ErrorCode.INVALID_ARGUMENTS,\n        '[files.uploadCloudStorageProviderFile] 3P cloud storage provider request content details are missing',\n      );\n    }\n\n    if (!uploadFileRequest.content.destinationFolder) {\n      throw getSdkError(\n        ErrorCode.INVALID_ARGUMENTS,\n        '[files.uploadCloudStorageProviderFile] Invalid destination folder details',\n      );\n    }\n\n    sendMessageToParent('files.uploadCloudStorageProviderFile', [uploadFileRequest], callback);\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Register a handler to be called when a user's 3P cloud storage provider list changes i.e.\n   * post adding / removing a 3P provider, list is updated\n   *\n   * @param handler - When 3P cloud storage provider list is updated this handler is called\n   *\n   * @internal Limited to Microsoft-internal use\n   */\n  export function registerCloudStorageProviderListChangeHandler(handler: () => void): void {\n    ensureInitialized(runtime);\n\n    if (!handler) {\n      throw new Error('[registerCloudStorageProviderListChangeHandler] Handler cannot be null');\n    }\n\n    registerHandler('files.cloudStorageProviderListChange', handler);\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   *\n   * Register a handler to be called when a user's 3P cloud storage provider content changes i.e.\n   * when file(s) is/are added / renamed / deleted / uploaded, the list of files is updated\n   *\n   * @param handler - When 3P cloud storage provider content is updated this handler is called\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function registerCloudStorageProviderContentChangeHandler(handler: () => void): void {\n    ensureInitialized(runtime);\n\n    if (!handler) {\n      throw new Error('[registerCloudStorageProviderContentChangeHandler] Handler cannot be null');\n    }\n\n    registerHandler('files.cloudStorageProviderContentChange', handler);\n  }\n\n  function getSdkError(errorCode: ErrorCode, message: string): SdkError {\n    const sdkError: SdkError = {\n      errorCode: errorCode,\n      message: message,\n    };\n    return sdkError;\n  }\n}\n","import { sendAndHandleSdkError } from '../internal/communication';\nimport { registerHandler } from '../internal/handlers';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { errorNotSupportedOnPlatform } from '../public/constants';\nimport { runtime } from '../public/runtime';\n\n/**\n * @hidden\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport namespace meetingRoom {\n  /**\n   * @hidden\n   *\n   * Data structure to represent a meeting room.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface MeetingRoomInfo {\n    /**\n     * @hidden\n     * Endpoint id of the meeting room.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    endpointId: string;\n    /**\n     * @hidden\n     * Device name of the meeting room.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    deviceName: string;\n    /**\n     * @hidden\n     * Client type of the meeting room.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    clientType: string;\n    /**\n     * @hidden\n     * Client version of the meeting room.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    clientVersion: string;\n  }\n\n  /**\n   * @hidden\n   * Type of Media control capabilities of a meeting room.\n   */\n  type MediaControls = 'toggleMute' | 'toggleCamera' | 'toggleCaptions' | 'volume';\n\n  /**\n   * @hidden\n   * Types of Stage Layout control capabilities of a meeting room.\n   */\n\n  type StageLayoutControls =\n    | 'showVideoGallery'\n    | 'showContent'\n    | 'showVideoGalleryAndContent'\n    | 'showLargeGallery'\n    | 'showTogether';\n\n  /**\n   * @hidden\n   * Types of Meeting Control capabilities of a meeting room.\n   */\n\n  type MeetingControls = 'leaveMeeting';\n\n  /**\n   * @hidden\n   * Types of Stage Layout State of a meeting room.\n   */\n\n  type StageLayoutStates = 'Gallery' | 'Content + gallery' | 'Content' | 'Large gallery' | 'Together mode';\n\n  /**\n   * @hidden\n   * Data structure to represent capabilities of a meeting room.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface MeetingRoomCapability {\n    /**\n     * @hidden\n     * Media control capabilities, value can be \"toggleMute\", \"toggleCamera\", \"toggleCaptions\", \"volume\".\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    mediaControls: MediaControls[];\n    /**\n     * @hidden\n     * Main stage layout control capabilities, value can be \"showVideoGallery\", \"showContent\", \"showVideoGalleryAndContent\", \"showLargeGallery\", \"showTogether\".\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    stageLayoutControls: StageLayoutControls[];\n    /**\n     * @hidden\n     * Meeting control capabilities, value can be \"leaveMeeting\".\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    meetingControls: MeetingControls[];\n  }\n\n  /**\n   * @hidden\n   * Data structure to represent states of a meeting room.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface MeetingRoomState {\n    /**\n     * @hidden\n     * Current mute state, true: mute, false: unmute.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    toggleMute: boolean;\n    /**\n     * @hidden\n     * Current camera state, true: camera on, false: camera off.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    toggleCamera: boolean;\n    /**\n     * @hidden\n     * Current captions state, true: captions on, false: captions off.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    toggleCaptions: boolean;\n    /**\n     * @hidden\n     * Current main stage layout state, value can be one of \"Gallery\", \"Content + gallery\", \"Content\", \"Large gallery\" and \"Together mode\".\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    stageLayout: StageLayoutStates;\n    /**\n     * @hidden\n     * Current leaveMeeting state, true: leave, false: no-op.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    leaveMeeting: boolean;\n  }\n\n  /**\n   * @hidden\n   * Fetch the meeting room info that paired with current client.\n   *\n   * @returns Promise resolved with meeting room info or rejected with SdkError value\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function getPairedMeetingRoomInfo(): Promise<MeetingRoomInfo> {\n    return new Promise<MeetingRoomInfo>((resolve) => {\n      ensureInitialized(runtime);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      resolve(sendAndHandleSdkError('meetingRoom.getPairedMeetingRoomInfo'));\n    });\n  }\n\n  /**\n   * @hidden\n   * Send a command to paired meeting room.\n   *\n   * @param commandName The command name.\n   * @returns Promise resolved upon completion or rejected with SdkError value\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function sendCommandToPairedMeetingRoom(commandName: string): Promise<void> {\n    return new Promise<void>((resolve) => {\n      if (!commandName || commandName.length == 0) {\n        throw new Error('[meetingRoom.sendCommandToPairedMeetingRoom] Command name cannot be null or empty');\n      }\n      ensureInitialized(runtime);\n      if (!isSupported()) {\n        throw errorNotSupportedOnPlatform;\n      }\n      resolve(sendAndHandleSdkError('meetingRoom.sendCommandToPairedMeetingRoom', commandName));\n    });\n  }\n\n  /**\n   * @hidden\n   * Registers a handler for meeting room capabilities update.\n   * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n   *\n   * @param handler The handler to invoke when the capabilities of meeting room update.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function registerMeetingRoomCapabilitiesUpdateHandler(\n    handler: (capabilities: MeetingRoomCapability) => void,\n  ): void {\n    if (!handler) {\n      throw new Error('[meetingRoom.registerMeetingRoomCapabilitiesUpdateHandler] Handler cannot be null');\n    }\n    ensureInitialized(runtime);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    registerHandler('meetingRoom.meetingRoomCapabilitiesUpdate', (capabilities: MeetingRoomCapability) => {\n      ensureInitialized(runtime);\n      handler(capabilities);\n    });\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   * Registers a handler for meeting room states update.\n   * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n   *\n   * @param handler The handler to invoke when the states of meeting room update.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function registerMeetingRoomStatesUpdateHandler(handler: (states: MeetingRoomState) => void): void {\n    if (!handler) {\n      throw new Error('[meetingRoom.registerMeetingRoomStatesUpdateHandler] Handler cannot be null');\n    }\n    ensureInitialized(runtime);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    registerHandler('meetingRoom.meetingRoomStatesUpdate', (states: MeetingRoomState) => {\n      ensureInitialized(runtime);\n      handler(states);\n    });\n  }\n\n  /**\n   * @hidden\n   *\n   * Checks if the meetingRoom capability is supported by the host\n   * @returns boolean to represent whether the meetingRoom capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.meetingRoom ? true : false;\n  }\n}\n","import { sendMessageToParent } from '../internal/communication';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { errorNotSupportedOnPlatform, FrameContexts } from '../public/constants';\nimport { runtime } from '../public/runtime';\nimport { ShowNotificationParameters } from './interfaces';\n\nexport namespace notifications {\n  /**\n   * @hidden\n   * display notification API.\n   *\n   * @param message - Notification message.\n   * @param notificationType - Notification type\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function showNotification(showNotificationParameters: ShowNotificationParameters): void {\n    ensureInitialized(runtime, FrameContexts.content);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n\n    sendMessageToParent('notifications.showNotification', [showNotificationParameters]);\n  }\n\n  /**\n   * @hidden\n   *\n   * Checks if the notifications capability is supported by the host\n   * @returns boolean to represent whether the notifications capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.notifications ? true : false;\n  }\n}\n","import { sendMessageToParent } from '../internal/communication';\nimport { registerHandler } from '../internal/handlers';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { errorNotSupportedOnPlatform, FrameContexts } from '../public/constants';\nimport { SdkError } from '../public/interfaces';\nimport { runtime } from '../public/runtime';\n\n/**\n * @hidden\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport namespace remoteCamera {\n  /**\n   * @hidden\n   * Data structure to represent patricipant details needed to request control of camera.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface Participant {\n    /**\n     * @hidden\n     * Id of participant.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    id: string;\n    /**\n     * @hidden\n     * Display name of participant.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    displayName?: string;\n    /**\n     * @hidden\n     * Active indicates whether the participant's device is actively being controlled.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    active?: boolean;\n  }\n\n  /**\n   * @hidden\n   * Enum used to indicate possible camera control commands.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export enum ControlCommand {\n    Reset = 'Reset',\n    ZoomIn = 'ZoomIn',\n    ZoomOut = 'ZoomOut',\n    PanLeft = 'PanLeft',\n    PanRight = 'PanRight',\n    TiltUp = 'TiltUp',\n    TiltDown = 'TiltDown',\n  }\n\n  /**\n   * @hidden\n   * Data structure to indicate the current state of the device.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface DeviceState {\n    /**\n     * @hidden\n     * All operation are available to apply.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    available: boolean;\n    /**\n     * @hidden\n     * Either camera doesnt support to get state or It unable to apply command.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    error: boolean;\n    /**\n     * @hidden\n     * Reset max out or already applied. Client Disable Reset.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    reset: boolean;\n    /**\n     * @hidden\n     * ZoomIn maxed out.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    zoomIn: boolean;\n    /**\n     * @hidden\n     * ZoomOut maxed out.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    zoomOut: boolean;\n    /**\n     * @hidden\n     * PanLeft reached max left.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    panLeft: boolean;\n    /**\n     * @hidden\n     * PanRight reached max right.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    panRight: boolean;\n    /**\n     * @hidden\n     * TiltUp reached top.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    tiltUp: boolean;\n    /**\n     * @hidden\n     * TiltDown reached bottom.\n     *\n     * @internal Limited to Microsoft-internal use\n     */\n    tiltDown: boolean;\n  }\n\n  /**\n   * @hidden\n   * Enum used to indicate the reason for the error.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export enum ErrorReason {\n    CommandResetError,\n    CommandZoomInError,\n    CommandZoomOutError,\n    CommandPanLeftError,\n    CommandPanRightError,\n    CommandTiltUpError,\n    CommandTiltDownError,\n    SendDataError,\n  }\n\n  /**\n   * @hidden\n   * Data structure to indicate the status of the current session.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface SessionStatus {\n    /**\n     * @hidden\n     * Whether the far-end user is controlling a  device.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    inControl: boolean;\n    /**\n     * @hidden\n     * Reason the  control session was terminated.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    terminatedReason?: SessionTerminatedReason;\n  }\n\n  /**\n   * @hidden\n   * Enum used to indicate the reason the session was terminated.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export enum SessionTerminatedReason {\n    None,\n    ControlDenied,\n    ControlNoResponse,\n    ControlBusy,\n    AckTimeout,\n    ControlTerminated,\n    ControllerTerminated,\n    DataChannelError,\n    ControllerCancelled,\n    ControlDisabled,\n    ControlTerminatedToAllowOtherController,\n  }\n\n  /**\n   * @hidden\n   * Fetch a list of the participants with controllable-cameras in a meeting.\n   *\n   * @param callback - Callback contains 2 parameters, error and participants.\n   * error can either contain an error of type SdkError, incase of an error, or null when fetch is successful\n   * participants can either contain an array of Participant objects, incase of a successful fetch or null when it fails\n   * participants: object that contains an array of participants with controllable-cameras\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function getCapableParticipants(\n    callback: (error: SdkError | null, participants: Participant[] | null) => void,\n  ): void {\n    if (!callback) {\n      throw new Error('[remoteCamera.getCapableParticipants] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    sendMessageToParent('remoteCamera.getCapableParticipants', callback);\n  }\n\n  /**\n   * @hidden\n   * Request control of a participant's camera.\n   *\n   * @param participant - Participant specifies the participant to send the request for camera control.\n   * @param callback - Callback contains 2 parameters, error and requestResponse.\n   * error can either contain an error of type SdkError, incase of an error, or null when fetch is successful\n   * requestResponse can either contain the true/false value, incase of a successful request or null when it fails\n   * requestResponse: True means request was accepted and false means request was denied\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function requestControl(\n    participant: Participant,\n    callback: (error: SdkError | null, requestResponse: boolean | null) => void,\n  ): void {\n    if (!participant) {\n      throw new Error('[remoteCamera.requestControl] Participant cannot be null');\n    }\n    if (!callback) {\n      throw new Error('[remoteCamera.requestControl] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    sendMessageToParent('remoteCamera.requestControl', [participant], callback);\n  }\n\n  /**\n   * @hidden\n   * Send control command to the participant's camera.\n   *\n   * @param ControlCommand - ControlCommand specifies the command for controling the camera.\n   * @param callback - Callback to invoke when the command response returns.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function sendControlCommand(ControlCommand: ControlCommand, callback: (error: SdkError | null) => void): void {\n    if (!ControlCommand) {\n      throw new Error('[remoteCamera.sendControlCommand] ControlCommand cannot be null');\n    }\n    if (!callback) {\n      throw new Error('[remoteCamera.sendControlCommand] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    sendMessageToParent('remoteCamera.sendControlCommand', [ControlCommand], callback);\n  }\n\n  /**\n   * @hidden\n   * Terminate the remote  session\n   *\n   * @param callback - Callback to invoke when the command response returns.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function terminateSession(callback: (error: SdkError | null) => void): void {\n    if (!callback) {\n      throw new Error('[remoteCamera.terminateSession] Callback cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    sendMessageToParent('remoteCamera.terminateSession', callback);\n  }\n\n  /**\n   * @hidden\n   * Registers a handler for change in participants with controllable-cameras.\n   * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n   *\n   * @param handler - The handler to invoke when the list of participants with controllable-cameras changes.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function registerOnCapableParticipantsChangeHandler(\n    handler: (participantChange: Participant[]) => void,\n  ): void {\n    if (!handler) {\n      throw new Error('[remoteCamera.registerOnCapableParticipantsChangeHandler] Handler cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    registerHandler('remoteCamera.capableParticipantsChange', handler);\n  }\n\n  /**\n   * @hidden\n   * Registers a handler for error.\n   * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n   *\n   * @param handler - The handler to invoke when there is an error from the camera handler.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function registerOnErrorHandler(handler: (error: ErrorReason) => void): void {\n    if (!handler) {\n      throw new Error('[remoteCamera.registerOnErrorHandler] Handler cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    registerHandler('remoteCamera.handlerError', handler);\n  }\n\n  /**\n   * @hidden\n   * Registers a handler for device state change.\n   * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n   *\n   * @param handler - The handler to invoke when the controlled device changes state.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function registerOnDeviceStateChangeHandler(handler: (deviceStateChange: DeviceState) => void): void {\n    if (!handler) {\n      throw new Error('[remoteCamera.registerOnDeviceStateChangeHandler] Handler cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    registerHandler('remoteCamera.deviceStateChange', handler);\n  }\n\n  /**\n   * @hidden\n   * Registers a handler for session status change.\n   * Only one handler can be registered at a time. A subsequent registration replaces an existing registration.\n   *\n   * @param handler - The handler to invoke when the current session status changes.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function registerOnSessionStatusChangeHandler(handler: (sessionStatusChange: SessionStatus) => void): void {\n    if (!handler) {\n      throw new Error('[remoteCamera.registerOnSessionStatusChangeHandler] Handler cannot be null');\n    }\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    registerHandler('remoteCamera.sessionStatusChange', handler);\n  }\n\n  /**\n   * @hidden\n   *\n   * Checks if the remoteCamera capability is supported by the host\n   * @returns boolean to represent whether the remoteCamera capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.remoteCamera ? true : false;\n  }\n}\n","import { sendMessageToParent } from '../internal/communication';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { FrameContexts, SdkError } from '../public';\nimport { errorNotSupportedOnPlatform } from '../public/constants';\nimport { runtime } from '../public/runtime';\n/**\n * @hidden\n * Namespace to interact with the application entities specific part of the SDK.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport namespace appEntity {\n  /**\n   * @hidden\n   *\n   * Information on an app entity\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface AppEntity {\n    /**\n     * @hidden\n     * ID of the application\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    appId: string;\n\n    /**\n     * @hidden\n     * URL for the application's icon\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    appIconUrl: string;\n\n    /**\n     * @hidden\n     * Content URL for the app entity\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    contentUrl: string;\n\n    /**\n     * @hidden\n     * The display name for the app entity\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    displayName: string;\n\n    /**\n     * @hidden\n     * Website URL for the app entity. It is meant to be opened by the user in a browser.\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    websiteUrl: string;\n  }\n\n  /**\n   * @hidden\n   * Hide from docs\n   * --------\n   * Open the Tab Gallery and retrieve the app entity\n   * @param threadId ID of the thread where the app entity will be created\n   * @param categories A list of application categories that will be displayed in the opened tab gallery\n   * @param subEntityId An object that will be made available to the application being configured\n   *                      through the Context's subEntityId field.\n   * @param callback Callback that will be triggered once the app entity information is available.\n   *                 The callback takes two arguments: an SdkError in case something happened (i.e.\n   *                 no permissions to execute the API) and the app entity configuration, if available\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function selectAppEntity(\n    threadId: string,\n    categories: string[],\n    subEntityId: string,\n    callback: (sdkError?: SdkError, appEntity?: AppEntity) => void,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n\n    if (!threadId || threadId.length == 0) {\n      throw new Error('[appEntity.selectAppEntity] threadId name cannot be null or empty');\n    }\n\n    if (!callback) {\n      throw new Error('[appEntity.selectAppEntity] Callback cannot be null');\n    }\n\n    sendMessageToParent('appEntity.selectAppEntity', [threadId, categories, subEntityId], callback);\n  }\n\n  /**\n   * @hidden\n   *\n   * Checks if the appEntity capability is supported by the host\n   * @returns boolean to represent whether the appEntity capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.appEntity ? true : false;\n  }\n}\n","import { sendAndUnwrap, sendMessageToParent } from '../internal/communication';\nimport { getUserJoinedTeamsSupportedAndroidClientVersion } from '../internal/constants';\nimport { GlobalVars } from '../internal/globalVars';\nimport { ensureInitialized, isCurrentSDKVersionAtLeast } from '../internal/internalAPIs';\nimport { errorNotSupportedOnPlatform, FrameContexts, HostClientType } from '../public/constants';\nimport { ErrorCode, SdkError } from '../public/interfaces';\nimport { runtime } from '../public/runtime';\nimport { TeamInstanceParameters, UserJoinedTeamsInformation } from './interfaces';\n\n/**\n * @hidden\n * Namespace to interact with the `teams` specific part of the SDK.\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport namespace teams {\n  export enum ChannelType {\n    Regular = 0,\n    Private = 1,\n    Shared = 2,\n  }\n\n  /**\n   * @hidden\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface ChannelInfo {\n    siteUrl: string;\n    objectId: string;\n    folderRelativeUrl: string;\n    displayName: string;\n    channelType: ChannelType;\n  }\n\n  /**\n   * @hidden\n   * Get a list of channels belong to a Team\n   *\n   * @param groupId - a team's objectId\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function getTeamChannels(groupId: string, callback: (error: SdkError, channels: ChannelInfo[]) => void): void {\n    ensureInitialized(runtime, FrameContexts.content);\n\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n\n    if (!groupId) {\n      throw new Error('[teams.getTeamChannels] groupId cannot be null or empty');\n    }\n\n    if (!callback) {\n      throw new Error('[teams.getTeamChannels] Callback cannot be null');\n    }\n\n    sendMessageToParent('teams.getTeamChannels', [groupId], callback);\n  }\n\n  /**\n   * @hidden\n   * Allow 1st party apps to call this function when they receive migrated errors to inform the Hub/Host to refresh the siteurl\n   * when site admin renames siteurl.\n   *\n   * @param threadId - ID of the thread where the app entity will be created; if threadId is not\n   * provided, the threadId from route params will be used.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function refreshSiteUrl(threadId: string, callback: (error: SdkError) => void): void {\n    ensureInitialized(runtime);\n\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n\n    if (!threadId) {\n      throw new Error('[teams.refreshSiteUrl] threadId cannot be null or empty');\n    }\n\n    if (!callback) {\n      throw new Error('[teams.refreshSiteUrl] Callback cannot be null');\n    }\n\n    sendMessageToParent('teams.refreshSiteUrl', [threadId], callback);\n  }\n\n  /**\n   * @hidden\n   *\n   * Checks if teams capability is supported by the host\n   * @returns boolean to represent whether the teams capability is supported\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function isSupported(): boolean {\n    return ensureInitialized(runtime) && runtime.supports.teams ? true : false;\n  }\n\n  /**\n   * @hidden\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export namespace fullTrust {\n    /**\n     * @hidden\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    export namespace joinedTeams {\n      /**\n       * @hidden\n       * Allows an app to retrieve information of all user joined teams\n       *\n       * @param teamInstanceParameters - Optional flags that specify whether to scope call to favorite teams\n       * @returns Promise that resolves with information about the user joined teams or rejects with an error when the operation has completed\n       *\n       * @internal\n       * Limited to Microsoft-internal use\n       */\n      export function getUserJoinedTeams(\n        teamInstanceParameters?: TeamInstanceParameters,\n      ): Promise<UserJoinedTeamsInformation> {\n        return new Promise<UserJoinedTeamsInformation>((resolve) => {\n          ensureInitialized(runtime);\n          if (!isSupported()) {\n            throw errorNotSupportedOnPlatform;\n          }\n\n          if (\n            (GlobalVars.hostClientType === HostClientType.android ||\n              GlobalVars.hostClientType === HostClientType.teamsRoomsAndroid ||\n              GlobalVars.hostClientType === HostClientType.teamsPhones ||\n              GlobalVars.hostClientType === HostClientType.teamsDisplays) &&\n            !isCurrentSDKVersionAtLeast(getUserJoinedTeamsSupportedAndroidClientVersion)\n          ) {\n            const oldPlatformError: SdkError = { errorCode: ErrorCode.OLD_PLATFORM };\n            throw new Error(JSON.stringify(oldPlatformError));\n          }\n\n          /* eslint-disable-next-line strict-null-checks/all */ /* Fix tracked by 5730662 */\n          resolve(sendAndUnwrap('getUserJoinedTeams', teamInstanceParameters));\n        });\n      }\n      /**\n       * @hidden\n       *\n       * Checks if teams.fullTrust.joinedTeams capability is supported by the host\n       * @returns boolean to represent whether the teams.fullTrust.joinedTeams capability is supported\n       *\n       * @throws Error if {@linkcode app.initialize} has not successfully completed\n       *\n       * @internal\n       * Limited to Microsoft-internal use\n       */\n      export function isSupported(): boolean {\n        return ensureInitialized(runtime) && runtime.supports.teams\n          ? runtime.supports.teams.fullTrust\n            ? runtime.supports.teams.fullTrust.joinedTeams\n              ? true\n              : false\n            : false\n          : false;\n      }\n    }\n\n    /**\n     * @hidden\n     * Allows an app to get the configuration setting value\n     *\n     * @param key - The key for the config setting\n     * @returns Promise that resolves with the value for the provided configuration setting or rejects with an error when the operation has completed\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    export function getConfigSetting(key: string): Promise<string> {\n      return new Promise<string>((resolve) => {\n        ensureInitialized(runtime);\n        if (!isSupported()) {\n          throw errorNotSupportedOnPlatform;\n        }\n        resolve(sendAndUnwrap('getConfigSetting', key));\n      });\n    }\n\n    /**\n     * @hidden\n     *\n     * Checks if teams.fullTrust capability is supported by the host\n     * @returns boolean to represent whether the teams.fullTrust capability is supported\n     *\n     * @throws Error if {@linkcode app.initialize} has not successfully completed\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    export function isSupported(): boolean {\n      return ensureInitialized(runtime) && runtime.supports.teams\n        ? runtime.supports.teams.fullTrust\n          ? true\n          : false\n        : false;\n    }\n  }\n}\n","import { sendMessageToParent } from '../internal/communication';\nimport { registerHandler } from '../internal/handlers';\nimport { ensureInitialized } from '../internal/internalAPIs';\nimport { inServerSideRenderingEnvironment } from '../internal/utils';\nimport { VideoPerformanceMonitor } from '../internal/videoPerformanceMonitor';\nimport {\n  createEffectParameterChangeCallback,\n  DefaultVideoEffectCallBack as VideoEffectCallBack,\n  processMediaStream,\n  processMediaStreamWithMetadata,\n} from '../internal/videoUtils';\nimport { errorNotSupportedOnPlatform, FrameContexts } from '../public/constants';\nimport { runtime } from '../public/runtime';\nimport { video } from '../public/video';\n\n/**\n * @hidden\n * Extended video API\n * @beta\n *\n * @internal\n * Limited to Microsoft-internal use\n */\nexport namespace videoEx {\n  const videoPerformanceMonitor = inServerSideRenderingEnvironment()\n    ? undefined\n    : new VideoPerformanceMonitor(sendMessageToParent);\n  /**\n   * @hidden\n   * Error level when notifying errors to the host, the host will decide what to do acording to the error level.\n   * @beta\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export enum ErrorLevel {\n    Fatal = 'fatal',\n    Warn = 'warn',\n  }\n  /**\n   * @hidden\n   * Video frame configuration supplied to the host to customize the generated video frame parameters\n   * @beta\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface VideoFrameConfig extends video.VideoFrameConfig {\n    /**\n     * @hidden\n     * Flag to indicate use camera stream to synthesize video frame or not.\n     * Default value is true.\n     * @beta\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    requireCameraStream?: boolean;\n    /**\n     * @hidden\n     * Machine learning model to run in the host to do audio inference for you\n     * @beta\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    audioInferenceModel?: ArrayBuffer;\n  }\n\n  /**\n   * @hidden\n   * Represents a video frame\n   * @beta\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface VideoBufferData extends video.VideoBufferData {\n    /**\n     * @hidden\n     * The model output if you passed in an {@linkcode VideoFrameConfig.audioInferenceModel}\n     * @beta\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    audioInferenceResult?: Uint8Array;\n  }\n\n  /**\n   * Old video frame data structure, almost identical to the {@link VideoBufferData} except `videoFrameBuffer` is named as `data`.\n   * Old host like the old Teams passes this data to the SDK. It will be deprecated in the future.\n   */\n  type LegacyVideoBufferData = Omit<VideoBufferData, 'videoFrameBuffer'> & {\n    /**\n     * Video frame buffer\n     */\n    data: Uint8ClampedArray;\n  };\n\n  /**\n   * @hidden\n   * The callback will be called on every frame when running on the supported host.\n   * We require the frame rate of the video to be at least 22fps for 720p, thus the callback should process a frame timely.\n   * The video app should call `notifyVideoFrameProcessed` to notify a successfully processed video frame.\n   * The video app should call `notifyError` to notify a failure. When the failures accumulate to a certain number(determined by the host), the host will see the app is \"frozen\" and give the user the option to close the app.\n   * @beta\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export type VideoBufferHandler = (\n    videoBufferData: VideoBufferData,\n    notifyVideoFrameProcessed: () => void,\n    notifyError: (errorMessage: string) => void,\n  ) => void;\n\n  /**\n   * @hidden\n   * Video frame data extracted from the media stream. More properties may be added in the future.\n   * @beta\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export type VideoFrameData = video.VideoFrameData & {\n    /**\n     * @hidden\n     * The model output if you passed in an {@linkcode VideoFrameConfig.audioInferenceModel}\n     * @beta\n     *\n     * @internal\n     * Limited to Microsoft-internal use\n     */\n    audioInferenceResult?: Uint8Array;\n  };\n\n  /**\n   * @hidden\n   * The callback will be called on every frame when running on the supported host.\n   * We require the frame rate of the video to be at least 22fps for 720p, thus the callback should process a frame timely.\n   * The video app should resolve the promise to notify a successfully processed video frame.\n   * The video app should reject the promise to notify a failure. When the failures accumulate to a certain number(determined by the host), the host will see the app is \"frozen\" and give the user the option to close the app.\n   * @beta\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export type VideoFrameHandler = (receivedVideoFrame: VideoFrameData) => Promise<video.VideoFrame>;\n\n  /**\n   * @hidden\n   * @beta\n   * Callbacks and configuration supplied to the host to process the video frames.\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export type RegisterForVideoFrameParameters = {\n    /**\n     * Callback function to process the video frames extracted from a media stream.\n     */\n    videoFrameHandler: VideoFrameHandler;\n    /**\n     * Callback function to process the video frames shared by the host.\n     */\n    videoBufferHandler: VideoBufferHandler;\n    /**\n     * Video frame configuration supplied to the host to customize the generated video frame parameters, like format\n     */\n    config: VideoFrameConfig;\n  };\n\n  /**\n   * @hidden\n   * Register to process video frames\n   * @beta\n   *\n   * @param parameters - Callbacks and configuration to process the video frames. A host may support either {@link VideoFrameHandler} or {@link VideoBufferHandler}, but not both.\n   * To ensure the video effect works on all supported hosts, the video app must provide both {@link VideoFrameHandler} and {@link VideoBufferHandler}.\n   * The host will choose the appropriate callback based on the host's capability.\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function registerForVideoFrame(parameters: RegisterForVideoFrameParameters): void {\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    if (!parameters.videoFrameHandler || !parameters.videoBufferHandler) {\n      throw new Error('Both videoFrameHandler and videoBufferHandler must be provided');\n    }\n\n    if (ensureInitialized(runtime, FrameContexts.sidePanel)) {\n      registerHandler(\n        'video.setFrameProcessTimeLimit',\n        (timeLimit: number) => videoPerformanceMonitor?.setFrameProcessTimeLimit(timeLimit),\n        false,\n      );\n      if (runtime.supports.video?.mediaStream) {\n        registerHandler(\n          'video.startVideoExtensibilityVideoStream',\n          async (mediaStreamInfo: { streamId: string; metadataInTexture?: boolean }) => {\n            const { streamId, metadataInTexture } = mediaStreamInfo;\n            const handler = videoPerformanceMonitor\n              ? createMonitoredVideoFrameHandler(parameters.videoFrameHandler, videoPerformanceMonitor)\n              : parameters.videoFrameHandler;\n            metadataInTexture\n              ? await processMediaStreamWithMetadata(streamId, handler, notifyError, videoPerformanceMonitor)\n              : await processMediaStream(streamId, handler, notifyError, videoPerformanceMonitor);\n          },\n          false,\n        );\n        sendMessageToParent('video.mediaStream.registerForVideoFrame', [parameters.config]);\n      } else if (runtime.supports.video?.sharedFrame) {\n        registerHandler(\n          'video.newVideoFrame',\n          (videoBufferData: VideoBufferData | LegacyVideoBufferData) => {\n            if (videoBufferData) {\n              videoPerformanceMonitor?.reportStartFrameProcessing(videoBufferData.width, videoBufferData.height);\n              const timestamp = videoBufferData.timestamp;\n              parameters.videoBufferHandler(\n                normalizedVideoBufferData(videoBufferData),\n                () => {\n                  videoPerformanceMonitor?.reportFrameProcessed();\n                  notifyVideoFrameProcessed(timestamp);\n                },\n                notifyError,\n              );\n            }\n          },\n          false,\n        );\n        sendMessageToParent('video.registerForVideoFrame', [parameters.config]);\n      } else {\n        // should not happen if isSupported() is true\n        throw errorNotSupportedOnPlatform;\n      }\n      videoPerformanceMonitor?.startMonitorSlowFrameProcessing();\n    }\n  }\n\n  function createMonitoredVideoFrameHandler(\n    videoFrameHandler: VideoFrameHandler,\n    videoPerformanceMonitor: VideoPerformanceMonitor,\n  ): VideoFrameHandler {\n    return async (receivedVideoFrame: VideoFrameData): Promise<video.VideoFrame> => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const originalFrame = receivedVideoFrame.videoFrame as any;\n      videoPerformanceMonitor.reportStartFrameProcessing(originalFrame.codedWidth, originalFrame.codedHeight);\n      const processedFrame = await videoFrameHandler(receivedVideoFrame);\n      videoPerformanceMonitor.reportFrameProcessed();\n      return processedFrame;\n    };\n  }\n\n  function normalizedVideoBufferData(videoBufferData: VideoBufferData | LegacyVideoBufferData): VideoBufferData {\n    videoBufferData['videoFrameBuffer'] = videoBufferData['videoFrameBuffer'] || videoBufferData['data'];\n    delete videoBufferData['data'];\n    return videoBufferData as VideoBufferData;\n  }\n\n  /**\n   * @hidden\n   * Video extension should call this to notify host that the current selected effect parameter changed.\n   * If it's pre-meeting, host will call videoEffectCallback immediately then use the videoEffect.\n   * If it's the in-meeting scenario, we will call videoEffectCallback when apply button clicked.\n   * @beta\n   * @param effectChangeType - the effect change type.\n   * @param effectId - Newly selected effect id. {@linkcode VideoEffectCallBack}\n   * @param effectParam Variant for the newly selected effect. {@linkcode VideoEffectCallBack}\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function notifySelectedVideoEffectChanged(\n    effectChangeType: video.EffectChangeType,\n    effectId: string | undefined,\n    effectParam?: string,\n  ): void {\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    sendMessageToParent('video.videoEffectChanged', [effectChangeType, effectId, effectParam]);\n  }\n\n  /**\n   * @hidden\n   * Register the video effect callback, host uses this to notify the video extension the new video effect will by applied\n   * @beta\n   * @param callback - The VideoEffectCallback to invoke when registerForVideoEffect has completed\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function registerForVideoEffect(callback: VideoEffectCallBack): void {\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    if (!isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n\n    registerHandler(\n      'video.effectParameterChange',\n      createEffectParameterChangeCallback(callback, videoPerformanceMonitor),\n      false,\n    );\n    sendMessageToParent('video.registerForVideoEffect');\n  }\n\n  /**\n   * @hidden\n   * Personalized video effect\n   * @beta\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export interface PersonalizedEffect {\n    /**\n     * Personalized effect id\n     */\n    id: string;\n    /**\n     * Display name\n     */\n    name: string;\n    /**\n     * Effect type defined by app\n     */\n    type: string;\n    /**\n     * Data URI of the thumbnail image content encoded in ASCII format using the base64 scheme\n     */\n    thumbnail: string;\n  }\n\n  /**\n   * @hidden\n   * Send personalized effects to Teams client\n   * @beta\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function updatePersonalizedEffects(effects: PersonalizedEffect[]): void {\n    ensureInitialized(runtime, FrameContexts.sidePanel);\n    if (!video.isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    sendMessageToParent('video.personalizedEffectsChanged', [effects]);\n  }\n\n  /**\n   * @hidden\n   *\n   * Checks if video capability is supported by the host\n   * @beta\n   *\n   * @throws Error if {@linkcode app.initialize} has not successfully completed\n   *\n   * @returns boolean to represent whether the video capability is supported\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function isSupported(): boolean {\n    ensureInitialized(runtime);\n    return video.isSupported();\n  }\n\n  /**\n   * @hidden\n   * Sending notification to host finished the video frame processing, now host can render this video frame\n   * or pass the video frame to next one in video pipeline\n   * @beta\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  function notifyVideoFrameProcessed(timestamp?: number): void {\n    sendMessageToParent('video.videoFrameProcessed', [timestamp]);\n  }\n\n  /**\n   * @hidden\n   * Sending error notification to host\n   * @beta\n   * @param errorMessage - The error message that will be sent to the host\n   * @param errorLevel - The error level that will be sent to the host\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  function notifyError(errorMessage: string, errorLevel: ErrorLevel = ErrorLevel.Warn): void {\n    sendMessageToParent('video.notifyError', [errorMessage, errorLevel]);\n  }\n\n  /**\n   * @hidden\n   * Sending fatal error notification to host. Call this function only when your app meets fatal error and can't continue.\n   * The host will stop the video pipeline and terminate this session, and optionally, show an error message to the user.\n   * @beta\n   * @param errorMessage - The error message that will be sent to the host\n   *\n   * @internal\n   * Limited to Microsoft-internal use\n   */\n  export function notifyFatalError(errorMessage: string): void {\n    ensureInitialized(runtime);\n    if (!video.isSupported()) {\n      throw errorNotSupportedOnPlatform;\n    }\n    notifyError(errorMessage, ErrorLevel.Fatal);\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","self","this","formatArgs","args","useColors","namespace","humanize","diff","c","color","splice","index","lastC","replace","match","save","namespaces","storage","setItem","removeItem","error","load","r","getItem","process","env","DEBUG","window","type","__nwjs","navigator","userAgent","toLowerCase","document","documentElement","style","WebkitAppearance","console","firebug","exception","table","parseInt","RegExp","$1","localStorage","localstorage","destroy","warned","warn","colors","log","debug","formatters","j","v","JSON","stringify","message","createDebug","prevTime","namespacesCache","enabledCache","enableOverride","enabled","curr","Number","Date","ms","prev","coerce","unshift","format","formatter","val","call","apply","selectColor","extend","Object","defineProperty","enumerable","configurable","get","set","init","delimiter","newDebug","toNamespace","regexp","toString","substring","length","default","Error","stack","disable","names","map","skips","join","enable","i","split","len","push","slice","name","test","keys","forEach","key","hash","charCodeAt","Math","abs","s","m","h","d","w","y","parse","str","String","exec","n","parseFloat","fmtShort","msAbs","round","fmtLong","plural","isPlural","options","isFinite","long","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","definition","o","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","value","defaultSDKVersionForCompatCheck","videoAndImageMediaAPISupportVersion","nonFullScreenVideoModeAPISupportVersion","imageOutputFormatsAPISupportVersion","getUserJoinedTeamsSupportedAndroidClientVersion","locationAPIsRequiredVersion","peoplePickerRequiredVersion","captureImageMobileSupportVersion","mediaAPISupportVersion","scanBarCodeAPIMobileSupportVersion","validOrigins","userOriginUrlValidationRegExp","teamsDeepLinkProtocol","teamsDeepLinkHost","errorLibraryNotInitialized","errorRuntimeNotInitialized","errorRuntimeNotSupported","errorCallNotStarted","initializeCalled","initializeCompleted","additionalValidOrigins","isFramelessWindow","printCapabilityEnabled","topLevelLogger","getLogger","randomUUID","crypto","bind","getRandomValues","rnds8","Uint8Array","rng","byteToHex","unsafeStringify","arr","offset","buf","rnds","random","FileOpenPreference","ActionObjectType","SecondaryM365ContentIdName","ErrorCode","DevicePermission","ClipboardSupportedMimeType","HostClientType","HostName","FrameContexts","TeamType","UserTeamRole","DialogDimension","ChannelType","TaskModuleDimension","errorNotSupportedOnPlatform","errorCode","NOT_SUPPORTED_ON_PLATFORM","minAdaptiveCardVersion","majorVersion","minorVersion","teamsMinAdaptiveCardVersion","adaptiveCardSchemaVersion","validateHostAgainstPattern","pattern","host","suffix","validateOriginLogger","validateOrigin","messageOrigin","isValidHttpsURL","protocol","messageOriginHost","some","GlobalVars","domainOrPattern","getGenericOnCompleteHandler","errorMessage","success","reason","compareSDKVersions","v1","v2","NaN","v1parts","v2parts","isValidPart","x","every","generateGUID","freeze","callCallbackWithErrorOrResultFromPromiseAndReturnPromise","funcHelper","callback","p","then","result","catch","e","callCallbackWithSdkErrorFromPromiseAndReturnPromise","callCallbackWithErrorOrResultOrNullFromPromiseAndReturnPromise","runWithTimeout","action","timeoutInMs","timeoutError","Promise","resolve","reject","timeoutHandle","setTimeout","clearTimeout","createTeamsAppLink","params","url","URL","encodeURIComponent","appId","pageId","webUrl","searchParams","append","channelId","subPageId","subEntityId","isHostAdaptiveCardSchemaVersionUnsupported","hostAdaptiveCardSchemaVersion","base64ToBlob","mimeType","base64String","byteCharacters","atob","startsWith","byteArray","Blob","getBase64StringFromBlob","blob","size","reader","FileReader","onloadend","onerror","readAsDataURL","ssrSafeWindow","inServerSideRenderingEnvironment","runtimeLogger","latestRuntimeApiVersion","isLatestRuntimeVersion","runtime","apiVersion","_uninitializedRuntime","supports","isRuntimeInitialized","teamsRuntimeConfig","hostVersionsInfo","isLegacyTeams","appInstallDialog","appEntity","chat","conversations","dialog","card","bot","update","interactive","logs","meetingRoom","menus","monetization","notifications","pages","appButton","tabs","config","backStack","fullTrust","remoteCamera","stageView","teams","teamsCore","video","sharedFrame","v1HostClientTypes","desktop","web","android","ios","rigel","surfaceHub","teamsRoomsWindows","teamsRoomsAndroid","teamsPhones","teamsDisplays","fastForwardRuntime","outdatedRuntime","upgradeChain","upgrade","versionToUpgradeFrom","upgradeToNextVersion","previousVersionRuntime","newSupports","versionConstants","capability","location","hostClientTypes","people","sharing","joinedTeams","webStorage","generateBackCompatRuntimeConfigLogger","generateBackCompatRuntimeConfig","highestSupportedVersion","versionNumber","capabilityReqs","includes","hostClientType","backCompatRuntimeConfig","applyRuntimeConfigLogger","applyRuntimeConfig","runtimeConfig","ffRuntimeConfig","authentication","app","version","internalLogger","ensureInitializeCalledLogger","ensureInitializedLogger","ensureInitializeCalled","ensureInitialized","expectedFrameContexts","found","frameContext","isCurrentSDKVersionAtLeast","requiredVersion","clientSupportedSDKVersion","isNaN","isHostClientMobile","ipados","throwExceptionIfMobileApiIsNotSupported","OLD_PLATFORM","processAdditionalValidOrigins","validMessageOrigins","combinedOriginUrls","concat","filter","_origin","dedupUrls","_originUrl","transformLegacyContextToAppContext","legacyContext","actionInfo","locale","sessionId","appSessionId","theme","iconPositionVertical","appIconPosition","osLocaleInfo","parentMessageId","userClickTime","userFileOpenPreference","hostName","clientType","ringId","appLaunchId","page","id","entityId","isFullScreen","isMultiWindow","sourceOrigin","user","userObjectId","displayName","userDisplayName","isCallingAllowed","isPSTNCallingAllowed","licenseType","userLicenseType","loginHint","userPrincipalName","tenant","tid","teamsSku","tenantSKU","channel","channelName","relativeUrl","channelRelativeUrl","membershipType","channelType","defaultOneNoteSectionId","ownerGroupId","hostTeamGroupId","ownerTenantId","hostTeamTenantId","chatId","meeting","meetingId","sharepoint","team","teamId","internalId","teamName","teamType","groupId","templateId","teamTemplateId","isArchived","isTeamArchived","userRole","userTeamRole","sharePointSite","teamSiteUrl","teamSiteDomain","teamSitePath","mySitePath","mySiteDomain","teamSiteId","authHandlers","authWindowMonitor","authParams","authenticateHelper","authenticateParameters","macos","link","createElement","href","sendMessageToParentAsync","width","height","isExternal","response","fail","openAuthenticationWindow","getAuthTokenHelper","authTokenRequest","resources","claims","silent","getUserHelper","closeAuthenticationWindow","stopAuthenticationWindowMonitor","Communication","childWindow","close","childOrigin","min","currentWindow","outerWidth","outerHeight","left","screenLeft","screenX","top","screenTop","screenY","open","startAuthenticationWindowMonitor","handleFailure","clearInterval","removeHandler","setInterval","closed","savedChildOrigin","sendMessageEventToChild","registerHandler","handleSuccess","redirectIfWin32Outlook","callbackUrl","decodeURIComponent","search","indexOf","updateUrlParameter","assign","uri","substr","initialize","registerAuthenticationHandlers","authenticate","isDifferentParamsInCall","authenticateParams","content","sidePanel","settings","remove","task","stage","meetingStage","successCallback","err","failureCallback","getAuthToken","getUser","userRequest","notifySuccess","sendMessageToParent","waitForMessageQueue","parentWindow","notifyFailure","DataResidency","storedMessages","handleDialogMessage","isSupported","getDialogInfoFromUrlDialogInfo","urlDialogInfo","Small","title","fallbackUrl","getDialogInfoFromBotUrlDialogInfo","botUrlDialogInfo","dialogInfo","completionBotId","submitHandler","messageFromChildHandler","submit","appIds","Array","isArray","sendMessageToParentFromDialog","sendMessageToDialog","registerOnMessageFromParent","listener","reverse","pop","resize","dimensions","adaptiveCard","isAdaptiveCardVersionSupported","getDialogInfoFromAdaptiveCardDialogInfo","adaptiveCardDialogInfo","getDialogInfoFromBotAdaptiveCardDialogInfo","botAdaptiveCardDialogInfo","DisplayMode","navBarMenuItemPressHandler","actionMenuItemPressHandler","viewConfigItemPressHandler","selected","handleViewConfigItemPress","handleNavBarMenuItemPress","handleActionMenuItemPress","MenuItem","MenuListType","setUpViews","viewConfig","handler","setNavBarMenu","items","showActionMenu","print","registerOnLoadHandlerHelper","versionSpecificHelper","registerBeforeUnloadHandlerHelper","enablePrintCapability","addEventListener","event","ctrlKey","metaKey","keyCode","cancelBubble","preventDefault","stopImmediatePropagation","registerOnLoadHandler","registerBeforeUnloadHandler","appLogger","Messages","AppLoaded","Success","Failure","ExpectedFailure","FailedReason","ExpectedFailureReason","isInitialized","getFrameContext","initializationTimeoutInMs","initializeLogger","initializeHelper","initializeHelperLogger","initializePromise","initializeCommunication","context","givenRuntimeConfig","SyntaxError","registerOnThemeChangeHandler","_initialize","hostWindow","_uninitialize","registerBackButtonHandler","registerFullScreenHandler","registerGetLogHandler","registerOnSaveHandler","registerOnRemoveHandler","uninitializeCommunication","getContext","sendAndUnwrap","notifyAppLoaded","appInitializationFailedRequest","notifyExpectedFailure","expectedFailureRequest","openLink","deepLink","sendAndHandleStatusAndReason","setCurrentFrame","frameInfo","returnFocus","navigateForward","registerFocusEnterHandler","registerHandlerHelper","initializeWithFrameContext","getConfig","navigateCrossDomain","sendAndHandleStatusAndReasonWithDefaultError","navigateToApp","shareDeepLink","deepLinkParameters","subPageLabel","subPageWebUrl","navigateToTab","tabInstance","getTabInstances","tabInstanceParameters","getMruTabInstances","saveHandler","registerOnSaveHandlerHelper","registerOnRemoveHandlerHelper","handleSave","saveEventType","SaveEventImpl","handleRemove","setValidityState","validityState","setConfig","instanceConfig","registerChangeConfigHandler","notified","ensureNotNotified","removeEventType","RemoveEventImpl","backButtonPressHandler","navigateBack","registerBackButtonHandlerHelper","handleBackButtonPress","enterFullscreen","exitFullscreen","onClick","onHoverEnter","onHoverLeave","currentApp","navigateTo","sendAndHandleSdkError","navigateToDefaultPage","handlersLogger","handlers","initializeHandlers","HandlersPrivate","handleThemeChange","handleLoad","handleBeforeUnload","callHandlerLogger","callHandler","sendMessage","doesHandlerExist","contexts","registrationHelper","themeChangeHandler","loadHandler","beforeUnloadHandler","readyToUnload","communicationLogger","parentMessageQueue","childMessageQueue","nextMessageId","callbacks","promiseCallbacks","CommunicationPrivate","messageListener","evt","processMessage","parent","opener","extendedWindow","nativeInterface","onNativeMessage","handleParentMessage","parentOrigin","removeEventListener","actionName","wasSuccessful","defaultError","waitForResponse","sendMessageToParentHelper","requestId","argsOrCallback","Function","request","sendMessageToParentHelperLogger","logger","targetWindow","createMessageRequest","framelessPostMessage","targetOrigin","getTargetOrigin","postMessage","getTargetMessageQueue","processMessageLogger","data","messageSource","source","originalEvent","origin","shouldProcessMessage","updateRelationships","handleChildMessage","shouldProcessMessageLogger","isOriginValid","flushMessageQueue","handleParentMessageLogger","isPartialResponse","promiseCallback","func","called","sendMessageResponseToChild","NotificationTypes","ViewerActionTypes","UserSettingTypes","flushMessageQueueLogger","targetMessageQueue","target","shift","messageQueueMonitor","createMessageResponse","customEvent","createMessageEvent","timestamp","now","uploadCustomApp","manifestBlob","onComplete","sendCustomMessage","sendCustomEvent","registerCustomHandler","customHandler","registerUserSettingsChangeHandler","settingTypes","openFilePreview","filePreviewParameters","description","objectUrl","downloadUrl","webPreviewUrl","webEditUrl","baseUrl","editFile","viewerAction","fileOpenPreference","conversationId","openConversation","openConversationRequest","sendPromise","onStartConversation","onCloseConversation","closeConversation","getChatMembers","teamsDeepLinkUrlPathForAppInstall","teamsDeepLinkUrlPathForCalendar","teamsDeepLinkAttendeesUrlParameterName","teamsDeepLinkStartTimeUrlParameterName","teamsDeepLinkEndTimeUrlParameterName","teamsDeepLinkSubjectUrlParameterName","teamsDeepLinkContentUrlParameterName","teamsDeepLinkUrlPathForCall","teamsDeepLinkSourceUrlParameterName","teamsDeepLinkWithVideoUrlParameterName","teamsDeepLinkUrlPathForChat","teamsDeepLinkUsersUrlParameterName","teamsDeepLinkTopicUrlParameterName","teamsDeepLinkMessageUrlParameterName","createTeamsDeepLinkForChat","users","topic","usersSearchParameter","topicSearchParameter","messageSearchParameter","createTeamsDeepLinkForCall","targets","withVideo","withVideoSearchParameter","sourceSearchParameter","createTeamsDeepLinkForCalendar","attendees","startTime","endTime","subject","attendeeSearchParameter","attendee","startTimeSearchParameter","endTimeSearchParameter","subjectSearchParameter","contentSearchParameter","createTeamsDeepLinkForAppInstallDialog","openAppInstallDialog","openAPPInstallDialogParams","media","barCode","createFile","assembleAttachment","file","sequence","sort","a","b","item","decodeAttachment","attachment","decoded","chunk","byteNumbers","chunkSequence","throwExceptionIfMediaCallIsNotSupportedOnMobile","mediaInputs","isMediaCallForVideoAndImageInputs","isMediaCallForNonFullScreenVideoMode","isMediaCallForImageOutputFormats","isVideoControllerRegistered","mediaType","MediaType","Video","videoProps","videoController","validateSelectMediaInputs","maxMediaCount","Image","imageProps","imageOutputFormats","VideoAndImage","videoAndImageProps","isFullScreenMode","validateGetMediaInputs","FileFormat","ID","validateViewImagesInput","uriList","validateScanBarCodeInput","barCodeConfig","timeOutIntervalInSec","validatePeoplePickerInput","peoplePickerInputs","setSelected","openOrgWideSearchInChatOrChannel","singleSelect","isPermissionSupported","permissions","File","captureImage","hasPermission","Media","requestPermission","that","preview","getMedia","getMediaViaCallback","getMediaViaHandler","INVALID_ARGUMENTS","helper","mediaMimeType","mediaResult","mediaChunk","assemble","INTERNAL_ERROR","MediaControllerEvent","getMediaType","notifyEventToApp","mediaEvent","controllerCallback","StartRecording","onRecordingStarted","notifyEventToHost","mediaControllerEvent","stop","StopRecording","VideoController","CameraStartMode","Source","ImageUriType","ImageOutputFormats","selectMedia","localAttachments","mediaArray","invalidInput","oldPlatformError","viewImages","scanBarCode","openChat","openChatRequest","members","openGroupChat","clipboard","geoLocation","getAdaptiveCardSchemaVersion","write","values","base64StringContent","read","getCurrentLocation","allowChooseLocation","showMap","GeoLocation","chooseLocation","showLocation","secondaryBrowser","_instance","getLocation","props","calendar","mail","profile","validateShowProfileRequest","showProfileRequest","modality","targetElementBoundingRect","triggerType","validatePersona","persona","identifiers","AadObjectId","Smtp","Upn","MicStateChangeReason","startAppAudioHandling","requestAppAudioHandlingParams","isAppHandlingAudio","isHostAudioless","micState","micMuteStateChangedCallback","newMicState","micStateDidUpdate","isMicMuted","setMicStateWithReason","HostInitiated","AppDeclinedToChange","AppFailedToChange","stopAppAudioHandling","MeetingReactionType","MeetingType","CallType","getIncomingClientAudioState","toggleIncomingClientAudio","getMeetingDetails","getAuthenticationTokenForAnonymousUser","getLiveStreamState","requestStartLiveStreaming","streamUrl","streamKey","requestStopLiveStreaming","registerLiveStreamChangedHandler","shareAppContentToStage","appContentUrl","getAppContentStageSharingCapabilities","stopSharingAppContentToStage","getAppContentStageSharingState","registerSpeakingStateChangeHandler","registerRaiseHandStateChangedHandler","registerMeetingReactionReceivedHandler","appShareButton","setOptions","shareInformation","contentUrl","requestAppAudioHandling","updateMicState","AppInitiated","openPurchaseExperience","param1","param2","planInfo","openCalendarItem","openCalendarItemParams","itemId","trim","composeMeeting","composeMeetingParams","openMailItem","openMailItemParams","composeMail","composeMailParams","ComposeMailType","selectPeopleHelper","selectPeople","showProfile","isValid","targetRectangle","VideoFrameTransformErrors","startedAtInMs","performance","VideoFrameTick","setTimeoutCallbacks","intervalInMs","next","tick","timeoutIds","distributionBinSize","reportStatisticsResult","sampleCount","distributionBins","Uint32Array","processStarts","effectId","frameWidth","frameHeight","effectParam","suitableForThisSession","reportAndResetSession","getStatistics","start","processEnds","durationInMillisecond","frameProcessingStartedAt","binIndex","floor","max","currentSession","duration","resetCurrentSession","getNextTimeout","timeoutId","fill","VideoPerformanceStatistics","maxSessionTimeoutInMs","initialSessionTimeoutInMs","reportPerformanceEvent","isFirstFrameProcessed","frameProcessTimeLimit","frameProcessingTimeCost","processedFrameCount","performanceStatistics","VideoPerformanceMonitor","startMonitorSlowFrameProcessing","averageFrameProcessingTime","calculateFPSInterval","setFrameProcessTimeLimit","timeLimit","reportApplyingVideoEffect","applyingEffect","appliedEffect","reportVideoEffectChanged","reportStartFrameProcessing","reportFrameProcessed","reportGettingTextureStream","streamId","gettingTextureStreamStartedAt","currentStreamId","reportTextureStreamAcquired","timeTaken","processMediaStream","videoFrameHandler","notifyError","videoPerformanceMonitor","generator","createProcessedStreamGeneratorWithoutSource","webview","registerTextureStream","pipeVideoSourceToGenerator","getInputVideoTrack","DefaultTransformer","writable","processMediaStreamWithMetadata","TransformerWithMetadata","chrome","getTextureStream","mediaStream","tracks","getVideoTracks","errorMsg","MediaStreamTrackGenerator","kind","videoTrack","transformer","sink","MediaStreamTrackProcessor","track","readable","pipeThrough","TransformStream","pipeTo","transform","originalFrame","controller","videoFrame","frameProcessedByApp","processedFrame","VideoFrame","enqueue","TimestampIsNull","headerBuffer","ONE_TEXTURE_INPUT_ID","INVALID_HEADER_ERROR","UNSUPPORTED_LAYOUT_ERROR","headerDataView","metadataBuffer","streamCount","metadataMap","Map","AUDIO_INFERENCE_RESULT_STREAM_ID","metadataDataView","streamDataOffset","streamDataSize","streamData","shouldDiscardAudioInferenceResult","extractVideoFrameAndMetadata","metadata","audioInferenceResult","texture","UnsupportedVideoFramePixelFormat","headerRect","codedWidth","ArrayBuffer","copyTo","rect","header","OneTextureHeader","metadataRect","multiStreamHeaderRowOffset","codedHeight","OneTextureMetadata","multiStreamCount","visibleRect","frameRowOffset","discardAudioInferenceResult","createEffectParameterChangeCallback","validReason","EffectFailureReason","InitializationFailure","appInitialization","registerAppButtonClickHandler","registerAppButtonHoverEnterHandler","registerAppButtonHoverLeaveHandler","registerChangeSettingsHandler","tabInfo","subEntityLabel","subEntityWebUrl","executeDeepLink","setFrameContext","notifyVideoFrameProcessed","registerForMediaStream","doesSupportMediaStream","mediaStreamInfo","monitoredVideoFrameHandler","createMonitoredVideoFrameHandler","videoFrameData","registerForVideoBuffer","videoBufferHandler","doesSupportSharedFrame","videoBufferData","normalizeVideoBufferData","newVideoBufferData","videoFrameBuffer","isTextureStreamAvailable","VideoFrameFormat","EffectChangeType","registerForVideoFrame","parameters","timeLimitInfo","notifySelectedVideoEffectChanged","effectChangeType","registerForVideoEffect","onChangeHandlerName","onClosedHandlerName","onExecutedHandlerName","registerHandlers","onClosedHandler","onExecuteHandler","onChangeHandler","unregisterHandlers","closeSearch","shareWebContentHelper","shareWebContentRequest","SharingAPIMessages","shareWebContent","validateNonEmptyContent","shareRequest","validateTypeConsistency","validateContentForSupportedTypes","stageViewParams","isWebStorageClearedOnUserLogOut","CallModalities","startCall","startCallParams","requestedModalities","getSettings","setSettings","instanceSettings","tasks","liveShare","getUrlDialogInfoFromTaskInfo","taskInfo","getBotUrlDialogInfoFromTaskInfo","getDefaultSizeIfNotProvided","startTask","dialogSubmitHandler","sdkResponse","ChildAppWindow","updateTask","extra","submitTask","UserMeetingRole","ContainerState","getFluidTenantInfo","ensureSupported","getFluidToken","containerId","getFluidContainerId","setFluidContainerId","getNtpTime","registerClientId","clientId","getClientRoles","getClientInfo","create","LiveShareHost","uuid","deserializeCart","cartData","cartItems","deserializeCartItems","cartItemsData","cartItem","imageURL","accessories","serializeCartItems","rest","validateCartItems","validateBasicCartItem","validateAccessoryItems","accessoryItems","accessoryItem","basicCartItem","validatePrice","price","validateQuantity","quantity","validateUuid","toFixed","validateCartStatus","cartStatus","marketplace","CartStatus","files","cartVersion","Intent","getCart","addOrUpdateCartItems","addOrUpdateCartItemsParams","cartId","removeCartItems","removeCartItemsParams","cartItemIds","updateCartStatus","updateCartStatusParams","getSdkError","CloudStorageProvider","CloudStorageProviderType","SpecialDocumentLibraryType","DocumentLibraryAccessType","FileDownloadStatus","CloudStorageProviderFileAction","getCloudStorageFolders","addCloudStorageFolder","deleteCloudStorageFolder","folderToDelete","getCloudStorageFolderContents","folder","providerCode","isSubdirectory","openCloudStorageFile","getExternalProviders","excludeAddedProviders","copyMoveFiles","selectedFiles","destinationFolder","destinationProviderCode","isMove","getFileDownloads","openDownloadFolder","fileObjectId","addCloudStorageProvider","removeCloudStorageProvider","logoutRequest","addCloudStorageProviderFile","addNewFileRequest","renameCloudStorageProviderFile","renameFileRequest","deleteCloudStorageProviderFile","deleteFileRequest","itemList","downloadCloudStorageProviderFile","downloadFileRequest","uploadCloudStorageProviderFile","uploadFileRequest","registerCloudStorageProviderListChangeHandler","registerCloudStorageProviderContentChangeHandler","getPairedMeetingRoomInfo","sendCommandToPairedMeetingRoom","commandName","registerMeetingRoomCapabilitiesUpdateHandler","capabilities","registerMeetingRoomStatesUpdateHandler","states","showNotification","showNotificationParameters","ControlCommand","ErrorReason","SessionTerminatedReason","getCapableParticipants","requestControl","participant","sendControlCommand","terminateSession","registerOnCapableParticipantsChangeHandler","registerOnErrorHandler","registerOnDeviceStateChangeHandler","registerOnSessionStatusChangeHandler","selectAppEntity","threadId","categories","getTeamChannels","refreshSiteUrl","getUserJoinedTeams","teamInstanceParameters","getConfigSetting","videoEx","ErrorLevel","receivedVideoFrame","normalizedVideoBufferData","errorLevel","Warn","metadataInTexture","updatePersonalizedEffects","effects","notifyFatalError","Fatal"],"sourceRoot":""}
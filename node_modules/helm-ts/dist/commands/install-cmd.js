"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const helm_cmd_1 = require("./helm-cmd");
const helpers_1 = require("../utils/helpers");
const buildHelmInstallCmd = (name, chart, flags = {}) => {
    const allFlags = Object.assign({}, helm_cmd_1.getAliasedGlobalFlags(flags));
    const flagsString = helpers_1.buildFlagsString(allFlags);
    return `helm install ${name} ${chart} ${flagsString}`;
};
/**
 * This command installs a chart archive.
 * The install argument must be a chart reference,
 * a path to a packaged chart, a path to an unpacked chart directory or a URL.
 *
 * @param name name
 * @param chart chart
 * @param flags flags
 */
const install = (name, chart, flags = {}) => __awaiter(void 0, void 0, void 0, function* () {
    const command = buildHelmInstallCmd(name, chart, flags);
    const stdout = yield helpers_1.runCommand(command);
    return JSON.parse(stdout);
});
exports.default = install;
//# sourceMappingURL=install-cmd.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const helm_cmd_1 = require("./helm-cmd");
const helpers_1 = require("../utils/helpers");
const getAliasedRepoAddFlags = ({ username = '', password = '', } = {}) => ({
    '--username': username,
    '--password': password,
});
const buildHelmRepoAddCmd = (name, url, flags) => {
    const allFlags = Object.assign(Object.assign({}, helm_cmd_1.getAliasedGlobalFlags(flags)), getAliasedRepoAddFlags(flags));
    const flagsString = helpers_1.buildFlagsString(allFlags);
    return `helm repo add ${name} ${url} ${flagsString}`;
};
const buildHelmRepoListCmd = (flags) => {
    const allFlags = Object.assign({}, helm_cmd_1.getAliasedGlobalFlags(flags));
    const flagsString = helpers_1.buildFlagsString(allFlags);
    return `helm repo list -o json ${flagsString}`;
};
const add = (name, url, flags = {}) => {
    const command = buildHelmRepoAddCmd(name, url, flags);
    return helpers_1.runCommand(command);
};
const list = (flags = {}) => __awaiter(void 0, void 0, void 0, function* () {
    const command = buildHelmRepoListCmd(flags);
    const stdout = yield helpers_1.runCommand(command);
    return JSON.parse(stdout);
});
exports.default = {
    add,
    list,
};
//# sourceMappingURL=repo-cmd.js.map
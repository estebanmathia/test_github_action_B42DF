"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildFlagsString = exports.runCommand = void 0;
const util_1 = require("util");
const child_process_1 = __importDefault(require("child_process"));
const exec = util_1.promisify(child_process_1.default.exec);
/**
 * A wrapper around the built-in exec that will throw an exception if anything is printed to stderr
 * @param command command to execute
 */
const runCommand = (command) => __awaiter(void 0, void 0, void 0, function* () {
    const { stdout, stderr } = yield exec(command);
    if (stderr) {
        throw new Error(stderr);
    }
    return stdout;
});
exports.runCommand = runCommand;
/**
 * e.g.
 * from:
 * {
 *    '--all-namespaces': false, // if false, flag is omitted
 *    '--namespace': 'my-namespace' // if empty string, flag is omitted
 * }
 * to:
 * '--all-namespaces --namespace=my-namespace'
 */
const buildFlagsString = (flags) => {
    let flagsString = '';
    Object.entries(flags).forEach(([key, value]) => {
        if (typeof value === 'boolean') {
            flagsString += value === false ? '' : ` ${key}`;
        }
        else if (typeof value === 'string') {
            flagsString += value.length === 0 ? '' : ` ${key}=${value}`;
        }
    });
    return flagsString.trim();
};
exports.buildFlagsString = buildFlagsString;
//# sourceMappingURL=helpers.js.map